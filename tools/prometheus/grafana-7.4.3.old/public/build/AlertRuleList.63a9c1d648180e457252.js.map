{"version":3,"sources":["webpack:///./public/app/features/alerting/state/actions.ts","webpack:///./public/app/features/alerting/components/AlertDefinitionItem.tsx","webpack:///./public/app/features/alerting/AlertRuleList.tsx","webpack:///./public/app/features/alerting/AlertRuleItem.tsx","webpack:///./public/app/features/alerting/state/selectors.ts"],"names":["getAlertRulesAsync","options","dispatch","loadAlertRules","getBackendSrv","get","rules","config","featureToggles","ngalert","ngAlertDefinitions","setAlertDefinitions","results","loadedAlertRules","togglePauseAlertRule","id","getState","post","stateFilter","location","query","state","toString","createNotificationChannel","data","appEvents","emit","AppEvents","alertSuccess","updateLocation","path","alertError","error","updateNotificationChannel","put","testNotificationChannel","channel","notificationChannel","loadNotificationTypes","alertNotifiers","notificationTypes","sort","o1","o2","name","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","createAlertDefinition","getStore","queryOptions","alertDefinition","currentAlertDefinition","getDataSourceSrv","defaultDataSource","condition","refId","queriesAndExpressions","queries","map","dataSource","isExpression","datasource","ExpressionDatasourceID","uid","dataSourceSetting","getInstanceSettings","model","type","queryType","datasourceUid","relativeTimeRange","From","To","updateAlertDefinitionUiState","uiState","nextState","setUiState","store","setObject","ALERT_DEFINITION_UI_STATE_STORAGE_KEY","console","updateAlertDefinitionOption","updateAlertDefinition","queryOptionsChange","setQueryOptions","onRunQueries","queryRunner","timeRange","from","to","run","timezone","dateMath","parse","raw","maxDataPoints","minInterval","AlertDefinitionItem","search","heading","CardTitle","title","Figure","size","className","Meta","key","description","style","display","justifyContent","width","highlightClassName","textToHighlight","searchWords","featureState","FeatureState","beta","AlertRuleList","stateFilters","label","value","onStateFilterChanged","option","props","onOpenHowTo","CoreEvents","showModal","src","modalClass","onSearchQueryChange","setSearchQuery","onTogglePause","rule","paused","alertStateFilterOption","text","this","fetchRules","prevProps","getStateFilter","navModel","alertRules","isLoading","Contents","labelClassName","inputClassName","placeholder","onChange","variant","onClick","spacing","index","hasOwnProperty","PureComponent","mapDispatchToProps","hot","module","connect","getNavModel","navIndex","getAlertRuleItems","getSearchQuery","alertDefinitions","AlertRuleItem","ruleUrl","url","panelId","renderText","useCallback","href","stateIcon","stateClass","stateText","stateAge","info","Actions","icon","searchQuery","regex","RegExp","result","push","items","filter","item","test"],"mappings":"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","file":"AlertRuleList.63a9c1d648180e457252.js","sourcesContent":["import { AppEvents, dateMath } from '@grafana/data';\nimport { config, getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport { updateLocation } from 'app/core/actions';\nimport store from 'app/core/store';\nimport {\n  notificationChannelLoaded,\n  loadAlertRules,\n  loadedAlertRules,\n  setNotificationChannels,\n  setUiState,\n  ALERT_DEFINITION_UI_STATE_STORAGE_KEY,\n  updateAlertDefinition,\n  setQueryOptions,\n  setAlertDefinitions,\n} from './reducers';\nimport {\n  AlertDefinition,\n  AlertDefinitionUiState,\n  AlertRuleDTO,\n  NotifierDTO,\n  ThunkResult,\n  QueryGroupOptions,\n  QueryGroupDataSource,\n} from 'app/types';\nimport { ExpressionDatasourceID } from '../../expressions/ExpressionDatasource';\nimport { ExpressionQuery } from '../../expressions/types';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n\n    if (config.featureToggles.ngalert) {\n      const ngAlertDefinitions = await getBackendSrv().get('/api/alert-definitions');\n      dispatch(setAlertDefinitions(ngAlertDefinitions.results));\n    }\n\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = getState().location.query.state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification created']);\n      dispatch(updateLocation({ path: 'alerting/notifications' }));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification updated']);\n      dispatch(updateLocation({ path: 'alerting/notifications' }));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n\nexport function createAlertDefinition(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const queryOptions = getStore().alertDefinition.queryOptions;\n    const currentAlertDefinition = getStore().alertDefinition.alertDefinition;\n    const defaultDataSource = await getDataSourceSrv().get(null);\n\n    const alertDefinition: AlertDefinition = {\n      ...currentAlertDefinition,\n      condition: {\n        refId: currentAlertDefinition.condition.refId,\n        queriesAndExpressions: queryOptions.queries.map((query) => {\n          let dataSource: QueryGroupDataSource;\n          const isExpression = query.datasource === ExpressionDatasourceID;\n\n          if (isExpression) {\n            dataSource = { name: ExpressionDatasourceID, uid: ExpressionDatasourceID };\n          } else {\n            const dataSourceSetting = getDataSourceSrv().getInstanceSettings(query.datasource);\n\n            dataSource = {\n              name: dataSourceSetting?.name ?? defaultDataSource.name,\n              uid: dataSourceSetting?.uid ?? defaultDataSource.uid,\n            };\n          }\n\n          return {\n            model: {\n              ...query,\n              type: isExpression ? (query as ExpressionQuery).type : query.queryType,\n              datasource: dataSource.name,\n              datasourceUid: dataSource.uid,\n            },\n            refId: query.refId,\n            relativeTimeRange: {\n              From: 500,\n              To: 0,\n            },\n          };\n        }),\n      },\n    };\n\n    await getBackendSrv().post(`/api/alert-definitions`, alertDefinition);\n    appEvents.emit(AppEvents.alertSuccess, ['Alert definition created']);\n    dispatch(updateLocation({ path: 'alerting/list' }));\n  };\n}\n\nexport function updateAlertDefinitionUiState(uiState: Partial<AlertDefinitionUiState>): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const nextState = { ...getStore().alertDefinition.uiState, ...uiState };\n    dispatch(setUiState(nextState));\n\n    try {\n      store.setObject(ALERT_DEFINITION_UI_STATE_STORAGE_KEY, nextState);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\nexport function updateAlertDefinitionOption(alertDefinition: Partial<AlertDefinition>): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(updateAlertDefinition(alertDefinition));\n  };\n}\n\nexport function queryOptionsChange(queryOptions: QueryGroupOptions): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(setQueryOptions(queryOptions));\n  };\n}\n\nexport function onRunQueries(): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const { queryRunner, queryOptions } = getStore().alertDefinition;\n    const timeRange = { from: 'now-1h', to: 'now' };\n\n    queryRunner.run({\n      timezone: 'browser',\n      timeRange: { from: dateMath.parse(timeRange.from)!, to: dateMath.parse(timeRange.to)!, raw: timeRange },\n      maxDataPoints: queryOptions.maxDataPoints ?? 100,\n      minInterval: queryOptions.minInterval,\n      queries: queryOptions.queries,\n      datasource: queryOptions.dataSource.name!,\n    });\n  };\n}\n","import React, { FC } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport { Card, FeatureBadge, Icon } from '@grafana/ui';\nimport { AlertDefinition } from 'app/types';\nimport { FeatureState } from '@grafana/data';\n\ninterface Props {\n  alertDefinition: AlertDefinition;\n  search: string;\n}\n\nexport const AlertDefinitionItem: FC<Props> = ({ alertDefinition, search }) => {\n  return (\n    <Card heading={CardTitle(alertDefinition.title, search)}>\n      <Card.Figure>\n        <Icon size=\"xl\" name=\"question-circle\" className=\"alert-rule-item__icon\" />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\">{alertDefinition.description}</span>\n        </span>\n      </Card.Meta>\n    </Card>\n  );\n};\n\nconst CardTitle = (title: string, search: string) => (\n  <div style={{ display: 'flex', justifyContent: 'space-between', width: '100%' }}>\n    <Highlighter\n      key={title}\n      highlightClassName=\"highlight-search-match\"\n      textToHighlight={title}\n      searchWords={[search]}\n    />\n    <FeatureBadge featureState={FeatureState.beta} />\n  </div>\n);\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport AlertRuleItem from './AlertRuleItem';\nimport appEvents from 'app/core/app_events';\nimport { updateLocation } from 'app/core/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertDefinition, AlertRule, CoreEvents, StoreState } from 'app/types';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { NavModel, SelectableValue } from '@grafana/data';\nimport { setSearchQuery } from './state/reducers';\nimport { Button, Select, VerticalGroup } from '@grafana/ui';\nimport { AlertDefinitionItem } from './components/AlertDefinitionItem';\n\nexport interface Props {\n  navModel: NavModel;\n  alertRules: Array<AlertRule | AlertDefinition>;\n  updateLocation: typeof updateLocation;\n  getAlertRulesAsync: typeof getAlertRulesAsync;\n  setSearchQuery: typeof setSearchQuery;\n  togglePauseAlertRule: typeof togglePauseAlertRule;\n  stateFilter: string;\n  search: string;\n  isLoading: boolean;\n}\n\nexport class AlertRuleList extends PureComponent<Props, any> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No Data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.stateFilter !== this.props.stateFilter) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    const { stateFilter } = this.props;\n    if (stateFilter) {\n      return stateFilter.toString();\n    }\n    return 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    this.props.updateLocation({\n      query: { state: option.value },\n    });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.emit(CoreEvents.showModal, {\n      src: 'public/app/features/alerting/partials/alert_howto.html',\n      modalClass: 'confirm-modal',\n      model: {},\n    });\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput\n                labelClassName=\"gf-form--has-input-icon gf-form--grow\"\n                inputClassName=\"gf-form-input\"\n                placeholder=\"Search alerts\"\n                value={search}\n                onChange={this.onSearchQueryChange}\n              />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\">States</label>\n\n              <div className=\"width-13\">\n                <Select\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule, index) => {\n              // Alert definition has \"title\" as name property.\n              if (rule.hasOwnProperty('name')) {\n                return (\n                  <AlertRuleItem\n                    rule={rule as AlertRule}\n                    key={rule.id}\n                    search={search}\n                    onTogglePause={() => this.onTogglePause(rule as AlertRule)}\n                  />\n                );\n              }\n              return (\n                <AlertDefinitionItem\n                  key={`${rule.id}-${index}`}\n                  alertDefinition={rule as AlertDefinition}\n                  search={search}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'alert-list'),\n  alertRules: getAlertRuleItems(state),\n  stateFilter: state.location.query.state,\n  search: getSearchQuery(state.alertRules),\n  isLoading: state.alertRules.isLoading,\n  ngAlertDefinitions: state.alertDefinition.alertDefinitions,\n});\n\nconst mapDispatchToProps = {\n  updateLocation,\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(AlertRuleList));\n","import React, { useCallback } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport { Icon, IconName, Button, LinkButton, Card } from '@grafana/ui';\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card heading={<a href={ruleUrl}>{renderText(rule.name)}</a>}>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon as IconName} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","import { AlertDefinition, AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\nimport { config } from '@grafana/runtime';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState) => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n  const result: Array<AlertRule | AlertDefinition> = [];\n\n  result.push(\n    ...state.alertRules.items.filter((item) => {\n      return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n    })\n  );\n\n  if (config.featureToggles.ngalert) {\n    result.push(\n      ...state.alertDefinition.alertDefinitions.filter((item) => {\n        return regex.test(item.title);\n      })\n    );\n  }\n\n  return result;\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n"],"sourceRoot":""}