{"version":3,"sources":["webpack:///./public/app/plugins/datasource/postgres/response_parser.ts","webpack:///./public/app/plugins/datasource/postgres/postgres_query.ts","webpack:///./public/app/plugins/datasource/postgres/datasource.ts","webpack:///./public/app/plugins/datasource/postgres/meta_query.ts","webpack:///./public/app/plugins/datasource/postgres/sql_part.ts","webpack:///./public/app/plugins/datasource/postgres/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/config_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/module.ts","webpack:///./public/app/features/datasources/utils/passwordHandlers.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts"],"names":["ResponseParser","res","data","results","key","queryRes","series","push","target","name","datapoints","points","refId","meta","tables","table","type","length","rowCount","columns","rows","textColIndex","this","findColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","i","containsKey","text","value","j","unique","Array","from","Set","_","map","colName","options","annotation","timeColumnIndex","timeEndColumnIndex","textColumnIndex","tagsColumnIndex","Promise","reject","message","list","row","timeEnd","Math","floor","undefined","time","title","tags","trim","split","PostgresQuery","templateSrv","scopedVars","format","timeColumn","metricColumn","group","where","params","select","rawQuery","interpolateQueryStr","bind","substring","replace","String","find","g","variable","defaultFormatFn","multi","includeAll","quoteLiteral","join","escapeLiteral","interpolate","rawSql","buildQuery","indexOf","timeColumnType","query","args","alias","timeGroup","hasTimeGroup","macro","hasUnixEpochTimecolumn","hasMetricColumn","column","buildValueColumn","aggregate","windows","func","overParts","buildTimeColumn","curr","prev","over","quoteIdentifier","conditions","tag","index","groupSection","part","buildMetricColumn","buildValueColumns","buildWhereClause","buildGroupClause","PostgresDatasource","instanceSettings","getTemplateSrv","timeSrv","getTimeSrv","interpolateVariable","queryModel","v","id","jsonData","responseParser","interval","timeInterval","queries","expandedQueries","datasource","filter","targets","hide","intervalMs","maxDataPoints","datasourceId","render","of","getBackendSrv","fetch","url","method","range","valueOf","toString","to","pipe","processQueryResult","transformAnnotationResponse","toPromise","optionalOptions","getSearchFilterScopedVar","wildcardChar","interpolatedQuery","timeRange","parseMetricFindQueryResult","metricFindQuery","then","status","catch","err","console","error","variableExists","PostgresMetaQuery","datatype","unquoteIdentifier","buildSchemaConstraint","includes","parts","quoteIdentAsLiteral","buildTableConstraint","register","SqlPartDef","style","dynamicLookup","defaultParams","label","quote","create","def","SqlPart","PostgresQueryCtrl","$scope","$injector","uiSegmentSrv","panel","metaBuilder","updateProjection","formats","panelCtrl","findMetricTable","result","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","groupAdd","events","on","PanelEvents","dataReceived","onDataReceived","dataError","onDataError","refresh","selectParts","sqlPart","n","whereParts","groupParts","selectMenu","aggregates","submenu","timescaledb","postgresVersion","appEvents","emit","CoreEvents","showConfirmModal","text2","icon","yesText","onConfirm","button","plusButton","buildTableQuery","transformToSegments","handleQueryError","task1","buildColumnQuery","r","timeColumnChanged","task2","all","buildDatatypeQuery","partModel","splice","updatePersistedParts","addNone","dataList","lastQueryError","lastQueryMeta","config","segments","expandable","addTemplateVars","getVariables","templateQuoter","unshift","findIndex","p","item","subItem","partType","addAlias","clone","addGroup","aggIndex","findAggregateIndex","windowIndex","findWindowIndex","modelsIndex","partIndex","evt","buildAggregateQuery","removeSelectPart","resolve","removeGroup","some","s","param","buildValueQuery","newOperators","getOperators","d","resetPlusButton","QueryCtrl","templateUrl","PostgresConfigCtrl","datasourceSrv","postgresVersions","current","sslmode","showTimescaleDBHelp","autoDetectFeatures","onPasswordReset","createResetHandler","PasswordFieldEnum","Password","onPasswordChange","createChangeHandler","loadDatasource","ds","getVersion","version","Number","getTimescaleDBVersion","major","trunc","minor","PostgresAnnotationsQueryCtrl","ctrl","field","event","preventDefault","secureJsonFields","secureJsonData","currentTarget","toUpperCase","wrapOpen","wrapClose","separator","strValue","optional"],"mappings":"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","file":"postgresPlugin.63a9c1d648180e457252.js","sourcesContent":["import _ from 'lodash';\n\nexport default class ResponseParser {\n  processQueryResult(res: any) {\n    const data: any[] = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId: string, results: any) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any[][]) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        res.push(rows[i][j]);\n      }\n    }\n\n    const unique = Array.from(new Set(res));\n\n    return _.map(unique, (value) => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any, key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options: any, data: any) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let timeEndColumnIndex = -1;\n    const titleColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'timeend') {\n        timeEndColumnIndex = i;\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return Promise.reject({\n        message: 'Missing mandatory time column in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      const timeEnd =\n        timeEndColumnIndex !== -1 && row[timeEndColumnIndex] ? Math.floor(row[timeEndColumnIndex]) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        timeEnd,\n        title: row[titleColumnIndex],\n        text: row[textColumnIndex],\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class PostgresQuery {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: any) {\n    return '\"' + String(value).replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: any) {\n    return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return _.find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: any, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = _.map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: any) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int4', 'int8', 'float4', 'float8', 'numeric'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = _.find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = _.find(column, (g: any) => g.type === 'aggregate' || g.type === 'percentile');\n    const windows: any = _.find(column, (g: any) => g.type === 'window' || g.type === 'moving_window');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      switch (aggregate.type) {\n        case 'aggregate':\n          if (func === 'first' || func === 'last') {\n            query = func + '(' + query + ',' + this.target.timeColumn + ')';\n          } else {\n            query = func + '(' + query + ')';\n          }\n          break;\n        case 'percentile':\n          query = func + '(' + aggregate.params[1] + ') WITHIN GROUP (ORDER BY ' + query + ')';\n          break;\n      }\n    }\n\n    if (windows) {\n      const overParts = [];\n      if (this.hasMetricColumn()) {\n        overParts.push('PARTITION BY ' + this.target.metricColumn);\n      }\n      overParts.push('ORDER BY ' + this.buildTimeColumn(false));\n\n      const over = overParts.join(' ');\n      let curr: string;\n      let prev: string;\n      switch (windows.type) {\n        case 'window':\n          switch (windows.params[0]) {\n            case 'delta':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = curr + ' - ' + prev;\n              break;\n            case 'increase':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              break;\n            case 'rate':\n              let timeColumn = this.target.timeColumn;\n              if (aggregate) {\n                timeColumn = 'min(' + timeColumn + ')';\n              }\n\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              query += '/extract(epoch from ' + timeColumn + ' - lag(' + timeColumn + ') OVER (' + over + '))';\n              break;\n            default:\n              query = windows.params[0] + '(' + query + ') OVER (' + over + ')';\n              break;\n          }\n          break;\n        case 'moving_window':\n          query = windows.params[0] + '(' + query + ') OVER (' + over + ' ROWS ' + windows.params[1] + ' PRECEDING)';\n          break;\n      }\n    }\n\n    const alias: any = _.find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = _.map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY 1';\n    if (this.hasMetricColumn()) {\n      query += ',2';\n    }\n\n    return query;\n  }\n}\n","import _ from 'lodash';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { DataQueryResponse, ScopedVars } from '@grafana/data';\n\nimport ResponseParser from './response_parser';\nimport PostgresQuery from 'app/plugins/datasource/postgres/postgres_query';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n//Types\nimport { PostgresMetricFindValue, PostgresQueryForInterpolation } from './types';\nimport { getSearchFilterScopedVar } from '../../../features/variables/utils';\n\nexport class PostgresDatasource {\n  id: any;\n  name: any;\n  jsonData: any;\n  responseParser: ResponseParser;\n  queryModel: PostgresQuery;\n  interval: string;\n\n  constructor(\n    instanceSettings: { name: any; id?: any; jsonData?: any },\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.jsonData = instanceSettings.jsonData;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new PostgresQuery({});\n    this.interval = (instanceSettings.jsonData || {}).timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string | string[], variable: { multi: any; includeAll: any }) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.queryModel.quoteLiteral(value);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, (v) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: PostgresQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): PostgresQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  query(options: any): Observable<DataQueryResponse> {\n    const queries = _.filter(options.targets, (target) => {\n      return target.hide !== true;\n    }).map((target) => {\n      const queryModel = new PostgresQuery(target, this.templateSrv, options.scopedVars);\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: queryModel.render(this.interpolateVariable),\n        format: target.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return of({ data: [] });\n    }\n\n    return getBackendSrv()\n      .fetch({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .pipe(map(this.responseParser.processQueryResult));\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return getBackendSrv()\n      .fetch({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .pipe(map((data: any) => this.responseParser.transformAnnotationResponse(options, data)))\n      .toPromise();\n  }\n\n  metricFindQuery(\n    query: string,\n    optionalOptions: { variable?: any; searchFilter?: string }\n  ): Promise<PostgresMetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql,\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    return getBackendSrv()\n      .fetch({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .pipe(map((data: any) => this.responseParser.parseMetricFindQueryResult(refId, data)))\n      .toPromise();\n  }\n\n  getVersion() {\n    return this.metricFindQuery(\"SELECT current_setting('server_version_num')::int/100\", {});\n  }\n\n  getTimescaleDBVersion() {\n    return this.metricFindQuery(\"SELECT extversion FROM pg_extension WHERE extname = 'timescaledb'\", {});\n  }\n\n  testDatasource() {\n    return this.metricFindQuery('SELECT 1', {})\n      .then((res: any) => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        console.error(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new PostgresQuery(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","import QueryModel from './postgres_query';\n\nexport class PostgresMetaQuery {\n  constructor(private target: { table: string; timeColumn: string }, private queryModel: QueryModel) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'float4':\n      case 'float8': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    let query = `\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE `;\n    query += this.buildSchemaConstraint();\n    query += ` AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;`;\n    return query;\n  }\n\n  buildSchemaConstraint() {\n    const query = `\ntable_schema IN (\n  SELECT\n    CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n  FROM\n    generate_series(\n      array_lower(string_to_array(current_setting('search_path'),','),1),\n      array_upper(string_to_array(current_setting('search_path'),','),1)\n    ) as i,\n    string_to_array(current_setting('search_path'),',') s\n)`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = this.buildSchemaConstraint();\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    let query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' ORDER BY table_name';\n    return query;\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query +=\n          \" AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','integer','double precision','real')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT quote_literal(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' AND ' + column + ' IS NOT NULL';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = 'SELECT udt_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n  buildAggregateQuery() {\n    let query = 'SELECT DISTINCT proname FROM pg_aggregate ';\n    query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';\n    query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';\n    query += \"WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1\";\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'percentile',\n  label: 'Aggregate:',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['percentile_cont', 'percentile_disc'],\n    },\n    {\n      name: 'fraction',\n      type: 'number',\n      options: ['0.5', '0.75', '0.9', '0.95', '0.99'],\n    },\n  ],\n  defaultParams: ['percentile_cont', '0.95'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nregister({\n  type: 'window',\n  style: 'label',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['delta', 'increase', 'rate', 'sum'],\n    },\n  ],\n  defaultParams: ['increase'],\n});\n\nregister({\n  type: 'moving_window',\n  style: 'label',\n  label: 'Moving Window:',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['avg'],\n    },\n    {\n      name: 'window_size',\n      type: 'number',\n      options: ['3', '5', '7', '10', '20'],\n    },\n  ],\n  defaultParams: ['avg', '5'],\n});\n\nexport default {\n  create: createPart,\n};\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { PostgresMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport PostgresQuery from './postgres_query';\nimport sqlPart from './sql_part';\nimport { auto } from 'angular';\nimport { CoreEvents } from 'app/types';\nimport { PanelEvents, QueryResultMeta } from '@grafana/data';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { TemplateSrv } from '@grafana/runtime';\n\nconst defaultQuery = `SELECT\n  $__time(time_column),\n  value1\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nexport class PostgresQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  queryModel: PostgresQuery;\n  metaBuilder: PostgresMetaQuery;\n  lastQueryMeta?: QueryResultMeta;\n  lastQueryError?: string;\n  showHelp: boolean;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[];\n  selectParts: SqlPart[][];\n  groupParts: SqlPart[];\n  whereParts: SqlPart[];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new PostgresQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new PostgresMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = _.map(this.target.select, (parts: any) => {\n      return _.map(parts, sqlPart.create).filter((n) => n);\n    });\n    this.whereParts = _.map(this.target.where, sqlPart.create).filter((n) => n);\n    this.groupParts = _.map(this.target.group, sqlPart.create).filter((n) => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectParts, (selectParts) => {\n      return _.map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = _.map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = _.map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    // first and last aggregate are timescaledb specific\n    if (this.datasource.jsonData.timescaledb === true) {\n      aggregates.submenu.push({ text: 'First', value: 'first' });\n      aggregates.submenu.push({ text: 'Last', value: 'last' });\n    }\n\n    this.selectMenu.push(aggregates);\n\n    // ordered set aggregates require postgres 9.4+\n    if (this.datasource.jsonData.postgresVersion >= 904) {\n      const aggregates2 = {\n        text: 'Ordered-Set Aggregate Functions',\n        value: 'percentile',\n        submenu: [\n          { text: 'Percentile (continuous)', value: 'percentile_cont' },\n          { text: 'Percentile (discrete)', value: 'percentile_disc' },\n        ],\n      };\n      this.selectMenu.push(aggregates2);\n    }\n\n    const windows = {\n      text: 'Window Functions',\n      value: 'window',\n      submenu: [\n        { text: 'Delta', value: 'delta' },\n        { text: 'Increase', value: 'increase' },\n        { text: 'Rate', value: 'rate' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Moving Average', value: 'avg', type: 'moving_window' },\n      ],\n    };\n    this.selectMenu.push(windows);\n\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.emit(CoreEvents.showConfirmModal, {\n        title: 'Warning',\n        text2: 'Switching to query builder may overwrite your raw SQL.',\n        icon: 'exclamation-triangle',\n        yesText: 'Switch',\n        onConfirm: () => {\n          this.target.rawQuery = !this.target.rawQuery;\n        },\n      });\n    } else {\n      this.target.rawQuery = !this.target.rawQuery;\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any; type: any; fake: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n    button.type = plusButton.type;\n    button.fake = plusButton.fake;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !_.find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = dataList[0]?.meta;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: { addNone?: any; addTemplateVars?: any; templateQuoter?: any }) {\n    return (results: any) => {\n      const segments = _.map(results, (segment) => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && ((variable as unknown) as VariableWithMultiSupport).multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = _.map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: _.clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = _.indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          case 'aggregate':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some((part) => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some((part) => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = _.map(this.selectParts, (s: any) => {\n        return _.filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int4', 'int8', 'float4', 'float8', 'timestamp', 'timestamptz'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: any) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import _ from 'lodash';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport class PostgresConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  current: any;\n  datasourceSrv: any;\n  showTimescaleDBHelp: boolean;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  /** @ngInject */\n  constructor($scope: any, datasourceSrv: DatasourceSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\n    this.current.jsonData.postgresVersion = this.current.jsonData.postgresVersion || 903;\n    this.showTimescaleDBHelp = false;\n    this.autoDetectFeatures();\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n\n  autoDetectFeatures() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv.loadDatasource(this.current.name).then((ds: any) => {\n      return ds.getVersion().then((version: any) => {\n        version = Number(version[0].text);\n\n        // timescaledb is only available for 9.6+\n        if (version >= 906) {\n          ds.getTimescaleDBVersion().then((version: any) => {\n            if (version.length === 1) {\n              this.current.jsonData.timescaledb = true;\n            }\n          });\n        }\n\n        const major = Math.trunc(version / 100);\n        const minor = version % 100;\n        let name = String(major);\n        if (version < 1000) {\n          name = String(major) + '.' + String(minor);\n        }\n        if (!_.find(this.postgresVersions, (p: any) => p.value === version)) {\n          this.postgresVersions.push({ name: name, value: version });\n        }\n        this.current.jsonData.postgresVersion = version;\n      });\n    });\n  }\n\n  toggleTimescaleDBHelp() {\n    this.showTimescaleDBHelp = !this.showTimescaleDBHelp;\n  }\n\n  // the value portion is derived from postgres server_version_num/100\n  postgresVersions = [\n    { name: '9.3', value: 903 },\n    { name: '9.4', value: 904 },\n    { name: '9.5', value: 905 },\n    { name: '9.6', value: 906 },\n    { name: '10', value: 1000 },\n    { name: '11', value: 1100 },\n    { name: '12', value: 1200 },\n  ];\n}\n","import { PostgresDatasource } from './datasource';\nimport { PostgresQueryCtrl } from './query_ctrl';\nimport { PostgresConfigCtrl } from './config_ctrl';\n\nconst defaultQuery = `SELECT\n  extract(epoch from time_column) AS time,\n  text_column as text,\n  tags_column as tags\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nclass PostgresAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  PostgresDatasource,\n  PostgresDatasource as Datasource,\n  PostgresQueryCtrl as QueryCtrl,\n  PostgresConfigCtrl as ConfigCtrl,\n  PostgresAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular datasource plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = undefined;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import _ from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || _.clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n"],"sourceRoot":""}