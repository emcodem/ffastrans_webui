{"version":3,"sources":["webpack:///./public/app/features/alerting/NewNotificationChannelPage.tsx"],"names":["NewNotificationChannelPage","onSubmit","data","props","createNotificationChannel","transformSubmitData","defaultValues","onTestChannel","testNotificationChannel","transformTestData","this","loadNotificationTypes","navModel","notificationChannelTypes","Contents","className","validateOn","maxWidth","register","errors","control","getValues","watch","selectedChannel","find","c","value","type","selectableChannels","mapChannelsToSelectableValue","imageRendererAvailable","config","rendererAvailable","resetSecureField","secureFields","PureComponent","mapDispatchToProps","connect","state","getNavModel","navIndex","notificationChannel"],"mappings":"wyDAkCMA,E,6KAKJC,SAAW,SAACC,GACV,EAAKC,MAAMC,0BAA0BC,YAAoB,EAAD,GAAMC,IAAN,GAAwBJ,M,EAGlFK,cAAgB,SAACL,GACf,EAAKC,MAAMK,wBAAwBC,YAAkB,EAAD,GAAMH,IAAN,GAAwBJ,M,6SAR5EQ,KAAKP,MAAMQ,0B,+BAWJ,aACwCD,KAAKP,MAA5CS,EADD,EACCA,SAAUC,EADX,EACWA,yBAElB,OACE,kBAAC,IAAD,CAAMD,SAAUA,GACd,kBAAC,IAAKE,SAAN,KACE,wBAAIC,UAAU,oBAAd,4BACA,kBAAC,OAAD,CAAMd,SAAUS,KAAKT,SAAUe,WAAW,WAAWV,cAAeA,IAAeW,SAAU,MAC1F,YAAqD,IAAlDC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MAClCC,EAAkBV,EAAyBW,MAAK,SAACC,GAAD,OAAOA,EAAEC,QAAUL,IAAYM,KAAKD,SAE1F,OACE,kBAAC,IAAD,CACEE,mBAAoBC,YAA6BhB,GAA0B,GAC3EU,gBAAiBA,EACjBhB,cAAe,EAAKA,cACpBW,SAAUA,EACVC,OAAQA,EACRE,UAAWA,EACXD,QAASA,EACTE,MAAOA,EACPQ,uBAAwBC,SAAOC,kBAC/BC,iBAAkB,EAAK9B,MAAM8B,iBAC7BC,aAAc,e,8BApCSC,iBAsDnCC,EAAkE,CACtEhC,8BACAO,0BACAH,4BACAyB,sBAGaI,6BAdgE,SAACC,GAC9E,MAAO,CACL1B,SAAU2B,YAAYD,EAAME,SAAU,YACtC3B,yBAA0ByB,EAAMG,oBAAoB5B,4BAWhBuB,EAAzBC,CAA6CrC","file":"NewNotificationChannel.63a9c1d648180e457252.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Form } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { NotificationChannelForm } from './components/NotificationChannelForm';\nimport {\n  defaultValues,\n  mapChannelsToSelectableValue,\n  transformSubmitData,\n  transformTestData,\n} from './utils/notificationChannels';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { createNotificationChannel, loadNotificationTypes, testNotificationChannel } from './state/actions';\nimport { NotificationChannelType, NotificationChannelDTO, StoreState } from '../../types';\nimport { resetSecureField } from './state/reducers';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n  notificationChannelTypes: NotificationChannelType[];\n}\n\ninterface DispatchProps {\n  createNotificationChannel: typeof createNotificationChannel;\n  loadNotificationTypes: typeof loadNotificationTypes;\n  testNotificationChannel: typeof testNotificationChannel;\n  resetSecureField: typeof resetSecureField;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass NewNotificationChannelPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadNotificationTypes();\n  }\n\n  onSubmit = (data: NotificationChannelDTO) => {\n    this.props.createNotificationChannel(transformSubmitData({ ...defaultValues, ...data }));\n  };\n\n  onTestChannel = (data: NotificationChannelDTO) => {\n    this.props.testNotificationChannel(transformTestData({ ...defaultValues, ...data }));\n  };\n\n  render() {\n    const { navModel, notificationChannelTypes } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <h2 className=\"page-sub-heading\">New notification channel</h2>\n          <Form onSubmit={this.onSubmit} validateOn=\"onChange\" defaultValues={defaultValues} maxWidth={600}>\n            {({ register, errors, control, getValues, watch }) => {\n              const selectedChannel = notificationChannelTypes.find((c) => c.value === getValues().type.value);\n\n              return (\n                <NotificationChannelForm\n                  selectableChannels={mapChannelsToSelectableValue(notificationChannelTypes, true)}\n                  selectedChannel={selectedChannel}\n                  onTestChannel={this.onTestChannel}\n                  register={register}\n                  errors={errors}\n                  getValues={getValues}\n                  control={control}\n                  watch={watch}\n                  imageRendererAvailable={config.rendererAvailable}\n                  resetSecureField={this.props.resetSecureField}\n                  secureFields={{}}\n                />\n              );\n            }}\n          </Form>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state) => {\n  return {\n    navModel: getNavModel(state.navIndex, 'channels'),\n    notificationChannelTypes: state.notificationChannel.notificationChannelTypes,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  createNotificationChannel,\n  loadNotificationTypes,\n  testNotificationChannel,\n  resetSecureField,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewNotificationChannelPage);\n"],"sourceRoot":""}