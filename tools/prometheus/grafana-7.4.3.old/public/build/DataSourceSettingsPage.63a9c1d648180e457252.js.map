{"version":3,"sources":["webpack:///./public/app/features/datasources/settings/ButtonRow.tsx","webpack:///./public/app/features/datasources/settings/CloudInfoBox.tsx","webpack:///./public/app/features/plugins/PluginStateInfo.tsx","webpack:///./public/app/features/datasources/settings/PluginSettings.tsx","webpack:///./public/app/features/datasources/settings/BasicSettings.tsx","webpack:///./public/app/features/datasources/settings/DataSourceSettingsPage.tsx","webpack:///./public/app/core/components/connectWithCleanUp.tsx"],"names":["ButtonRow","isReadOnly","onDelete","onSubmit","onTest","className","type","disabled","onClick","event","aria-label","selectors","pages","DataSource","saveAndTest","delete","href","config","appSubUrl","CloudInfoBox","dataSource","styles","useStyles","getStyles","mainDS","extraDS","readOnly","version","buildInfo","edition","GrafanaEdition","OpenSource","title","persistenceId","box","branded","text","target","rel","theme","css","spacing","lg","colors","textSemiWeak","sm","PluginStateinfo","props","state","PluginState","alpha","beta","getPluginStateInfoText","PluginSettings","onModelChanged","onModelChange","scopeProps","ctrl","datasourceMeta","dataSourceMeta","current","_","cloneDeep","bind","plugin","this","element","components","ConfigEditor","loader","getAngularLoader","component","load","prevProps","digest","destroy","ref","React","createElement","options","onOptionsChange","PureComponent","Input","LegacyForms","Switch","BasicSettings","dataSourceName","isDefault","onDefaultChange","onNameChange","style","marginRight","tooltip","value","placeholder","onChange","required","name","label","checked","DataSourceSettingsPage","evt","preventDefault","updateDataSource","testDataSource","appEvents","emit","CoreEvents","showConfirmModal","yesText","icon","onConfirm","confirmDelete","deleteDataSource","dataSourceLoaded","initDataSourceSettings","pageId","loadError","showDelete","msg","toString","data","message","isString","node","subTitle","nav","main","navModel","Contents","page","configPages","p","id","body","query","setDataSourceName","setIsDefault","testingStatus","renderIsReadOnlyMessage","severity","status","alert","renderLoadError","isLoading","hasDataSource","renderConfigPageBody","renderSettings","mapDispatchToProps","loadDataSource","hot","module","connectWithCleanUp","getRouteParamsId","location","getDataSource","dataSources","dataSourceSettings","getNavModel","navIndex","getDataSourceLoadingNav","getDataSourceMeta","mapStateToProps","stateSelector","Component","ConnectedComponent","connect","ConnectedComponentWithCleanUp","dispatch","useDispatch","useEffect","cleanUpAction","displayName","hoistNonReactStatics"],"mappings":"8FAAA,iDA+CeA,IAnCc,SAAC,GAA+C,IAA7CC,EAA6C,EAA7CA,WAAYC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC9D,OACE,yBAAKC,UAAU,uBACXJ,GACA,4BACEK,KAAK,SACLD,UAAU,kBACVE,SAAUN,EACVO,QAAS,SAACC,GAAD,OAAWN,EAASM,IAC7BC,aAAYC,YAAUC,MAAMC,WAAWC,aALzC,eAUDb,GACC,4BAAQK,KAAK,SAASD,UAAU,kBAAkBG,QAASJ,GAA3D,QAIF,4BACEE,KAAK,SACLD,UAAU,iBACVE,SAAUN,EACVO,QAASN,EACTQ,aAAYC,YAAUC,MAAMC,WAAWE,QALzC,UASA,uBAAGV,UAAU,kBAAkBW,KAAI,UAAKC,IAAOC,UAAZ,iBAAnC,W,ggBC7BC,IAAMC,EAA0B,SAAC,GAAmB,MAAjBC,EAAiB,EAAjBA,WAClCC,EAASC,oBAAUC,GACrBC,EAAS,GACTC,EAAU,GAGd,GAAIL,EAAWM,WAAY,UAACN,EAAWO,eAAZ,QAAuB,GAAK,EACrD,OAAO,KAIT,GAAIV,IAAOW,UAAUC,UAAYC,IAAeC,WAC9C,OAAO,KAGT,OAAQX,EAAWd,MACjB,IAAK,aACHkB,EAAS,aACTC,EAAU,OACV,MACF,IAAK,OACHD,EAAS,OACTC,EAAU,aACV,MACF,QACE,OAAO,KAGX,OACE,kBAAC,4BAAD,CACEO,MAAK,yBAAoBR,EAApB,sBACLS,cAAc,sCACd5B,UAAWgB,EAAOa,IAClBC,SAAS,GAET,yBAAK9B,UAAWgB,EAAOe,MAAvB,8BAC8BZ,EAD9B,SAC4CC,EAD5C,kFAEwB,IACtB,uBACEpB,UAAU,gBACVW,KAAI,+EAA0EI,EAAWd,KAArF,aACJ+B,OAAO,SACPC,IAAI,aACJN,MAAM,+DALR,mCAHF,OAkBAT,EAAY,SAACgB,GACjB,MAAO,CACLL,IAAKM,cAAF,IACaD,EAAME,QAAQC,IAE9BN,KAAMI,cAAF,IACOD,EAAMI,OAAOC,aACXL,EAAME,QAAQI,O,+SClChBC,IAlBoB,SAACC,GAClC,IAAMX,EAXR,SAAgCY,GAC9B,OAAQA,GACN,KAAKC,cAAYC,MACf,MAAO,2FACT,KAAKD,cAAYE,KACf,MAAO,6EAEX,OAAO,KAIMC,CAAuBL,EAAMC,OAE1C,OAAKZ,EAKH,kBAAC,cAAD,CACEY,MAAOD,EAAMC,MACbZ,KAAMA,EACN/B,UAAWmC,cAAF,OAPJ,O,i2BCFJ,IAAMa,EAAb,YAQE,WAAYN,GAAc,M,IAAA,O,4FAAA,S,EACxB,K,EAAA,eAAMA,IAAN,G,iDAyCFO,eAAiB,SAAClC,GAChB,EAAK2B,MAAMQ,cAAcnC,IAxCzB,EAAKoC,WAAa,CAChBC,KAAM,CAAEC,eAAgBX,EAAMY,eAAgBC,QAASC,IAAEC,UAAUf,EAAM3B,aACzEkC,eAAgB,EAAKA,gBAEvB,EAAKA,eAAiB,EAAKA,eAAeS,KAApB,MAPE,E,UAR5B,O,kOAAA,M,EAAA,G,EAAA,2CAkBsB,IACVC,EAAWC,KAAKlB,MAAhBiB,OAER,GAAKC,KAAKC,UAILF,EAAOG,WAAWC,aAAc,CAGnC,IAAMC,EAASC,6BAGfL,KAAKM,UAAYF,EAAOG,KAAKP,KAAKC,QAASD,KAAKT,WAF/B,yDA7BvB,yCAmCqBiB,GACER,KAAKlB,MAAhBiB,OACIG,WAAWC,cAAgBH,KAAKlB,MAAM3B,aAAeqD,EAAUrD,aACzE6C,KAAKT,WAAWC,KAAKG,QAAUC,IAAEC,UAAUG,KAAKlB,MAAM3B,YAEtD6C,KAAKM,UAAUG,YAxCrB,6CA6CQT,KAAKM,WACPN,KAAKM,UAAUI,YA9CrB,+BAsDW,aACwBV,KAAKlB,MAA5BiB,EADD,EACCA,OAAQ5C,EADT,EACSA,WAEhB,OAAK4C,EAKH,yBAAKY,IAAK,SAACV,GAAD,OAAc,EAAKA,QAAUA,IACpCF,EAAOG,WAAWC,cACjBS,IAAMC,cAAcd,EAAOG,WAAWC,aAAc,CAClDW,QAAS3D,EACT4D,gBAAiBf,KAAKX,kBARrB,U,2BA1Db,GAAoC2B,kB,kCCrBpC,iDAIQC,EAAkBC,cAAlBD,MAAOE,EAAWD,cAAXC,OA6CAC,IApCkB,SAAC,GAAiE,IAA/DC,EAA+D,EAA/DA,eAAgBC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,aAC9E,OACE,yBAAKpF,UAAU,gBAAgBK,aAAW,2CACxC,yBAAKL,UAAU,kBACb,yBAAKA,UAAU,uBAAuBqF,MAAO,CAAEC,YAAa,QAC1D,kBAAC,kBAAD,CACEC,QACE,qHAFJ,QAQA,kBAACV,EAAD,CACE7E,UAAU,6BACVC,KAAK,OACLuF,MAAOP,EACPQ,YAAY,OACZC,SAAU,SAACtF,GAAD,OAAWgF,EAAahF,EAAM4B,OAAOwD,QAC/CG,UAAQ,EACRtF,aAAYC,YAAUC,MAAMC,WAAWoF,QAG3C,kBAACb,EAAD,CACEc,MAAM,UACNC,QAASZ,EACTQ,SAAU,SAACtF,GAET+E,EAAgB/E,EAAM4B,OAAO8D,gB,0uECelC,IAAMC,EAAb,6KAMEjG,SANF,4CAMa,WAAOkG,GAAP,uFACTA,EAAIC,iBADK,SAGH,EAAKvD,MAAMwD,iBAAX,KAAiC,EAAKxD,MAAM3B,aAHzC,OAKT,EAAKoF,iBALI,2CANb,wDAcEpG,OAdF,4CAcW,WAAOiG,GAAP,gFACPA,EAAIC,iBAEJ,EAAKE,iBAHE,2CAdX,wDAoBEtG,SAAW,WACTuG,IAAUC,KAAKC,aAAWC,iBAAkB,CAC1C5E,MAAO,SACPI,KAAM,oDACNyE,QAAS,SACTC,KAAM,YACNC,UAAW,WACT,EAAKC,oBA3Bb,EAgCEA,cAAgB,WACd,EAAKjE,MAAMkE,oBAjCf,EAoCE1D,cAAgB,SAACnC,GACf,EAAK2B,MAAMmE,iBAAiB9F,IArChC,E,UAAA,O,kOAAA,M,EAAA,G,EAAA,2CACsB,MACyB6C,KAAKlB,OAChDoE,EAFkB,EACVA,wBADU,EACcC,UAFpC,mCAyCI,OAA0C,IAAnCnD,KAAKlB,MAAM3B,WAAWM,WAzCjC,gDA6CI,OACE,yBAAKrB,UAAU,0BAAf,0IA9CN,uCAqDmB,MACwB4D,KAAKlB,MAApC3B,EADO,EACPA,WAAYoF,EADL,EACKA,eACpBA,EAAepF,EAAW6E,QAvD9B,sCA8DkBoB,GACd,IAAIC,GAAa,EACbC,EAAMF,EAAUG,WAChBH,EAAUI,KACRJ,EAAUI,KAAKC,UACjBH,EAAMF,EAAUI,KAAKC,SAEdC,IAASN,KAClBC,GAAa,GAGf,IAAMM,EAAO,CACXxF,KAAMmF,EACNM,SAAU,oBACVf,KAAM,wBAEFgB,EAAM,CACVF,KAAMA,EACNG,KAAMH,GAGR,OACE,kBAAC,IAAD,CAAMI,SAAUF,GACd,kBAAC,IAAKG,SAAN,KACE,6BACE,yBAAK5H,UAAU,sBACZiH,GACC,4BAAQhH,KAAK,SAASD,UAAU,iBAAiBG,QAASyD,KAAK/D,UAA/D,UAIF,uBAAGG,UAAU,kBAAkBW,KAAK,eAApC,cA7Fd,2CAuGuBkH,GAAc,IACzBlE,EAAWC,KAAKlB,MAAhBiB,OACR,IAAKA,IAAWA,EAAOmE,YACrB,OAAO,KAHwB,2BAMjC,YAAgBnE,EAAOmE,YAAvB,+CAAoC,KAAzBC,EAAyB,QAClC,GAAIA,EAAEC,KAAOH,EACX,OAAO,kBAACE,EAAEE,KAAH,CAAQtE,OAAQA,EAAQuE,MAAOtE,KAAKlB,MAAMwF,SARpB,kFAYjC,OAAO,gDAAsBL,KAnHjC,uCAsHmB,aACgFjE,KAAKlB,MAA5FY,EADO,EACPA,eAAgB6E,EADT,EACSA,kBAAmBC,EAD5B,EAC4BA,aAAcrH,EAD1C,EAC0CA,WAAY4C,EADtD,EACsDA,OAAQ0E,EAD9D,EAC8DA,cAE7E,OACE,0BAAMvI,SAAU8D,KAAK9D,UAClB8D,KAAKhE,cAAgBgE,KAAK0E,0BAC1BhF,EAAeX,OACd,yBAAK3C,UAAU,WACb,2BAAOA,UAAU,0BAAjB,gBACA,2BAAOA,UAAU,4CACf,kBAAC,IAAD,CAAiB2C,MAAOW,EAAeX,UAK7C,kBAAC,IAAD,CAAc5B,WAAYA,IAE1B,kBAAC,IAAD,CACEkE,eAAgBlE,EAAW6E,KAC3BV,UAAWnE,EAAWmE,UACtBC,gBAAiB,SAACxC,GAAD,OAAWyF,EAAazF,IACzCyC,aAAc,SAACQ,GAAD,OAAUuC,EAAkBvC,MAG3CjC,GACC,kBAAC,IAAD,CACEA,OAAQA,EACR5C,WAAYA,EACZuC,eAAgBA,EAChBJ,cAAeU,KAAKV,gBAIxB,yBAAKlD,UAAU,iBACZqI,GAAiBA,EAAchB,SAC9B,kBAAC,QAAD,CACEkB,SAAmC,UAAzBF,EAAcG,OAAqB,QAAU,UACvD7G,MAAO0G,EAAchB,QACrBhH,aAAYC,YAAUC,MAAMC,WAAWiI,SAK7C,kBAAC,IAAD,CACE3I,SAAU,SAACM,GAAD,OAAW,EAAKN,SAASM,IACnCR,WAAYgE,KAAKhE,aACjBC,SAAU+D,KAAK/D,SACfE,OAAQ,SAACK,GAAD,OAAW,EAAKL,OAAOK,SArKzC,+BA2KW,MAC+BwD,KAAKlB,MAAnCiF,EADD,EACCA,SAAUE,EADX,EACWA,KAAMb,EADjB,EACiBA,UAExB,OAAIA,EACKpD,KAAK8E,gBAAgB1B,GAI5B,kBAAC,IAAD,CAAMW,SAAUA,GACd,kBAAC,IAAKC,SAAN,CAAee,WAAY/E,KAAKgF,eAC7BhF,KAAKgF,cAAgB,6BAAMf,EAAOjE,KAAKiF,qBAAqBhB,GAAQjE,KAAKkF,kBAA0B,SArL9G,oCA2DI,OAAOlF,KAAKlB,MAAM3B,WAAWiH,GAAK,O,2BA3DtC,GAA4CpD,iBAmN5C,IAAMmE,EAAqB,CACzBnC,qBACAoC,mBACAb,sBACAjC,qBACAkC,iBACAvB,qBACAC,2BACAX,oBAGa8C,wBAAIC,EAAJD,CACbE,aAnCF,SAAyBxG,GACvB,IAAMoE,EAASqC,YAAiBzG,EAAM0G,UAChCtI,EAAauI,YAAc3G,EAAM4G,YAAaxC,GAC9Cc,EAAOlF,EAAM0G,SAASnB,MAAML,KAHQ,EAIGlF,EAAM6G,mBAA3C7F,EAJkC,EAIlCA,OAAQqD,EAJ0B,EAI1BA,UAAWqB,EAJe,EAIfA,cAE3B,MAAO,CACLV,SAAU8B,YACR9G,EAAM+G,SACN7B,EAAO,mBAAH,OAAsBA,GAAtB,8BAAsDd,GAC1D4C,YAAwB,aAE1B5I,WAAYuI,YAAc3G,EAAM4G,YAAaxC,GAC7CzD,eAAgBsG,YAAkBjH,EAAM4G,YAAaxI,EAAWd,MAChE8G,OAAQA,EACRmB,MAAOvF,EAAM0G,SAASnB,MACtBL,OACAlE,SACAqD,YACAqB,mBAgBkCU,GAAoB,SAACpG,GAAD,OAAWA,EAAM6G,qBAAzEL,CAA6FpD,K,2DCvR/F,wGAKaoD,EAAqB,SAQhCU,EACAd,EACAe,GAVgC,OAW7B,SAACC,GACJ,IAAMC,EAAqBC,kBACzBJ,EACAd,EAFyBkB,CAIzBF,GAEIG,EAAmD,SAACxH,GACxD,IAAMyH,EAAWC,wBAOjB,OANAC,qBAAU,WACR,OAAO,WACLF,EAASG,YAAc,CAAER,sBAE1B,IAEI,kBAACE,EAAuBtH,IAOjC,OAJAwH,EAA8BK,YAA9B,6BAAkEP,EAAmBO,YAArF,KACAC,IAAqBN,EAA+BH,GAG7CG","file":"DataSourceSettingsPage.63a9c1d648180e457252.js","sourcesContent":["import React, { FC } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport config from 'app/core/config';\n\nexport interface Props {\n  isReadOnly: boolean;\n  onDelete: () => void;\n  onSubmit: (event: any) => void;\n  onTest: (event: any) => void;\n}\n\nconst ButtonRow: FC<Props> = ({ isReadOnly, onDelete, onSubmit, onTest }) => {\n  return (\n    <div className=\"gf-form-button-row\">\n      {!isReadOnly && (\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={isReadOnly}\n          onClick={(event) => onSubmit(event)}\n          aria-label={selectors.pages.DataSource.saveAndTest}\n        >\n          Save &amp; Test\n        </button>\n      )}\n      {isReadOnly && (\n        <button type=\"submit\" className=\"btn btn-success\" onClick={onTest}>\n          Test\n        </button>\n      )}\n      <button\n        type=\"button\"\n        className=\"btn btn-danger\"\n        disabled={isReadOnly}\n        onClick={onDelete}\n        aria-label={selectors.pages.DataSource.delete}\n      >\n        Delete\n      </button>\n      <a className=\"btn btn-inverse\" href={`${config.appSubUrl}/datasources`}>\n        Back\n      </a>\n    </div>\n  );\n};\n\nexport default ButtonRow;\n","import { DataSourceSettings, GrafanaTheme } from '@grafana/data';\nimport { DismissableFeatureInfoBox, useStyles } from '@grafana/ui';\nimport { css } from 'emotion';\nimport React, { FC } from 'react';\nimport { config } from 'app/core/config';\nimport { GrafanaEdition } from '@grafana/data/src/types/config';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport const CloudInfoBox: FC<Props> = ({ dataSource }) => {\n  const styles = useStyles(getStyles);\n  let mainDS = '';\n  let extraDS = '';\n\n  // don't show for already configured data sources or provisioned data sources\n  if (dataSource.readOnly || (dataSource.version ?? 0) > 2) {\n    return null;\n  }\n\n  // Skip showing this info box in some editions\n  if (config.buildInfo.edition !== GrafanaEdition.OpenSource) {\n    return null;\n  }\n\n  switch (dataSource.type) {\n    case 'prometheus':\n      mainDS = 'Prometheus';\n      extraDS = 'Loki';\n      break;\n    case 'loki':\n      mainDS = 'Loki';\n      extraDS = 'Prometheus';\n      break;\n    default:\n      return null;\n  }\n\n  return (\n    <DismissableFeatureInfoBox\n      title={`Configure your ${mainDS} data source below`}\n      persistenceId=\"data-source-settings-cloud-info-box\"\n      className={styles.box}\n      branded={false}\n    >\n      <div className={styles.text}>\n        Or skip the effort and get {mainDS} (and {extraDS}) as fully managed, scalable and hosted data sources from\n        Grafana Labs with the{' '}\n        <a\n          className=\"external-link\"\n          href={`https://grafana.com/signup/cloud/connect-account?src=grafana-oss&cnt=${dataSource.type}-settings`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          title=\"The free plan includes 10k active metrics and 50gb storage.\"\n        >\n          free-forever Grafana Cloud plan\n        </a>\n        .\n      </div>\n    </DismissableFeatureInfoBox>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    box: css`\n      margin: 0 0 ${theme.spacing.lg} 0;\n    `,\n    text: css`\n      color: ${theme.colors.textSemiWeak};\n      padding: ${theme.spacing.sm} 0;\n      a {\n        text-decoration: underline;\n      }\n    `,\n  };\n};\n","import React, { FC } from 'react';\nimport { AlphaNotice } from '@grafana/ui';\nimport { PluginState } from '@grafana/data';\nimport { css } from 'emotion';\n\ninterface Props {\n  state?: PluginState;\n}\n\nfunction getPluginStateInfoText(state?: PluginState): string | null {\n  switch (state) {\n    case PluginState.alpha:\n      return 'Alpha Plugin: This plugin is a work in progress and updates may include breaking changes';\n    case PluginState.beta:\n      return 'Beta Plugin: There could be bugs and minor breaking changes to this plugin';\n  }\n  return null;\n}\n\nconst PluginStateinfo: FC<Props> = (props) => {\n  const text = getPluginStateInfoText(props.state);\n\n  if (!text) {\n    return null;\n  }\n\n  return (\n    <AlphaNotice\n      state={props.state}\n      text={text}\n      className={css`\n        margin-left: 16px;\n      `}\n    />\n  );\n};\n\nexport default PluginStateinfo;\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport {\n  DataSourceSettings,\n  DataSourcePlugin,\n  DataSourcePluginMeta,\n  DataSourceApi,\n  DataQuery,\n  DataSourceJsonData,\n} from '@grafana/data';\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\n\nexport type GenericDataSourcePlugin = DataSourcePlugin<DataSourceApi<DataQuery, DataSourceJsonData>>;\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class PluginSettings extends PureComponent<Props> {\n  element: any;\n  component: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: _.cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to apprach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = _.cloneDeep(this.props.dataSource);\n\n      this.component.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={(element) => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n\nexport default PluginSettings;\n","import React, { FC } from 'react';\nimport { InlineFormLabel, LegacyForms } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nconst { Input, Switch } = LegacyForms;\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n}\n\nconst BasicSettings: FC<Props> = ({ dataSourceName, isDefault, onDefaultChange, onNameChange }) => {\n  return (\n    <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form max-width-30\" style={{ marginRight: '3px' }}>\n          <InlineFormLabel\n            tooltip={\n              'The name is used when you select the data source in panels. The Default data source is ' +\n              'preselected in new panels.'\n            }\n          >\n            Name\n          </InlineFormLabel>\n          <Input\n            className=\"gf-form-input max-width-23\"\n            type=\"text\"\n            value={dataSourceName}\n            placeholder=\"Name\"\n            onChange={(event) => onNameChange(event.target.value)}\n            required\n            aria-label={selectors.pages.DataSource.name}\n          />\n        </div>\n        <Switch\n          label=\"Default\"\n          checked={isDefault}\n          onChange={(event) => {\n            // @ts-ignore\n            onDefaultChange(event.target.checked);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BasicSettings;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport isString from 'lodash/isString';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport { GenericDataSourcePlugin, PluginSettings } from './PluginSettings';\nimport BasicSettings from './BasicSettings';\nimport ButtonRow from './ButtonRow';\n// Services & Utils\nimport appEvents from 'app/core/app_events';\n// Actions & selectors\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\nimport {\n  deleteDataSource,\n  initDataSourceSettings,\n  loadDataSource,\n  testDataSource,\n  updateDataSource,\n} from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId } from 'app/core/selectors/location';\n// Types\nimport { CoreEvents, StoreState } from 'app/types/';\nimport { DataSourcePluginMeta, DataSourceSettings, NavModel, UrlQueryMap } from '@grafana/data';\nimport { Alert } from '@grafana/ui';\nimport { getDataSourceLoadingNav } from '../state/navModel';\nimport PluginStateinfo from 'app/features/plugins/PluginStateInfo';\nimport { dataSourceLoaded, setDataSourceName, setIsDefault } from '../state/reducers';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { CloudInfoBox } from './CloudInfoBox';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  pageId: number;\n  deleteDataSource: typeof deleteDataSource;\n  loadDataSource: typeof loadDataSource;\n  setDataSourceName: typeof setDataSourceName;\n  updateDataSource: typeof updateDataSource;\n  setIsDefault: typeof setIsDefault;\n  dataSourceLoaded: typeof dataSourceLoaded;\n  initDataSourceSettings: typeof initDataSourceSettings;\n  testDataSource: typeof testDataSource;\n  plugin?: GenericDataSourcePlugin;\n  query: UrlQueryMap;\n  page?: string;\n  testingStatus?: {\n    message?: string;\n    status?: string;\n  };\n  loadError?: Error | string;\n}\n\nexport class DataSourceSettingsPage extends PureComponent<Props> {\n  componentDidMount() {\n    const { initDataSourceSettings, pageId } = this.props;\n    initDataSourceSettings(pageId);\n  }\n\n  onSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    await this.props.updateDataSource({ ...this.props.dataSource });\n\n    this.testDataSource();\n  };\n\n  onTest = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    this.testDataSource();\n  };\n\n  onDelete = () => {\n    appEvents.emit(CoreEvents.showConfirmModal, {\n      title: 'Delete',\n      text: 'Are you sure you want to delete this data source?',\n      yesText: 'Delete',\n      icon: 'trash-alt',\n      onConfirm: () => {\n        this.confirmDelete();\n      },\n    });\n  };\n\n  confirmDelete = () => {\n    this.props.deleteDataSource();\n  };\n\n  onModelChange = (dataSource: DataSourceSettings) => {\n    this.props.dataSourceLoaded(dataSource);\n  };\n\n  isReadOnly() {\n    return this.props.dataSource.readOnly === true;\n  }\n\n  renderIsReadOnlyMessage() {\n    return (\n      <div className=\"grafana-info-box span8\">\n        This datasource was added by config and cannot be modified using the UI. Please contact your server admin to\n        update this datasource.\n      </div>\n    );\n  }\n\n  testDataSource() {\n    const { dataSource, testDataSource } = this.props;\n    testDataSource(dataSource.name);\n  }\n\n  get hasDataSource() {\n    return this.props.dataSource.id > 0;\n  }\n\n  renderLoadError(loadError: any) {\n    let showDelete = false;\n    let msg = loadError.toString();\n    if (loadError.data) {\n      if (loadError.data.message) {\n        msg = loadError.data.message;\n      }\n    } else if (isString(loadError)) {\n      showDelete = true;\n    }\n\n    const node = {\n      text: msg,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n    const nav = {\n      node: node,\n      main: node,\n    };\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents>\n          <div>\n            <div className=\"gf-form-button-row\">\n              {showDelete && (\n                <button type=\"submit\" className=\"btn btn-danger\" onClick={this.onDelete}>\n                  Delete\n                </button>\n              )}\n              <a className=\"btn btn-inverse\" href=\"datasources\">\n                Back\n              </a>\n            </div>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  renderConfigPageBody(page: string) {\n    const { plugin } = this.props;\n    if (!plugin || !plugin.configPages) {\n      return null; // still loading\n    }\n\n    for (const p of plugin.configPages) {\n      if (p.id === page) {\n        return <p.body plugin={plugin} query={this.props.query} />;\n      }\n    }\n\n    return <div>Page Not Found: {page}</div>;\n  }\n\n  renderSettings() {\n    const { dataSourceMeta, setDataSourceName, setIsDefault, dataSource, plugin, testingStatus } = this.props;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n        {dataSourceMeta.state && (\n          <div className=\"gf-form\">\n            <label className=\"gf-form-label width-10\">Plugin state</label>\n            <label className=\"gf-form-label gf-form-label--transparent\">\n              <PluginStateinfo state={dataSourceMeta.state} />\n            </label>\n          </div>\n        )}\n\n        <CloudInfoBox dataSource={dataSource} />\n\n        <BasicSettings\n          dataSourceName={dataSource.name}\n          isDefault={dataSource.isDefault}\n          onDefaultChange={(state) => setIsDefault(state)}\n          onNameChange={(name) => setDataSourceName(name)}\n        />\n\n        {plugin && (\n          <PluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={this.onModelChange}\n          />\n        )}\n\n        <div className=\"gf-form-group\">\n          {testingStatus && testingStatus.message && (\n            <Alert\n              severity={testingStatus.status === 'error' ? 'error' : 'success'}\n              title={testingStatus.message}\n              aria-label={selectors.pages.DataSource.alert}\n            />\n          )}\n        </div>\n\n        <ButtonRow\n          onSubmit={(event) => this.onSubmit(event)}\n          isReadOnly={this.isReadOnly()}\n          onDelete={this.onDelete}\n          onTest={(event) => this.onTest(event)}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    const { navModel, page, loadError } = this.props;\n\n    if (loadError) {\n      return this.renderLoadError(loadError);\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!this.hasDataSource}>\n          {this.hasDataSource ? <div>{page ? this.renderConfigPageBody(page) : this.renderSettings()}</div> : null}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const pageId = getRouteParamsId(state.location);\n  const dataSource = getDataSource(state.dataSources, pageId);\n  const page = state.location.query.page as string;\n  const { plugin, loadError, testingStatus } = state.dataSourceSettings;\n\n  return {\n    navModel: getNavModel(\n      state.navIndex,\n      page ? `datasource-page-${page}` : `datasource-settings-${pageId}`,\n      getDataSourceLoadingNav('settings')\n    ),\n    dataSource: getDataSource(state.dataSources, pageId),\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\n    pageId: pageId,\n    query: state.location.query,\n    page,\n    plugin,\n    loadError,\n    testingStatus,\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  updateDataSource,\n  setIsDefault,\n  dataSourceLoaded,\n  initDataSourceSettings,\n  testDataSource,\n};\n\nexport default hot(module)(\n  connectWithCleanUp(mapStateToProps, mapDispatchToProps, (state) => state.dataSourceSettings)(DataSourceSettingsPage)\n);\n","import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = (props) => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, []);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n"],"sourceRoot":""}