{"version":3,"sources":["webpack:///./public/app/features/alerting/EditNotificationChannelPage.tsx","webpack:///./public/app/core/components/connectWithCleanUp.tsx"],"names":["EditNotificationChannelPage","onSubmit","formData","notificationChannel","props","updateNotificationChannel","transformSubmitData","settings","id","onTestChannel","testNotificationChannel","transformTestData","channelId","this","loadNotificationChannel","navModel","notificationChannelTypes","Contents","className","maxWidth","defaultValues","type","find","n","value","control","errors","getValues","register","watch","selectedChannel","c","selectableChannels","mapChannelsToSelectableValue","imageRendererAvailable","config","rendererAvailable","resetSecureField","secureFields","PureComponent","mapDispatchToProps","connectWithCleanUp","state","getRouteParamsId","location","getNavModel","navIndex","mapStateToProps","stateSelector","Component","ConnectedComponent","connect","ConnectedComponentWithCleanUp","dispatch","useDispatch","useEffect","cleanUpAction","displayName","hoistNonReactStatics"],"mappings":"42DAiCO,IAAMA,EAAb,6KAOEC,SAAW,SAACC,GAAqC,IACvCC,EAAwB,EAAKC,MAA7BD,oBAER,EAAKC,MAAMC,0BAAX,KAMKC,YAAoB,EAAD,GACjBH,EADiB,GAEjBD,EAFiB,CAGpBK,SAAU,EAAF,GAAOJ,EAAoBI,SAA3B,GAAwCL,EAASK,aAT7D,CAWEC,GAAIL,EAAoBK,OArB9B,EAyBEC,cAAgB,SAACP,GAAqC,IAC5CC,EAAwB,EAAKC,MAA7BD,oBAIR,EAAKC,MAAMM,wBACTC,YAAkB,EAAD,GACZR,EADY,GAEZD,EAFY,CAGfK,SAAU,EAAF,GAAOJ,EAAoBI,SAA3B,GAAwCL,EAASK,eAlCjE,E,UAAA,O,kOAAA,M,EAAA,G,EAAA,2CACsB,IACVK,EAAcC,KAAKT,MAAnBQ,UAERC,KAAKT,MAAMU,wBAAwBF,KAJvC,+BAuCW,aAC6DC,KAAKT,MAAjEW,EADD,EACCA,SAAUZ,EADX,EACWA,oBAAqBa,EADhC,EACgCA,yBAEvC,OACE,kBAAC,IAAD,CAAMD,SAAUA,GACd,kBAAC,IAAKE,SAAN,KACE,wBAAIC,UAAU,oBAAd,6BACCf,GAAuBA,EAAoBK,GAAK,EAC/C,kBAAC,OAAD,CACEW,SAAU,IACVlB,SAAUY,KAAKZ,SACfmB,cAAa,KACRjB,EADQ,CAEXkB,KAAML,EAAyBM,MAAK,SAACC,GAAD,OAAOA,EAAEC,QAAUrB,EAAoBkB,YAG5E,YAAqD,IAAlDI,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAClCC,EAAkBd,EAAyBM,MAAK,SAACS,GAAD,OAAOA,EAAEP,QAAUG,IAAYN,KAAKG,SAE1F,OACE,kBAAC,IAAD,CACEQ,mBAAoBC,YAA6BjB,GAA0B,GAC3Ec,gBAAiBA,EACjBI,uBAAwBC,SAAOC,kBAC/B3B,cAAe,EAAKA,cACpBmB,SAAUA,EACVC,MAAOA,EACPH,OAAQA,EACRC,UAAWA,EACXF,QAASA,EACTY,iBAAkB,EAAKjC,MAAMiC,iBAC7BC,aAAcnC,EAAoBmC,kBAM1C,4DAEE,kBAAC,UAAD,c,2BA9Ed,GAAiDC,iBAiG3CC,EAAkE,CACtE1B,4BACAJ,4BACAL,8BACAgC,sBAGaI,uBAjBgE,SAACC,GAC9E,IAAM9B,EAAY+B,YAAiBD,EAAME,UACzC,MAAO,CACL7B,SAAU8B,YAAYH,EAAMI,SAAU,YACtClC,YACAT,oBAAqBuC,EAAMvC,oBAAoBA,oBAC/Ca,yBAA0B0B,EAAMvC,oBAAoBa,4BAatDwB,GACA,SAACE,GAAD,OAAWA,EAAMvC,sBAHJsC,CAIbzC,I,kCC7IF,wGAKayC,EAAqB,SAQhCM,EACAP,EACAQ,GAVgC,OAW7B,SAACC,GACJ,IAAMC,EAAqBC,kBACzBJ,EACAP,EAFyBW,CAIzBF,GAEIG,EAAmD,SAAChD,GACxD,IAAMiD,EAAWC,wBAOjB,OANAC,qBAAU,WACR,OAAO,WACLF,EAASG,YAAc,CAAER,sBAE1B,IAEI,kBAACE,EAAuB9C,IAOjC,OAJAgD,EAA8BK,YAA9B,6BAAkEP,EAAmBO,YAArF,KACAC,IAAqBN,EAA+BH,GAG7CG","file":"EditNotificationChannel.63a9c1d648180e457252.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Form, Spinner } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\nimport { NotificationChannelForm } from './components/NotificationChannelForm';\nimport { loadNotificationChannel, testNotificationChannel, updateNotificationChannel } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId } from 'app/core/selectors/location';\nimport { mapChannelsToSelectableValue, transformSubmitData, transformTestData } from './utils/notificationChannels';\nimport { NotificationChannelType, NotificationChannelDTO, StoreState } from 'app/types';\nimport { resetSecureField } from './state/reducers';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n  channelId: number;\n  notificationChannel: any;\n  notificationChannelTypes: NotificationChannelType[];\n}\n\ninterface DispatchProps {\n  loadNotificationChannel: typeof loadNotificationChannel;\n  testNotificationChannel: typeof testNotificationChannel;\n  updateNotificationChannel: typeof updateNotificationChannel;\n  resetSecureField: typeof resetSecureField;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport class EditNotificationChannelPage extends PureComponent<Props> {\n  componentDidMount() {\n    const { channelId } = this.props;\n\n    this.props.loadNotificationChannel(channelId);\n  }\n\n  onSubmit = (formData: NotificationChannelDTO) => {\n    const { notificationChannel } = this.props;\n\n    this.props.updateNotificationChannel({\n      /*\n       Some settings which lives in a collapsed section will not be registered since\n       the section will not be rendered if a user doesn't expand it. Therefore we need to\n       merge the initialData with any changes from the form.\n      */\n      ...transformSubmitData({\n        ...notificationChannel,\n        ...formData,\n        settings: { ...notificationChannel.settings, ...formData.settings },\n      }),\n      id: notificationChannel.id,\n    });\n  };\n\n  onTestChannel = (formData: NotificationChannelDTO) => {\n    const { notificationChannel } = this.props;\n    /*\n      Same as submit\n     */\n    this.props.testNotificationChannel(\n      transformTestData({\n        ...notificationChannel,\n        ...formData,\n        settings: { ...notificationChannel.settings, ...formData.settings },\n      })\n    );\n  };\n\n  render() {\n    const { navModel, notificationChannel, notificationChannelTypes } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <h2 className=\"page-sub-heading\">Edit notification channel</h2>\n          {notificationChannel && notificationChannel.id > 0 ? (\n            <Form\n              maxWidth={600}\n              onSubmit={this.onSubmit}\n              defaultValues={{\n                ...notificationChannel,\n                type: notificationChannelTypes.find((n) => n.value === notificationChannel.type),\n              }}\n            >\n              {({ control, errors, getValues, register, watch }) => {\n                const selectedChannel = notificationChannelTypes.find((c) => c.value === getValues().type.value);\n\n                return (\n                  <NotificationChannelForm\n                    selectableChannels={mapChannelsToSelectableValue(notificationChannelTypes, true)}\n                    selectedChannel={selectedChannel}\n                    imageRendererAvailable={config.rendererAvailable}\n                    onTestChannel={this.onTestChannel}\n                    register={register}\n                    watch={watch}\n                    errors={errors}\n                    getValues={getValues}\n                    control={control}\n                    resetSecureField={this.props.resetSecureField}\n                    secureFields={notificationChannel.secureFields}\n                  />\n                );\n              }}\n            </Form>\n          ) : (\n            <div>\n              Loading notification channel\n              <Spinner />\n            </div>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state) => {\n  const channelId = getRouteParamsId(state.location) as number;\n  return {\n    navModel: getNavModel(state.navIndex, 'channels'),\n    channelId,\n    notificationChannel: state.notificationChannel.notificationChannel,\n    notificationChannelTypes: state.notificationChannel.notificationChannelTypes,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  loadNotificationChannel,\n  testNotificationChannel,\n  updateNotificationChannel,\n  resetSecureField,\n};\n\nexport default connectWithCleanUp(\n  mapStateToProps,\n  mapDispatchToProps,\n  (state) => state.notificationChannel\n)(EditNotificationChannelPage);\n","import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = (props) => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, []);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n"],"sourceRoot":""}