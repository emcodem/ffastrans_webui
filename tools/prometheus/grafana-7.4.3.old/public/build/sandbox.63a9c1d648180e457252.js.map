{"version":3,"sources":["webpack:///./public/app/features/sandbox/TestStuffPage.tsx","webpack:///./node_modules/react-use/esm/useIsomorphicLayoutEffect.js","webpack:///./node_modules/react-use/esm/useObservable.js"],"names":["TestStuffPage","useState","getDefaultState","state","setState","queryOptions","queryRunner","observable","useMemo","getData","withFieldConfig","withTransforms","data","useObservable","style","padding","className","options","onRunQueries","timeRange","from","to","run","queries","datasource","dataSource","name","timezone","dateMath","parse","raw","maxDataPoints","minInterval","onOptionsChange","width","height","series","legend","displayMode","LegendDisplayMode","List","placement","calcs","timeZone","fieldConfig","defaults","color","mode","FieldColorModeId","PaletteClassic","overrides","replaceVariables","v","theme","config","dataConfig","getTransformations","getFieldOverrideOptions","PanelQueryRunner","window","observable$","initialValue","_a","value","update","s","subscribe","unsubscribe"],"mappings":"gnCAeO,IAAMA,EAAoB,WAAM,QACXC,mBAAgBC,KADL,GAC9BC,EAD8B,KACvBC,EADuB,KAE7BC,EAA8BF,EAA9BE,aAAcC,EAAgBH,EAAhBG,YAsBhBC,EAAaC,mBAAQ,kBAAMF,EAAYG,QAAQ,CAAEC,iBAAiB,EAAMC,gBAAgB,MAAS,IACjGC,EAAOC,YAAcN,GAE3B,OACE,yBAAKO,MAAO,CAAEC,QAAS,aAAeC,UAAU,0BAC9C,wCACA,6BACE,kBAAC,IAAD,CACEC,QAASZ,EACTC,YAAaA,EACbY,aA9Ba,WAAM,MACnBC,EAAY,CAAEC,KAAM,SAAUC,GAAI,OAExCf,EAAYgB,IAAI,CACdC,QAASlB,EAAakB,QACtBC,WAAYnB,EAAaoB,WAAWC,KACpCC,SAAU,UACVR,UAAW,CAAEC,KAAMQ,WAASC,MAAMV,EAAUC,MAAQC,GAAIO,WAASC,MAAMV,EAAUE,IAAMS,IAAKX,GAC5FY,cAAa,UAAE1B,EAAa0B,qBAAf,QAAgC,IAC7CC,YAAa3B,EAAa2B,eAsBtBC,gBAlBgB,SAAC5B,GACvBD,E,+VAAS,CAAD,GAAMD,EAAN,CAAaE,sBAqBlBO,GACC,yBAAKE,MAAO,CAAEC,QAAS,SACrB,kBAAC,UAAD,CACEmB,MAAO,KACPC,OAAQ,IACRvB,KAAMA,EAAKwB,OACXC,OAAQ,CAAEC,YAAaC,oBAAkBC,KAAMC,UAAW,SAAUC,MAAO,IAC3EvB,UAAWP,EAAKO,UAChBwB,SAAS,YAEX,6BACA,kBAAC,QAAD,CAAO/B,KAAMA,EAAKwB,OAAO,GAAIF,MAAO,KAAMC,OAAQ,SAOrD,SAASjC,IACd,IAAMe,EAAqC,CACzC2B,YAAa,CACXC,SAAU,CACRC,MAAO,CACLC,KAAMC,mBAAiBC,iBAG3BC,UAAW,IAEbC,iBAAkB,SAACC,GAAD,OAAeA,GACjCC,MAAOC,IAAOD,OAGVE,EAAa,CACjBC,mBAAoB,iBAAM,IAC1BC,wBAAyB,kBAAMxC,IAGjC,MAAO,CACLX,YAAa,IAAIoD,IAAiBH,GAClClD,aAAc,CACZkB,QAAS,GACTE,WAAY,CACVC,KAAM,iBAERK,cAAe,MAKN/B,a,kDCrGA,EADmC,oBAAX2D,OAAyB,kBAAkB,YCSnE,IARf,SAAuBC,EAAaC,GAChC,IAAIC,EAAK,mBAASD,GAAeE,EAAQD,EAAG,GAAIE,EAASF,EAAG,GAK5D,OAJA,GAA0B,WACtB,IAAIG,EAAIL,EAAYM,UAAUF,GAC9B,OAAO,WAAc,OAAOC,EAAEE,iBAC/B,CAACP,IACGG","file":"sandbox.63a9c1d648180e457252.js","sourcesContent":["import { ApplyFieldOverrideOptions, DataTransformerConfig, dateMath, FieldColorModeId, PanelData } from '@grafana/data';\nimport { GraphNG, LegendDisplayMode, Table } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useObservable } from 'react-use';\nimport { QueryGroup } from '../query/components/QueryGroup';\nimport { PanelQueryRunner } from '../query/state/PanelQueryRunner';\nimport { QueryGroupOptions } from 'app/types';\n\ninterface State {\n  queryRunner: PanelQueryRunner;\n  queryOptions: QueryGroupOptions;\n  data?: PanelData;\n}\n\nexport const TestStuffPage: FC = () => {\n  const [state, setState] = useState<State>(getDefaultState());\n  const { queryOptions, queryRunner } = state;\n\n  const onRunQueries = () => {\n    const timeRange = { from: 'now-1h', to: 'now' };\n\n    queryRunner.run({\n      queries: queryOptions.queries,\n      datasource: queryOptions.dataSource.name!,\n      timezone: 'browser',\n      timeRange: { from: dateMath.parse(timeRange.from)!, to: dateMath.parse(timeRange.to)!, raw: timeRange },\n      maxDataPoints: queryOptions.maxDataPoints ?? 100,\n      minInterval: queryOptions.minInterval,\n    });\n  };\n\n  const onOptionsChange = (queryOptions: QueryGroupOptions) => {\n    setState({ ...state, queryOptions });\n  };\n\n  /**\n   * Subscribe to data\n   */\n  const observable = useMemo(() => queryRunner.getData({ withFieldConfig: true, withTransforms: true }), []);\n  const data = useObservable(observable);\n\n  return (\n    <div style={{ padding: '30px 50px' }} className=\"page-scrollbar-wrapper\">\n      <h3>New page</h3>\n      <div>\n        <QueryGroup\n          options={queryOptions}\n          queryRunner={queryRunner}\n          onRunQueries={onRunQueries}\n          onOptionsChange={onOptionsChange}\n        />\n      </div>\n\n      {data && (\n        <div style={{ padding: '16px' }}>\n          <GraphNG\n            width={1200}\n            height={300}\n            data={data.series}\n            legend={{ displayMode: LegendDisplayMode.List, placement: 'bottom', calcs: [] }}\n            timeRange={data.timeRange}\n            timeZone=\"browser\"\n          />\n          <hr></hr>\n          <Table data={data.series[0]} width={1200} height={300} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDefaultState(): State {\n  const options: ApplyFieldOverrideOptions = {\n    fieldConfig: {\n      defaults: {\n        color: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n      overrides: [],\n    },\n    replaceVariables: (v: string) => v,\n    theme: config.theme,\n  };\n\n  const dataConfig = {\n    getTransformations: () => [] as DataTransformerConfig[],\n    getFieldOverrideOptions: () => options,\n  };\n\n  return {\n    queryRunner: new PanelQueryRunner(dataConfig),\n    queryOptions: {\n      queries: [],\n      dataSource: {\n        name: 'gdev-testdata',\n      },\n      maxDataPoints: 100,\n    },\n  };\n}\n\nexport default TestStuffPage;\n","import { useEffect, useLayoutEffect } from 'react';\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n","import { useState } from 'react';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nfunction useObservable(observable$, initialValue) {\n    var _a = useState(initialValue), value = _a[0], update = _a[1];\n    useIsomorphicLayoutEffect(function () {\n        var s = observable$.subscribe(update);\n        return function () { return s.unsubscribe(); };\n    }, [observable$]);\n    return value;\n}\nexport default useObservable;\n"],"sourceRoot":""}