{"version":3,"sources":["webpack:///./public/app/features/alerting/state/actions.ts","webpack:///./node_modules/react-use/esm/useIsomorphicLayoutEffect.js","webpack:///./node_modules/react-use/esm/useObservable.js","webpack:///./public/app/features/alerting/components/AlertingQueryEditor.tsx","webpack:///./public/app/features/alerting/components/AlertDefinitionOptions.tsx","webpack:///./public/app/features/alerting/components/PreviewQueryTab.tsx","webpack:///./public/app/features/alerting/components/AlertingQueryPreview.tsx","webpack:///./public/app/features/alerting/components/PreviewInstancesTab.tsx","webpack:///./public/app/core/components/connectWithCleanUp.tsx","webpack:///./public/app/features/alerting/NextGenAlertingPage.tsx"],"names":["getAlertRulesAsync","options","dispatch","loadAlertRules","getBackendSrv","get","rules","config","featureToggles","ngalert","ngAlertDefinitions","setAlertDefinitions","results","loadedAlertRules","togglePauseAlertRule","id","getState","post","stateFilter","location","query","state","toString","createNotificationChannel","data","appEvents","emit","AppEvents","alertSuccess","updateLocation","path","alertError","error","updateNotificationChannel","put","testNotificationChannel","channel","notificationChannel","loadNotificationTypes","alertNotifiers","notificationTypes","sort","o1","o2","name","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","createAlertDefinition","getStore","queryOptions","alertDefinition","currentAlertDefinition","getDataSourceSrv","defaultDataSource","condition","refId","queriesAndExpressions","queries","map","dataSource","isExpression","datasource","ExpressionDatasourceID","uid","dataSourceSetting","getInstanceSettings","model","type","queryType","datasourceUid","relativeTimeRange","From","To","updateAlertDefinitionUiState","uiState","nextState","setUiState","store","setObject","ALERT_DEFINITION_UI_STATE_STORAGE_KEY","console","updateAlertDefinitionOption","updateAlertDefinition","queryOptionsChange","setQueryOptions","onRunQueries","queryRunner","timeRange","from","to","run","timezone","dateMath","parse","raw","maxDataPoints","minInterval","window","observable$","initialValue","_a","value","update","s","subscribe","unsubscribe","AlertingQueryEditor","onQueryOptionsChange","props","onIntervalChanged","interval","this","styles","getStyles","theme","className","wrapper","container","refreshWrapper","onRefresh","intervals","onOptionsChange","PureComponent","mapDispatchToProps","connect","stylesFactory","css","spacing","md","colors","panelBg","editorWrapper","panelBorder","border","radius","AlertDefinitionOptions","onChange","onIntervalChange","onConditionChange","useStyles","refIds","useMemo","q","label","style","paddingTop","width","title","description","rows","readOnly","optionRow","optionName","noOptionsMessage","typography","size","formInputText","sm","Tabs","PreviewQueryTab","height","useState","currentSeries","setSeries","useTheme","series","frame","index","getFrameDisplayName","length","formInputHeight","selectWrapper","selectedValue","PreviewInstancesTab","isTested","noQueries","noQueriesHeader","tabs","Query","text","Instances","AlertingQueryPreview","activeTab","setActiveTab","observable","getData","withFieldConfig","withTransforms","useObservable","tab","key","onChangeTab","active","tabContent","textSemiWeak","connectWithCleanUp","mapStateToProps","stateSelector","Component","ConnectedComponent","ConnectedComponentWithCleanUp","useDispatch","useEffect","cleanUpAction","displayName","hoistNonReactStatics","NextGenAlertingPage","dataSources","onChangeAlertOption","event","currentTarget","onChangeInterval","onSaveAlert","onDiscard","onTest","variant","onClick","notificationChannelTypes","titlePrefix","actions","renderToolbarActions","titlePadding","splitPanesWrapper","leftPaneComponents","updateUiState","rightPaneComponents","hot","module","dashboardBg"],"mappings":"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","file":"NgAlertingPage.63a9c1d648180e457252.js","sourcesContent":["import { AppEvents, dateMath } from '@grafana/data';\nimport { config, getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport { updateLocation } from 'app/core/actions';\nimport store from 'app/core/store';\nimport {\n  notificationChannelLoaded,\n  loadAlertRules,\n  loadedAlertRules,\n  setNotificationChannels,\n  setUiState,\n  ALERT_DEFINITION_UI_STATE_STORAGE_KEY,\n  updateAlertDefinition,\n  setQueryOptions,\n  setAlertDefinitions,\n} from './reducers';\nimport {\n  AlertDefinition,\n  AlertDefinitionUiState,\n  AlertRuleDTO,\n  NotifierDTO,\n  ThunkResult,\n  QueryGroupOptions,\n  QueryGroupDataSource,\n} from 'app/types';\nimport { ExpressionDatasourceID } from '../../expressions/ExpressionDatasource';\nimport { ExpressionQuery } from '../../expressions/types';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n\n    if (config.featureToggles.ngalert) {\n      const ngAlertDefinitions = await getBackendSrv().get('/api/alert-definitions');\n      dispatch(setAlertDefinitions(ngAlertDefinitions.results));\n    }\n\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = getState().location.query.state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification created']);\n      dispatch(updateLocation({ path: 'alerting/notifications' }));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification updated']);\n      dispatch(updateLocation({ path: 'alerting/notifications' }));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n\nexport function createAlertDefinition(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const queryOptions = getStore().alertDefinition.queryOptions;\n    const currentAlertDefinition = getStore().alertDefinition.alertDefinition;\n    const defaultDataSource = await getDataSourceSrv().get(null);\n\n    const alertDefinition: AlertDefinition = {\n      ...currentAlertDefinition,\n      condition: {\n        refId: currentAlertDefinition.condition.refId,\n        queriesAndExpressions: queryOptions.queries.map((query) => {\n          let dataSource: QueryGroupDataSource;\n          const isExpression = query.datasource === ExpressionDatasourceID;\n\n          if (isExpression) {\n            dataSource = { name: ExpressionDatasourceID, uid: ExpressionDatasourceID };\n          } else {\n            const dataSourceSetting = getDataSourceSrv().getInstanceSettings(query.datasource);\n\n            dataSource = {\n              name: dataSourceSetting?.name ?? defaultDataSource.name,\n              uid: dataSourceSetting?.uid ?? defaultDataSource.uid,\n            };\n          }\n\n          return {\n            model: {\n              ...query,\n              type: isExpression ? (query as ExpressionQuery).type : query.queryType,\n              datasource: dataSource.name,\n              datasourceUid: dataSource.uid,\n            },\n            refId: query.refId,\n            relativeTimeRange: {\n              From: 500,\n              To: 0,\n            },\n          };\n        }),\n      },\n    };\n\n    await getBackendSrv().post(`/api/alert-definitions`, alertDefinition);\n    appEvents.emit(AppEvents.alertSuccess, ['Alert definition created']);\n    dispatch(updateLocation({ path: 'alerting/list' }));\n  };\n}\n\nexport function updateAlertDefinitionUiState(uiState: Partial<AlertDefinitionUiState>): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const nextState = { ...getStore().alertDefinition.uiState, ...uiState };\n    dispatch(setUiState(nextState));\n\n    try {\n      store.setObject(ALERT_DEFINITION_UI_STATE_STORAGE_KEY, nextState);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\nexport function updateAlertDefinitionOption(alertDefinition: Partial<AlertDefinition>): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(updateAlertDefinition(alertDefinition));\n  };\n}\n\nexport function queryOptionsChange(queryOptions: QueryGroupOptions): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(setQueryOptions(queryOptions));\n  };\n}\n\nexport function onRunQueries(): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const { queryRunner, queryOptions } = getStore().alertDefinition;\n    const timeRange = { from: 'now-1h', to: 'now' };\n\n    queryRunner.run({\n      timezone: 'browser',\n      timeRange: { from: dateMath.parse(timeRange.from)!, to: dateMath.parse(timeRange.to)!, raw: timeRange },\n      maxDataPoints: queryOptions.maxDataPoints ?? 100,\n      minInterval: queryOptions.minInterval,\n      queries: queryOptions.queries,\n      datasource: queryOptions.dataSource.name!,\n    });\n  };\n}\n","import { useEffect, useLayoutEffect } from 'react';\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n","import { useState } from 'react';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nfunction useObservable(observable$, initialValue) {\n    var _a = useState(initialValue), value = _a[0], update = _a[1];\n    useIsomorphicLayoutEffect(function () {\n        var s = observable$.subscribe(update);\n        return function () { return s.unsubscribe(); };\n    }, [observable$]);\n    return value;\n}\nexport default useObservable;\n","import React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { css } from 'emotion';\nimport { GrafanaTheme } from '@grafana/data';\nimport { RefreshPicker, stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { QueryGroup } from '../../query/components/QueryGroup';\nimport { PanelQueryRunner } from '../../query/state/PanelQueryRunner';\nimport { onRunQueries, queryOptionsChange } from '../state/actions';\nimport { QueryGroupOptions, StoreState } from 'app/types';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  queryOptions: QueryGroupOptions;\n  queryRunner: PanelQueryRunner;\n}\ninterface DispatchProps {\n  queryOptionsChange: typeof queryOptionsChange;\n  onRunQueries: typeof onRunQueries;\n}\n\ntype Props = ConnectedProps & DispatchProps & OwnProps;\n\nexport class AlertingQueryEditor extends PureComponent<Props> {\n  onQueryOptionsChange = (queryOptions: QueryGroupOptions) => {\n    this.props.queryOptionsChange(queryOptions);\n  };\n\n  onRunQueries = () => {\n    this.props.onRunQueries();\n  };\n\n  onIntervalChanged = (interval: string) => {\n    this.props.queryOptionsChange({ ...this.props.queryOptions, minInterval: interval });\n  };\n\n  render() {\n    const { queryOptions, queryRunner } = this.props;\n    const styles = getStyles(config.theme);\n\n    return (\n      <div className={styles.wrapper}>\n        <div className={styles.container}>\n          <h4>Queries</h4>\n          <div className={styles.refreshWrapper}>\n            <RefreshPicker\n              onIntervalChanged={this.onIntervalChanged}\n              onRefresh={this.onRunQueries}\n              intervals={['15s', '30s']}\n            />\n          </div>\n          <QueryGroup\n            queryRunner={queryRunner}\n            options={queryOptions}\n            onRunQueries={this.onRunQueries}\n            onOptionsChange={this.onQueryOptionsChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state) => {\n  return {\n    queryOptions: state.alertDefinition.queryOptions,\n    queryRunner: state.alertDefinition.queryRunner,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  queryOptionsChange,\n  onRunQueries,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AlertingQueryEditor);\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      padding-left: ${theme.spacing.md};\n      height: 100%;\n    `,\n    container: css`\n      padding: ${theme.spacing.md};\n      background-color: ${theme.colors.panelBg};\n      height: 100%;\n    `,\n    refreshWrapper: css`\n      display: flex;\n      justify-content: flex-end;\n    `,\n    editorWrapper: css`\n      border: 1px solid ${theme.colors.panelBorder};\n      border-radius: ${theme.border.radius.md};\n    `,\n  };\n});\n","import React, { FC, FormEvent, useMemo } from 'react';\nimport { css } from 'emotion';\nimport { GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { Field, Input, Select, TextArea, useStyles } from '@grafana/ui';\nimport { AlertDefinition, NotificationChannelType, QueryGroupOptions } from 'app/types';\n\ninterface Props {\n  alertDefinition: AlertDefinition;\n  notificationChannelTypes: NotificationChannelType[];\n  onChange: (event: FormEvent) => void;\n  onIntervalChange: (interval: SelectableValue<number>) => void;\n  onConditionChange: (refId: SelectableValue<string>) => void;\n  queryOptions: QueryGroupOptions;\n}\n\nexport const AlertDefinitionOptions: FC<Props> = ({\n  alertDefinition,\n  onChange,\n  onIntervalChange,\n  onConditionChange,\n  queryOptions,\n}) => {\n  const styles = useStyles(getStyles);\n  const refIds = useMemo(() => queryOptions.queries.map((q) => ({ value: q.refId, label: q.refId })), [\n    queryOptions.queries,\n  ]);\n\n  return (\n    <div style={{ paddingTop: '16px' }}>\n      <div className={styles.container}>\n        <h4>Alert definition</h4>\n        <Field label=\"Title\">\n          <Input width={25} name=\"title\" value={alertDefinition.title} onChange={onChange} />\n        </Field>\n        <Field label=\"Description\" description=\"What does the alert do and why was it created\">\n          <TextArea\n            rows={5}\n            width={25}\n            name=\"description\"\n            value={alertDefinition.description}\n            onChange={onChange}\n            readOnly={true}\n          />\n        </Field>\n        <Field label=\"Evaluate\">\n          <div className={styles.optionRow}>\n            <span className={styles.optionName}>Every</span>\n            <Select\n              onChange={onIntervalChange}\n              value={alertDefinition.interval}\n              options={[\n                { value: 60, label: '1m' },\n                { value: 300, label: '5m' },\n                { value: 600, label: '10m' },\n              ]}\n              width={10}\n            />\n          </div>\n        </Field>\n        <Field label=\"Conditions\">\n          <div className={styles.optionRow}>\n            <Select\n              onChange={onConditionChange}\n              value={alertDefinition.condition.refId}\n              options={refIds}\n              noOptionsMessage=\"No queries added\"\n            />\n          </div>\n        </Field>\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      padding-top: ${theme.spacing.md};\n    `,\n    container: css`\n      padding: ${theme.spacing.md};\n      background-color: ${theme.colors.panelBg};\n    `,\n    optionRow: css`\n      display: flex;\n      align-items: baseline;\n    `,\n    optionName: css`\n      font-size: ${theme.typography.size.md};\n      color: ${theme.colors.formInputText};\n      margin-right: ${theme.spacing.sm};\n    `,\n  };\n};\n","import React, { FC, useMemo, useState } from 'react';\nimport { getFrameDisplayName, GrafanaTheme, PanelData } from '@grafana/data';\nimport { Select, stylesFactory, Table, useTheme } from '@grafana/ui';\nimport { css } from 'emotion';\n\ninterface Props {\n  data: PanelData;\n  width: number;\n  height: number;\n}\n\nexport const PreviewQueryTab: FC<Props> = ({ data, height, width }) => {\n  const [currentSeries, setSeries] = useState<number>(0);\n  const theme = useTheme();\n  const styles = getStyles(theme, height);\n  const series = useMemo(\n    () => data.series.map((frame, index) => ({ value: index, label: getFrameDisplayName(frame) })),\n    [data.series]\n  );\n\n  // Select padding\n  const padding = 16;\n\n  if (data.series.length > 1) {\n    return (\n      <div className={styles.wrapper}>\n        <div style={{ height: height - theme.spacing.formInputHeight - 16 }}>\n          <Table\n            data={data.series[currentSeries]}\n            height={height - theme.spacing.formInputHeight - padding}\n            width={width}\n          />\n        </div>\n        <div className={styles.selectWrapper}>\n          <Select\n            onChange={(selectedValue) => setSeries(selectedValue.value!)}\n            options={series}\n            value={currentSeries}\n          />\n        </div>\n      </div>\n    );\n  }\n  return <Table data={data.series[0]} height={height} width={width} />;\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme, height: number) => {\n  return {\n    wrapper: css`\n      height: ${height}px;\n    `,\n    selectWrapper: css`\n      padding: ${theme.spacing.md};\n    `,\n  };\n});\n","import React, { FC, useMemo, useState } from 'react';\nimport { useObservable } from 'react-use';\nimport { css } from 'emotion';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { GrafanaTheme } from '@grafana/data';\nimport { TabsBar, TabContent, Tab, useStyles, Icon } from '@grafana/ui';\nimport { PanelQueryRunner } from '../../query/state/PanelQueryRunner';\nimport { PreviewQueryTab } from './PreviewQueryTab';\nimport { PreviewInstancesTab } from './PreviewInstancesTab';\n\nenum Tabs {\n  Query = 'query',\n  Instances = 'instances',\n}\n\nconst tabs = [\n  { id: Tabs.Query, text: 'Query result' },\n  { id: Tabs.Instances, text: 'Alerting instances' },\n];\n\ninterface Props {\n  queryRunner: PanelQueryRunner;\n}\n\nexport const AlertingQueryPreview: FC<Props> = ({ queryRunner }) => {\n  const [activeTab, setActiveTab] = useState<string>(Tabs.Query);\n  const styles = useStyles(getStyles);\n\n  const observable = useMemo(() => queryRunner.getData({ withFieldConfig: true, withTransforms: true }), []);\n  const data = useObservable(observable);\n\n  return (\n    <div className={styles.wrapper}>\n      <TabsBar>\n        {tabs.map((tab, index) => {\n          return (\n            <Tab\n              key={`${tab.id}-${index}`}\n              label={tab.text}\n              onChangeTab={() => setActiveTab(tab.id)}\n              active={activeTab === tab.id}\n            />\n          );\n        })}\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {data && data.state === 'Error' ? (\n          <div className={styles.noQueries}>\n            <h4 className={styles.noQueriesHeader}>There was an error :(</h4>\n            <div>{data.error?.data?.error}</div>\n          </div>\n        ) : data && data.series.length > 0 ? (\n          <AutoSizer style={{ width: '100%', height: '100%' }}>\n            {({ width, height }) => {\n              switch (activeTab) {\n                case Tabs.Instances:\n                  return <PreviewInstancesTab isTested={false} data={data} styles={styles} />;\n\n                case Tabs.Query:\n                default:\n                  return <PreviewQueryTab data={data} width={width} height={height} />;\n              }\n            }}\n          </AutoSizer>\n        ) : (\n          <div className={styles.noQueries}>\n            <h4 className={styles.noQueriesHeader}>No queries added.</h4>\n            <div>Start adding queries to this alert and a visualisation for your queries will appear here.</div>\n            <div>\n              Learn more about how to create alert definitions <Icon name=\"external-link-alt\" />\n            </div>\n          </div>\n        )}\n      </TabContent>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      label: alertDefinitionPreviewTabs;\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      height: 100%;\n      padding: ${theme.spacing.md} 0 0 ${theme.spacing.md};\n    `,\n    tabContent: css`\n      background: ${theme.colors.panelBg};\n      height: 100%;\n    `,\n    noQueries: css`\n      color: ${theme.colors.textSemiWeak};\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      height: 100%;\n      width: 100%;\n    `,\n    noQueriesHeader: css`\n      color: ${theme.colors.textSemiWeak};\n    `,\n  };\n};\n\nexport type PreviewStyles = ReturnType<typeof getStyles>;\n","import React, { FC } from 'react';\nimport { PanelData } from '@grafana/data';\nimport { Button } from '@grafana/ui';\nimport { PreviewStyles } from './AlertingQueryPreview';\n\ninterface Props {\n  data: PanelData;\n  isTested: boolean;\n  styles: PreviewStyles;\n}\n\nexport const PreviewInstancesTab: FC<Props> = ({ data, isTested, styles }) => {\n  if (!isTested) {\n    return (\n      <div className={styles.noQueries}>\n        <h4 className={styles.noQueriesHeader}>You haven’t tested your alert yet.</h4>\n        <div>In order to see your instances, you need to test your alert first.</div>\n        <Button>Test alert now</Button>\n      </div>\n    );\n  }\n  return <div>Instances</div>;\n};\n","import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = (props) => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, []);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n","import React, { FormEvent, PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { css } from 'emotion';\nimport { GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { Button, Icon, stylesFactory } from '@grafana/ui';\nimport { PageToolbar } from 'app/core/components/PageToolbar/PageToolbar';\nimport { SplitPaneWrapper } from 'app/core/components/SplitPaneWrapper/SplitPaneWrapper';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\nimport AlertingQueryEditor from './components/AlertingQueryEditor';\nimport { AlertDefinitionOptions } from './components/AlertDefinitionOptions';\nimport { AlertingQueryPreview } from './components/AlertingQueryPreview';\nimport {\n  updateAlertDefinitionOption,\n  createAlertDefinition,\n  updateAlertDefinitionUiState,\n  loadNotificationTypes,\n} from './state/actions';\nimport {\n  AlertDefinition,\n  AlertDefinitionUiState,\n  NotificationChannelType,\n  QueryGroupOptions,\n  StoreState,\n} from '../../types';\n\nimport { config } from 'app/core/config';\nimport { PanelQueryRunner } from '../query/state/PanelQueryRunner';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  alertDefinition: AlertDefinition;\n  uiState: AlertDefinitionUiState;\n  notificationChannelTypes: NotificationChannelType[];\n  queryRunner: PanelQueryRunner;\n  queryOptions: QueryGroupOptions;\n}\n\ninterface DispatchProps {\n  createAlertDefinition: typeof createAlertDefinition;\n  updateAlertDefinitionUiState: typeof updateAlertDefinitionUiState;\n  updateAlertDefinitionOption: typeof updateAlertDefinitionOption;\n  loadNotificationTypes: typeof loadNotificationTypes;\n}\n\ninterface State {}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass NextGenAlertingPage extends PureComponent<Props, State> {\n  state = { dataSources: [] };\n\n  componentDidMount() {\n    this.props.loadNotificationTypes();\n  }\n\n  onChangeAlertOption = (event: FormEvent<HTMLFormElement>) => {\n    this.props.updateAlertDefinitionOption({ [event.currentTarget.name]: event.currentTarget.value });\n  };\n\n  onChangeInterval = (interval: SelectableValue<number>) => {\n    this.props.updateAlertDefinitionOption({\n      interval: interval.value,\n    });\n  };\n\n  onConditionChange = (condition: SelectableValue<string>) => {\n    this.props.updateAlertDefinitionOption({\n      condition: { ...this.props.alertDefinition.condition, refId: condition.value! },\n    });\n  };\n\n  onSaveAlert = () => {\n    const { createAlertDefinition } = this.props;\n\n    createAlertDefinition();\n  };\n\n  onDiscard = () => {};\n\n  onTest = () => {};\n\n  renderToolbarActions() {\n    return [\n      <Button variant=\"destructive\" key=\"discard\" onClick={this.onDiscard}>\n        Discard\n      </Button>,\n      <Button variant=\"secondary\" key=\"test\" onClick={this.onTest}>\n        Test\n      </Button>,\n      <Button variant=\"primary\" key=\"save\" onClick={this.onSaveAlert}>\n        Save\n      </Button>,\n    ];\n  }\n\n  render() {\n    const {\n      alertDefinition,\n      notificationChannelTypes,\n      uiState,\n      updateAlertDefinitionUiState,\n      queryRunner,\n      queryOptions,\n    } = this.props;\n    const styles = getStyles(config.theme);\n\n    return (\n      <div className={styles.wrapper}>\n        <PageToolbar\n          title=\"Alert editor\"\n          titlePrefix={<Icon name=\"bell\" size=\"lg\" />}\n          actions={this.renderToolbarActions()}\n          titlePadding=\"sm\"\n        />\n        <div className={styles.splitPanesWrapper}>\n          <SplitPaneWrapper\n            leftPaneComponents={[\n              <AlertingQueryPreview key=\"queryPreview\" queryRunner={queryRunner} />,\n              <AlertingQueryEditor key=\"queryEditor\" />,\n            ]}\n            uiState={uiState}\n            updateUiState={updateAlertDefinitionUiState}\n            rightPaneComponents={\n              <AlertDefinitionOptions\n                alertDefinition={alertDefinition}\n                onChange={this.onChangeAlertOption}\n                notificationChannelTypes={notificationChannelTypes}\n                onIntervalChange={this.onChangeInterval}\n                onConditionChange={this.onConditionChange}\n                queryOptions={queryOptions}\n              />\n            }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state) => {\n  return {\n    uiState: state.alertDefinition.uiState,\n    alertDefinition: state.alertDefinition.alertDefinition,\n    queryOptions: state.alertDefinition.queryOptions,\n    notificationChannelTypes: state.notificationChannel.notificationChannelTypes,\n    queryRunner: state.alertDefinition.queryRunner,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  createAlertDefinition,\n  updateAlertDefinitionUiState,\n  updateAlertDefinitionOption,\n  loadNotificationTypes,\n};\n\nexport default hot(module)(\n  connectWithCleanUp(mapStateToProps, mapDispatchToProps, (state) => state.alertDefinition)(NextGenAlertingPage)\n);\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  wrapper: css`\n    width: calc(100% - 55px);\n    height: 100%;\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    background: ${theme.colors.dashboardBg};\n    display: flex;\n    flex-direction: column;\n  `,\n  splitPanesWrapper: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    width: 100%;\n    position: relative;\n  `,\n}));\n"],"sourceRoot":""}