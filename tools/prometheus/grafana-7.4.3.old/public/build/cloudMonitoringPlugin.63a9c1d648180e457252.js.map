{"version":3,"sources":["webpack:///./public/app/plugins/datasource/cloud-monitoring/api.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/CloudMonitoringMetricFindQuery.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/components/VariableQueryEditor.tsx","webpack:///./public/app/plugins/datasource/cloud-monitoring/variables.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/datasource.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/config_ctrl.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/module.ts"],"names":["Api","baseUrl","this","cache","defaultOptions","useCache","responseMap","res","path","options","Promise","resolve","getBackendSrv","fetch","url","method","pipe","map","response","responsePropName","match","data","catchError","error","appEvents","emit","CoreEvents","dsRequestError","formatCloudMonitoringError","of","toPromise","projectName","CloudMonitoringMetricFindQuery","datasource","query","getDefaultProject","selectedQueryType","MetricFindQueryTypes","Projects","Services","MetricTypes","LabelKeys","LabelValues","ResourceTypes","Aligners","AlignmentPeriods","Aggregations","SLOServices","SLO","Selectors","handleProjectsQuery","handleServiceQuery","handleMetricTypesQuery","handleLabelKeysQuery","handleLabelValuesQuery","handleResourceTypeQuery","handleAlignersQuery","handleAlignmentPeriodQuery","handleAggregationQuery","handleSLOServicesQuery","handleSLOQuery","handleSelectorQuery","console","getProjects","projects","s","text","label","value","expandable","getMetricTypes","metricDescriptors","services","extractServicesFromMetricDescriptors","serviceShortName","service","selectedService","getMetricTypesByService","templateSrv","replace","displayName","type","selectedMetricType","getLabelKeys","labelKeys","toFindQueryResult","labelKey","getLabels","labels","interpolatedKey","values","hasOwnProperty","descriptor","find","m","getAlignmentOptionsByMetric","valueType","metricKind","getAggregationOptionsByMetric","getSLOServices","selectedSLOService","getServiceLevelObjectives","slos","selectors","alignmentPeriods","x","isString","CloudMonitoringVariableQueryEditor","props","queryTypes","name","defaults","metricTypes","sloServices","loading","onPropsChange","state","queryModel","onChange","refId","Object","assign","some","getTemplateSrv","length","setState","queryType","metricType","prevProps","prevState","selecQueryTypeChanged","selectSLOServiceChanged","result","l","templateVariables","getVariables","v","insertTemplateVariables","onValueChange","e","onProjectChange","target","onServiceChange","onMetricTypeChange","onLabelKeyChange","className","onQueryTypeChange","renderQueryTypeSwitch","PureComponent","CloudMonitoringVariableSupport","editor","metricFindQuery","bind","request","executeObservable","from","execute","targets","ensureGCEDefaultProject","mergeMap","CustomVariableSupport","CloudMonitoringDatasource","instanceSettings","timeSrv","getTimeSrv","authenticationType","jsonData","api","API","variables","t","migrateQuery","intervalMs","annotation","queries","datasourceId","id","view","crossSeriesReducer","perSeriesAligner","scopedVars","title","tags","filters","interpolateFilters","post","range","valueOf","toString","to","results","tables","rows","time","Date","parse","metricQuery","sloQuery","interpolateProps","groupBys","interpolateGroupBys","editorMode","QueryType","METRICS","timeRange","meta","defaultErrorMessage","test","status","message","statusText","_","code","getGCEDefaultProject","defaultProject","err","throwError","gceDefaultProject","get","split","serviceId","p","goal","projectId","hide","key","maxLines","metric","rest","object","entries","reduce","acc","selectorName","sloId","EditorMode","MQL","applyTemplateVariables","completeFilter","chunk","operator","condition","filter","flatten","interpolatedGroupBys","forEach","gb","interpolated","Array","isArray","concat","push","DataSourceWithBackend","CloudMonitoringConfigCtrl","datasourceSrv","validationErrors","defaultAuthenticationType","AuthType","JWT","current","secureJsonData","secureJsonFields","authenticationTypes","authTypes","jwt","privateKey","private_key","tokenUri","token_uri","clientEmail","client_email","project_id","resetValidationMessages","inputDataValid","json","jsonText","validateJwt","save","JSON","originalEvent","clipboardData","getData","templateUrl","CloudMonitoringAnnotationsQueryCtrl","onQueryChange","plugin","DataSourcePlugin","setQueryEditor","QueryEditor","setConfigCtrl","setAnnotationQueryCtrl","setVariableQueryEditor"],"mappings":"gwBAoBqBA,E,WAInB,WAAoBC,I,4FAAiB,cAAjBA,UAClBC,KAAKC,MAAQ,GACbD,KAAKE,eAAiB,CACpBC,UAAU,EACVC,YAAa,SAACC,GAAD,OAAcA,GAC3BN,QAASC,KAAKD,S,mDAIdO,EAAcC,GAAiF,a,+VAAA,IACjDP,KAAKE,eAD4C,GACzBK,GAAhEJ,EADyF,EACzFA,SAAUC,EAD+E,EAC/EA,YAAaL,EADkE,EAClEA,QAE/B,OAAII,GAAYH,KAAKC,MAAMK,GAClBE,QAAQC,QAAQT,KAAKC,MAAMK,IAG7BI,0BACJC,MAA2B,CAC1BC,IAAKb,EAAUO,EACfO,OAAQ,QAETC,KACCC,aAAI,SAACC,GACH,IAAMC,EAAmBX,EAAKY,MAAM,gBAAiB,GACjDb,EAAM,GASV,OARIW,GAAYA,EAASG,MAAQH,EAASG,KAAKF,KAC7CZ,EAAMW,EAASG,KAAKF,GAAkBF,IAAIX,IAGxCD,IACF,EAAKF,MAAMK,GAAQD,GAGdA,KAETe,aAAW,SAACC,GAIV,OAHAC,IAAUC,KAAKC,aAAWC,eAAgB,CACxCJ,MAAO,CAAEF,KAAM,CAAEE,MAAOK,YAA2BL,OAE9CM,YAAG,QAGbC,c,2BAGAT,GACH,OAAOT,0BAAgBC,MAAoB,CACzCC,IAAK,kBACLC,OAAQ,OACRM,W,2BAICU,GACH,OAAOnB,0BACJC,MAAW,CACVC,IAAK,GAAF,OAAKZ,KAAKD,SAAV,OAAoB8B,EAApB,sBACHhB,OAAQ,QAETe,iB,q5BCtEcE,E,WACnB,WAAoBC,I,4FAAuC,cAAvCA,a,+GAENC,G,yFAELA,EAAMH,cACTG,EAAMH,YAAc7B,KAAK+B,WAAWE,qB,KAG9BD,EAAME,kB,cACPC,IAAqBC,S,SAErBD,IAAqBE,S,SAErBF,IAAqBG,Y,SAErBH,IAAqBI,U,SAErBJ,IAAqBK,Y,SAErBL,IAAqBM,c,UAErBN,IAAqBO,S,UAErBP,IAAqBQ,iB,UAErBR,IAAqBS,a,UAErBT,IAAqBU,Y,UAErBV,IAAqBW,I,UAErBX,IAAqBY,U,4CArBjB/C,KAAKgD,uB,gCAELhD,KAAKiD,mBAAmBjB,I,gCAExBhC,KAAKkD,uBAAuBlB,I,gCAE5BhC,KAAKmD,qBAAqBnB,I,gCAE1BhC,KAAKoD,uBAAuBpB,I,iCAE5BhC,KAAKqD,wBAAwBrB,I,iCAE7BhC,KAAKsD,oBAAoBtB,I,iCAEzBhC,KAAKuD,8B,iCAELvD,KAAKwD,uBAAuBxB,I,iCAE5BhC,KAAKyD,uBAAuBzB,I,iCAE5BhC,KAAK0D,eAAe1B,I,iCAEpBhC,KAAK2D,uB,iCAEL,I,iEAGXC,QAAQvC,MAAR,uDAA8DW,GAA9D,M,kBACO,I,0RAKchC,KAAK+B,WAAW8B,c,cAAjCC,E,yBACEA,EAAqC/C,KAAI,SAACgD,GAAD,MAA0C,CACzFC,KAAMD,EAAEE,MACRC,MAAOH,EAAEG,MACTC,YAAY,O,0QAIWtC,E,EAAAA,Y,SACO7B,KAAK+B,WAAWqC,eAAevC,G,cAAzDwC,E,OACAC,EAAkBC,YAAqCF,G,kBACtDC,EAASvD,KAAI,SAACgD,GAAD,MAAQ,CAC1BC,KAAMD,EAAES,iBACRN,MAAOH,EAAEU,QACTN,YAAY,O,2QAIeO,E,EAAAA,gBAAiB7C,E,EAAAA,YACzC6C,E,yCACI,I,uBAEuB1E,KAAK+B,WAAWqC,eAAevC,G,cAAzDwC,E,yBACCM,YAAwBN,EAAmBrE,KAAK+B,WAAW6C,YAAYC,QAAQH,IAAkB3D,KACtG,SAACgD,GAAD,MAAa,CACXC,KAAMD,EAAEe,YACRZ,MAAOH,EAAEgB,KACTZ,YAAY,O,yQAKWa,E,EAAAA,mBAAoBnD,E,EAAAA,YAC1CmD,E,yCACI,I,uBAEeC,YAAajF,KAAK+B,WAAYiD,EAAoBnD,G,cAApEqD,E,yBACCA,EAAUnE,IAAIf,KAAKmF,oB,iRAGGH,E,EAAAA,mBAAoBI,E,EAAAA,SAAUvD,E,EAAAA,YACtDmD,E,yCACI,I,uBAGYhF,KAAK+B,WAAWsD,UAAUL,EADjC,yBAC4DnD,EAAa,CAACuD,I,cAAlFE,E,OACAC,EAAkBvF,KAAK+B,WAAW6C,YAAYC,QAAQO,GACtDI,EAASF,EAAOG,eAAeF,GAAmBD,EAAOC,GAAmB,G,kBAC3EC,EAAOzE,IAAIf,KAAKmF,oB,6QAGOH,E,EAAAA,mBAAoBnD,E,EAAAA,YAC7CmD,E,yCACI,I,uBAGYhF,KAAK+B,WAAWsD,UAAUL,EADjC,mCAC4DnD,G,cAApEyD,E,yBACCA,EAAO,iBAAiBvE,IAAIf,KAAKmF,oB,iRAGdH,E,EAAAA,mBAAoBnD,E,EAAAA,YACzCmD,E,yCACI,I,uBAEuBhF,KAAK+B,WAAWqC,eAAevC,G,UAAzDwC,E,OACAqB,EAAarB,EAAkBsB,MACnC,SAACC,GAAD,OAAYA,EAAEb,OAAS,EAAKhD,WAAW6C,YAAYC,QAAQG,M,yCAIpD,I,gCAGFa,YAA4BH,EAAWI,UAAWJ,EAAWK,YAAYhF,IAAIf,KAAKmF,oB,qRAG5DH,E,EAAAA,mBAAoBnD,E,EAAAA,YAC5CmD,E,yCACI,I,uBAGuBhF,KAAK+B,WAAWqC,eAAevC,G,UAAzDwC,E,OACAqB,EAAarB,EAAkBsB,MACnC,SAACC,GAAD,OAAYA,EAAEb,OAAS,EAAKhD,WAAW6C,YAAYC,QAAQG,M,yCAIpD,I,gCAGFgB,YAA8BN,EAAWI,UAAyBJ,EAAWK,YAA0BhF,IAC5Gf,KAAKmF,oB,8QAIsBtD,E,EAAAA,Y,SACN7B,KAAK+B,WAAWkE,eAAepE,G,cAAhDyC,E,yBACCA,EAASvD,IAAIf,KAAKmF,oB,uQAGJe,E,EAAAA,mBAAoBrE,E,EAAAA,Y,SACtB7B,KAAK+B,WAAWoE,0BAA0BtE,EAAaqE,G,cAApEE,E,yBACCA,EAAKrF,IAAIf,KAAKmF,oB,mRAIdkB,IAAUtF,IAAIf,KAAKmF,oB,gJAI1B,OAAOmB,IAAiBvF,IAAIf,KAAKmF,qB,wCAGjBoB,GAChB,OAAOC,IAASD,GAAK,CAAEvC,KAAMuC,EAAGpC,YAAY,G,+VAArC,IAAmDoC,EAAnD,CAAsDpC,YAAY,S,oiFCrJtE,IAAMsC,EAAb,YAgCE,WAAYC,GAAc,a,4FAAA,UACxB,wBAAMA,KAhCRC,WAAqD,CACnD,CAAEzC,MAAO/B,IAAqBC,SAAUwE,KAAM,YAC9C,CAAE1C,MAAO/B,IAAqBE,SAAUuE,KAAM,YAC9C,CAAE1C,MAAO/B,IAAqBG,YAAasE,KAAM,gBACjD,CAAE1C,MAAO/B,IAAqBI,UAAWqE,KAAM,cAC/C,CAAE1C,MAAO/B,IAAqBK,YAAaoE,KAAM,gBACjD,CAAE1C,MAAO/B,IAAqBM,cAAemE,KAAM,kBACnD,CAAE1C,MAAO/B,IAAqBS,aAAcgE,KAAM,gBAClD,CAAE1C,MAAO/B,IAAqBO,SAAUkE,KAAM,YAC9C,CAAE1C,MAAO/B,IAAqBQ,iBAAkBiE,KAAM,qBACtD,CAAE1C,MAAO/B,IAAqBY,UAAW6D,KAAM,aAC/C,CAAE1C,MAAO/B,IAAqBU,YAAa+D,KAAM,gBACjD,CAAE1C,MAAO/B,IAAqBW,IAAK8D,KAAM,mCAmBjB,EAhB1BC,SAA8B,CAC5B3E,kBAAmB,EAAKyE,WAAW,GAAGzC,MACtCG,kBAAmB,GACnBK,gBAAiB,GACjBM,mBAAoB,GACpBM,OAAQ,GACRF,SAAU,GACV0B,YAAa,GACbxC,SAAU,GACVyC,YAAa,GACbb,mBAAoB,GACpBpC,SAAU,GACVjC,YAAa,GACbmF,SAAS,GAGe,EAiD1BC,cAAgB,WAAM,MACwD,EAAKC,MAApBC,GADzC,EACZ9C,kBADY,EACOiB,OADP,EACewB,YADf,EAC4BxC,SAD5B,8DAEpB,EAAKoC,MAAMU,SAAX,KAAyBD,EAAzB,CAAqCE,MAAO,uDAjD5C,EAAKH,MAAQI,OAAOC,OAClB,EAAKV,SACL,CAAEhF,YAAa,EAAK6E,MAAM3E,WAAWE,qBACrC,EAAKyE,MAAM1E,OALW,E,UAhC5B,mB,kOAAA,M,EAAA,G,EAAA,wMA0C4BhC,KAAK0G,MAAM3E,WAAW8B,cA1ClD,cA0CUC,EA1CV,gBA2CoC9D,KAAK0G,MAAM3E,WAAWqC,eACpDpE,KAAK0G,MAAM1E,MAAMH,aAAe7B,KAAK0G,MAAM3E,WAAWE,qBA5C5D,cA2CUoC,EA3CV,OA8CUC,EAAWC,YAAqCF,GAAmBtD,KAAI,SAAC6E,GAAD,MAAa,CACxF1B,MAAO0B,EAAEnB,QACTmC,KAAMhB,EAAEpB,qBAGNE,EAAkB,GAClBJ,EAASkD,MAAK,SAACzD,GAAD,OAAOA,EAAEG,QAAUuD,2BAAiB5C,QAAQ,EAAKqC,MAAMxC,oBACvEA,EAAkB1E,KAAKkH,MAAMxC,gBACpBJ,GAAYA,EAASoD,OAAS,IACvChD,EAAkBJ,EAAS,GAAGJ,OAvDpC,EA0DgDE,YAC1CC,EACArE,KAAKkH,MAAMlC,mBACXyC,2BAAiB5C,QAAQ7E,KAAKkH,MAAMlC,oBACpCyC,2BAAiB5C,QAAQH,IAJnBoC,EA1DZ,EA0DYA,YAAa9B,EA1DzB,EA0DyBA,mBA1DzB,UAiE8BhF,KAAK0G,MAAM3E,WAAWkE,eAAejG,KAAKkH,MAAMrF,aAjE9E,eAiEUkF,EAjEV,oBAoEMzC,WACAI,kBACAoC,cACA9B,qBACAX,oBACAP,SAAUA,EAAS/C,KAAI,kBAA4B,CAAEmD,MAA9B,EAAGA,MAAkC0C,KAArC,EAAU3C,WAzEvC,UA0EgBjE,KAAKqF,UAAUL,EAAoBhF,KAAKkH,MAAMrF,aA1E9D,0BA2EMkF,YAAaA,EAAYhG,KAAI,kBAA4B,CAAEmD,MAA9B,EAAGA,MAAkC0C,KAArC,EAAU3C,UACvC+C,SAAS,GATLE,GAnEV,wBA8EIlH,KAAK2H,SAAST,GAAO,kBAAM,EAAKD,mBA9EpC,sKAsF0BW,GAtF1B,0GAwFM1F,kBAAmB0F,GAxFzB,SAyFgB5H,KAAKqF,UAAUrF,KAAKkH,MAAMlC,mBAAoBhF,KAAKkH,MAAMrF,YAAa+F,GAzFtF,mBAuFUV,GAvFV,mBA4FIlH,KAAK2H,SAAST,GA5FlB,oKA+FwBrF,GA/FxB,gHAgGoC7B,KAAK0G,MAAM3E,WAAWqC,eAAevC,GAhGzE,cAgGUwC,EAhGV,gBAiGyBrE,KAAKqF,UAAUrF,KAAKkH,MAAMlC,mBAAoBnD,GAjGvE,cAiGUyD,EAjGV,SAkGgDlB,YAC1CC,EACArE,KAAKkH,MAAMlC,mBACXyC,2BAAiB5C,QAAQ7E,KAAKkH,MAAMlC,oBACpCyC,2BAAiB5C,QAAQ7E,KAAKkH,MAAMxC,kBAJ9BoC,EAlGZ,EAkGYA,YAAa9B,EAlGzB,EAkGyBA,mBAlGzB,SAyG8BhF,KAAK0G,MAAM3E,WAAWkE,eAAepE,GAzGnE,OAyGUkF,EAzGV,OA2GI/G,KAAK2H,SAAL,KACKrC,EADL,CAEEwB,cACA9B,qBACAX,oBACAxC,cACAkF,YAAaA,EAAYhG,KAAI,kBAA4B,CAAEmD,MAA9B,EAAGA,MAAkC0C,KAArC,EAAU3C,aAjH7C,qKAqHwBQ,GArHxB,qGAsHgDL,YAC1CpE,KAAKkH,MAAM7C,kBACXrE,KAAKkH,MAAMlC,mBACXyC,2BAAiB5C,QAAQ7E,KAAKkH,MAAMlC,oBACpCyC,2BAAiB5C,QAAQJ,IAJnBqC,EAtHZ,EAsHYA,YAAa9B,EAtHzB,EAsHyBA,mBAtHzB,aA6HMN,gBAAiBD,EACjBqC,cACA9B,sBA/HN,SAgIgBhF,KAAKqF,UAAUL,EAAoBhF,KAAKkH,MAAMrF,aAhI9D,mBA4HUqF,GA5HV,mBAkIIlH,KAAK2H,SAAST,GAlIlB,uKAqI2BW,GArI3B,0GAuIM7C,mBAAoB6C,GAvI1B,SAwIgB7H,KAAKqF,UAAUwC,EAAY7H,KAAKkH,MAAMrF,aAxItD,mBAsIUqF,GAtIV,mBA0IIlH,KAAK2H,SAAST,GA1IlB,qIA6ImB9B,GAAkB,WACjCpF,KAAK2H,SAAS,CAAEvC,aAAY,kBAAM,EAAK6B,qBA9I3C,yCAiJqBa,EAA4BC,GAC7C,IAAMC,EAAwBD,EAAU7F,oBAAsBlC,KAAKkH,MAAMhF,kBACnE+F,EAA0BjI,KAAKkH,MAAMhB,qBAAuB6B,EAAU7B,oBACxE8B,GAAyBC,IAC3BjI,KAAKiH,kBArJX,gEAyJkBjC,EAA4BnD,GAzJ9C,kHAyJmEK,EAzJnE,+BAyJuFlC,KAAKkH,MAAMhF,kBAC1FgG,EAAS,CAAE5C,OAAQtF,KAAKkH,MAAM5B,OAAQF,SAAUpF,KAAKkH,MAAM9B,WAC3DJ,GAAsB9C,IAAsBC,IAAqBK,YA3JzE,gCA4J2ByC,YAAajF,KAAK0G,MAAM3E,WAAYiD,EAAoBnD,GA5JnF,OA4JYyD,EA5JZ,OA6JYF,EAAWE,EAAOkC,MAAK,SAACW,GAAD,OAAOA,IAAMV,2BAAiB5C,QAAQ,EAAKqC,MAAM9B,aAC1EpF,KAAKkH,MAAM9B,SACXE,EAAO,GACX4C,EAAS,CAAE5C,SAAQF,YAhKzB,gCAkKW8C,GAlKX,8IAqK0B3H,GACtB,IAAM6H,EAAoBX,2BACvBY,eACAtH,KAAI,SAACuH,GAAD,MAAa,CAChB1B,KAAM,IAAF,OAAM0B,EAAE1B,MACZ1C,MAAO,IAAF,OAAMoE,EAAE1B,UAEjB,kBAAWwB,GAAX,EAAiC7H,MA5KrC,4CA+KwBqH,GAAmB,WACvC,OAAQA,GACN,KAAKzF,IAAqBG,YACxB,OACE,oCACE,kBAAC,IAAD,CACE4B,MAAOlE,KAAKkH,MAAMrF,YAClBtB,QAASP,KAAKuI,wBAAwBvI,KAAKkH,MAAMpD,UACjD0E,cAAe,SAACC,GAAD,OAAO,EAAKC,gBAAgBD,EAAEE,OAAOzE,QACpDD,MAAM,YAER,kBAAC,IAAD,CACEC,MAAOlE,KAAKkH,MAAMxC,gBAClBnE,QAASP,KAAKuI,wBAAwBvI,KAAKkH,MAAM5C,UACjDkE,cAAe,SAACC,GAAD,OAAO,EAAKG,gBAAgBH,EAAEE,OAAOzE,QACpDD,MAAM,aAId,KAAK9B,IAAqBI,UAC1B,KAAKJ,IAAqBK,YAC1B,KAAKL,IAAqBM,cACxB,OACE,oCACE,kBAAC,IAAD,CACEyB,MAAOlE,KAAKkH,MAAMrF,YAClBtB,QAASP,KAAKuI,wBAAwBvI,KAAKkH,MAAMpD,UACjD0E,cAAe,SAACC,GAAD,OAAO,EAAKC,gBAAgBD,EAAEE,OAAOzE,QACpDD,MAAM,YAER,kBAAC,IAAD,CACEC,MAAOlE,KAAKkH,MAAMxC,gBAClBnE,QAASP,KAAKuI,wBAAwBvI,KAAKkH,MAAM5C,UACjDkE,cAAe,SAACC,GAAD,OAAO,EAAKG,gBAAgBH,EAAEE,OAAOzE,QACpDD,MAAM,YAER,kBAAC,IAAD,CACEC,MAAOlE,KAAKkH,MAAMlC,mBAClBzE,QAASP,KAAKuI,wBAAwBvI,KAAKkH,MAAMJ,aACjD0B,cAAe,SAACC,GAAD,OAAO,EAAKI,mBAAmBJ,EAAEE,OAAOzE,QACvDD,MAAM,gBAEP2D,IAAczF,IAAqBK,aAClC,kBAAC,IAAD,CACE0B,MAAOlE,KAAKkH,MAAM9B,SAClB7E,QAASP,KAAKuI,wBAAwBvI,KAAKkH,MAAM5B,OAAOvE,KAAI,SAACoH,GAAD,MAAQ,CAAEjE,MAAOiE,EAAGvB,KAAMuB,OACtFK,cAAe,SAACC,GAAD,OAAO,EAAKK,iBAAiBL,EAAEE,OAAOzE,QACrDD,MAAM,eAKhB,KAAK9B,IAAqBO,SAC1B,KAAKP,IAAqBS,aACxB,OACE,oCACE,kBAAC,IAAD,CACEsB,MAAOlE,KAAKkH,MAAMxC,gBAClBnE,QAASP,KAAKuI,wBAAwBvI,KAAKkH,MAAM5C,UACjDkE,cAAe,SAACC,GAAD,OAAO,EAAKG,gBAAgBH,EAAEE,OAAOzE,QACpDD,MAAM,YAER,kBAAC,IAAD,CACEC,MAAOlE,KAAKkH,MAAMlC,mBAClBzE,QAASP,KAAKuI,wBAAwBvI,KAAKkH,MAAMJ,aACjD0B,cAAe,SAACC,GAAD,OAAO,EAAKI,mBAAmBJ,EAAEE,OAAOzE,QACvDD,MAAM,iBAId,KAAK9B,IAAqBU,YACxB,OACE,oCACE,kBAAC,IAAD,CACEqB,MAAOlE,KAAKkH,MAAMrF,YAClBtB,QAASP,KAAKuI,wBAAwBvI,KAAKkH,MAAMpD,UACjD0E,cAAe,SAACC,GAAD,OAAO,EAAKC,gBAAgBD,EAAEE,OAAOzE,QACpDD,MAAM,aAKd,KAAK9B,IAAqBW,IACxB,OACE,oCACE,kBAAC,IAAD,CACEoB,MAAOlE,KAAKkH,MAAMrF,YAClBtB,QAASP,KAAKuI,wBAAwBvI,KAAKkH,MAAMpD,UACjD0E,cAAe,SAACC,GAAD,OAAO,EAAKC,gBAAgBD,EAAEE,OAAOzE,QACpDD,MAAM,YAER,kBAAC,IAAD,CACEC,MAAOlE,KAAKkH,MAAMhB,mBAClB3F,QAASP,KAAKuI,wBAAwBvI,KAAKkH,MAAMH,aACjDyB,cAAe,SAACC,GACd,EAAKd,SAAL,KACK,EAAKT,MADV,CAEEhB,mBAAoBuC,EAAEE,OAAOzE,UAGjCD,MAAM,iBAId,QACE,MAAO,MAxRf,+BA4RW,WACP,OAAIjE,KAAKkH,MAAMF,QAEX,yBAAK+B,UAAU,wBACb,0BAAMA,UAAU,wCAAhB,cACA,yBAAKA,UAAU,uCACb,4BAAQA,UAAU,iBAChB,iDAQR,oCACE,kBAAC,IAAD,CACE7E,MAAOlE,KAAKkH,MAAMhF,kBAClB3B,QAASP,KAAK2G,WACd6B,cAAe,SAACC,GAAD,OAAO,EAAKO,kBAAkBP,EAAEE,OAAOzE,QACtDD,MAAM,eAEPjE,KAAKiJ,sBAAsBjJ,KAAKkH,MAAMhF,yB,2BAlT/C,GAAwDgH,iB,muBCbjD,IAAMC,EAAb,YAME,WAA6BpH,GAAuC,M,IAAA,O,4FAAA,S,EAClE,U,EAAA,kB,8CAD2BA,aAAuC,EAMpEqH,OAAS3C,EAJP,EAAK4C,gBAAkB,IAAIvH,EAA+BC,GAC1D,EAAKC,MAAQ,EAAKA,MAAMsH,KAAX,MAHqD,E,UANtE,O,kOAAA,M,EAAA,G,EAAA,6BAcQC,GACJ,IAAMC,EAAoBC,YAAKzJ,KAAKqJ,gBAAgBK,QAAQH,EAAQI,QAAQ,KAC5E,OAAOF,YAAKzJ,KAAK+B,WAAW6H,2BAA2B9I,KACrD+I,aAAS,kBAAML,KACfzI,aAAI,SAACI,GAAD,MAAW,CAAEA,iB,2BAlBvB,GAAoD2I,yB,64GCU/BC,G,YAQnB,WACUC,GAGR,MAFOpF,EAEP,uDAFkC6C,cACjBwC,EACjB,uDADoCC,cACpC,mBACA,0BAAMF,KAJEA,mBAGR,EAFOpF,cAEP,EADiBqF,UAGjB,EAAKE,mBAAqBH,EAAiBI,SAASD,oBAAsB,MAC1E,EAAKE,IAAM,IAAIC,EAAJ,UAAWN,EAAiBpJ,IAA5B,kCACX,EAAK2J,UAAY,IAAIpB,EAAJ,OAJjB,E,uTAQA,OAAOnJ,KAAK4E,YAAYyD,eAAetH,KAAI,SAACuH,GAAD,iBAAWA,EAAE1B,W,4BAGpD2C,GAAgF,WAKpF,OAJAA,EAAQI,QAAUJ,EAAQI,QAAQ5I,KAAI,SAACyJ,GAAD,aACjC,EAAKC,aAAaD,GADe,CAEpCE,WAAYnB,EAAQmB,gBAEtB,2CAAmBnB,K,uEAGChJ,G,wGACdP,KAAK4J,0B,cACLe,EAAapK,EAAQoK,WACrBC,EAAU,CACd,CACEvD,MAAO,kBACPtC,KAAM,kBACN8F,aAAc7K,KAAK8K,GACnBC,KAAM,OACNC,mBAAoB,cACpBC,iBAAkB,aAClBpD,WAAY7H,KAAK4E,YAAYC,QAAQ8F,EAAWhC,OAAOd,WAAYtH,EAAQ2K,YAAc,IACzFC,MAAOnL,KAAK4E,YAAYC,QAAQ8F,EAAWhC,OAAOwC,MAAO5K,EAAQ2K,YAAc,IAC/ElH,KAAMhE,KAAK4E,YAAYC,QAAQ8F,EAAWhC,OAAO3E,KAAMzD,EAAQ2K,YAAc,IAC7EE,KAAMpL,KAAK4E,YAAYC,QAAQ8F,EAAWhC,OAAOyC,KAAM7K,EAAQ2K,YAAc,IAC7ErJ,YAAa7B,KAAK4E,YAAYC,QAC5B8F,EAAWhC,OAAO9G,YAAc8I,EAAWhC,OAAO9G,YAAc7B,KAAKiC,oBACrE1B,EAAQ2K,YAAc,IAExBG,QAASrL,KAAKsL,mBAAmBX,EAAWhC,OAAO0C,SAAW,GAAI9K,EAAQ2K,c,kBAIvElL,KAAKqK,IACTkB,KAAK,CACJ9B,KAAMlJ,EAAQiL,MAAM/B,KAAKgC,UAAUC,WACnCC,GAAIpL,EAAQiL,MAAMG,GAAGF,UAAUC,WAC/Bd,YAED9J,KACCC,aAAI,YAWF,OAXgB,EAAXI,KACgByK,QAAL,gBAAgCC,OAAO,GAAGC,KAAK/K,KAAI,SAACuH,GAClE,MAAO,CACLqC,WAAYA,EACZoB,KAAMC,KAAKC,MAAM3D,EAAE,IACnB6C,MAAO7C,EAAE,GACT8C,KAAM,GACNpH,KAAMsE,EAAE,WAOf1G,a,6IAKHsJ,GACqB,IAFnBgB,EAEmB,EAFnBA,YAAa7E,EAEM,EAFNA,MAAOO,EAED,EAFCA,UAAWuE,EAEZ,EAFYA,SAGjC,MAAO,CACLtB,aAAc7K,KAAK8K,GACnBzD,QACAqD,WAAY1K,KAAK0K,WACjB3F,KAAM,kBACN6C,YACAsE,YAAa,MACRlM,KAAKoM,iBAAiBF,EAAahB,GAD7B,CAETrJ,YAAa7B,KAAK4E,YAAYC,QAC5BqH,EAAYrK,YAAcqK,EAAYrK,YAAc7B,KAAKiC,oBACzDiJ,GAEFG,QAASrL,KAAKsL,mBAAmBY,EAAYb,SAAW,GAAIH,GAC5DmB,SAAUrM,KAAKsM,oBAAoBJ,EAAYG,UAAY,GAAInB,GAC/DH,KAAMmB,EAAYnB,MAAQ,OAC1BwB,WAAYL,EAAYK,aAE1BJ,SAAUA,GAAYnM,KAAKoM,iBAAiBD,EAAUjB,M,iEAI1CrD,EAAoBR,EAAexF,EAAqBwK,G,kGAChE9L,EAAU,CACdoJ,QAAS,CACP,CACEtC,QACAwD,aAAc7K,KAAK8K,GACnBlD,UAAW4E,IAAUC,QACrBP,YAAa,CACXrK,YAAa7B,KAAK4E,YAAYC,QAAQhD,GACtCgG,WAAY7H,KAAK4E,YAAYC,QAAQgD,GACrCwE,SAAUrM,KAAKsM,oBAAoBD,GAAY,GAAI,IACnDrB,mBAAoB,cACpBD,KAAM,aAIZS,MAAOxL,KAAKiK,QAAQyC,cAGhB9B,EAAUrK,EAAQoJ,SAEXjC,O,yCACJ/F,YAAG,CAAEiK,QAAS,KAAMhK,a,gCAGtB6H,YAAKzJ,KAAK4J,2BACd9I,KACC+I,aAAS,WACP,OAAO,EAAKQ,IAAIkB,KAAK,CACnB9B,KAAMlJ,EAAQiL,MAAM/B,KAAKgC,UAAUC,WACnCC,GAAIpL,EAAQiL,MAAMG,GAAGF,UAAUC,WAC/Bd,eAGJ7J,aAAI,YACF,OADgB,EAAXI,QAGPJ,aAAI,SAACC,GACH,IAAMkH,EAASlH,EAAS4K,QAAQvE,GAChC,OAAOa,GAAUA,EAAOyE,KAAOzE,EAAOyE,KAAKrH,OAAS,OAGvD1D,a,+QAKGgL,EAAsB,gD,kBAEpB5M,KAAK4J,0B,uBACY5J,KAAKqK,IAAIwC,KAAK7M,KAAKiC,qB,OAClB,OADlBjB,E,QACO8L,QACXA,EAAS,UACTC,EAAU,0DAEVD,EAAS,QACTC,EAAU/L,EAASgM,WAAahM,EAASgM,WAAaJ,G,kDAGxDE,EAAS,QACLG,IAAEzG,SAAF,MACFuG,EAAU,EAAH,IAEPA,EAAU,4BACVA,GAAW,KAAMC,WAAa,KAAMA,WAAaJ,EAC7C,KAAMzL,MAAQ,KAAMA,KAAKE,OAAS,KAAMF,KAAKE,MAAM6L,OACrDH,GAAW,KAAO,KAAM5L,KAAKE,MAAM6L,KAAO,KAAO,KAAM/L,KAAKE,MAAM0L,U,2CAI/D,CACLD,SACAC,Y,oSAMG/M,KAAKqK,IACTkB,KAAK,CACJX,QAAS,CACP,CACEvD,MAAO,uBACPtC,KAAM,uBACN8F,aAAc7K,KAAK8K,OAIxBhK,KACCC,aAAI,YAAc,IAAXI,EAAW,EAAXA,KACL,OAAOA,GAAQA,EAAKyK,SAAWzK,EAAKyK,QAAQuB,sBAAwBhM,EAAKyK,QAAQuB,qBAAqBR,KAClGxL,EAAKyK,QAAQuB,qBAAqBR,KAAKS,eACvC,MAENhM,aAAW,SAACiM,GACV,OAAOC,YAAWD,EAAIlM,KAAKE,WAG9BO,a,uIAGuB,MACwC5B,KAAKgK,iBAAiBI,SAAhFgD,EADkB,EAClBA,eAAgBjD,EADE,EACFA,mBAAoBoD,EADlB,EACkBA,kBAC5C,MAA2B,QAAvBpD,EACKoD,GAAqB,GAGvBH,GAAkB,K,gLAIyBpN,KAAKgK,iBAAiBI,SAAhED,E,EAAAA,mBAAoBoD,E,EAAAA,kBACD,QAAvBpD,GAAiCoD,E,gCACsBvN,KAAKmN,uB,OAA9DnN,KAAKgK,iBAAiBI,SAASmD,kB,0KAId1L,G,mFACdA,E,yCACI,I,gCAGF7B,KAAKqK,IAAImD,IAAT,UAAgBxN,KAAK4E,YAAYC,QAAQhD,GAAzC,sBAA2E,CAChFzB,YAAa,SAACwF,GAAW,IAChBnB,EADgB,GACLmB,EAAEb,KAAK0I,MAAM,KADR,MAEhBjJ,EAFgB,GAEIC,EAAQgJ,MAAM,KAFlB,MAOvB,OAJA7H,EAAEnB,QAAUA,EACZmB,EAAEpB,iBAAmBA,EACrBoB,EAAEd,YAAcc,EAAEd,aAAec,EAAEb,KAE5Ba,M,oKAKQ/D,G,yGACZ7B,KAAKqK,IAAImD,IAAT,UAAgBxN,KAAK4E,YAAYC,QAAQhD,GAAzC,aAAkE,CACvEzB,YAAa,gBAAGwG,EAAH,EAAGA,KAAH,MAAiC,CAC5C1C,MAAO0C,EAAK1F,MAAM,gBAAiB,GACnC+C,MAAO2C,EAAK1F,MAAM,gBAAiB,Q,+KAKTW,EAAqB6L,G,6FAC9CA,E,yCACIlN,QAAQC,QAAQ,K,gBAEcT,KAAKoM,iBAAiB,CAAEvK,cAAa6L,cAAzDC,E,EAAb9L,YAA2BkC,E,EAAX2J,U,kBACf1N,KAAKqK,IAAImD,IAAT,UAAgBG,EAAhB,qBAA8B5J,EAA9B,2BAA0D,CAC/D3D,YAAa,gBAAGwG,EAAH,EAAGA,KAAM9B,EAAT,EAASA,YAAa8I,EAAtB,EAAsBA,KAAtB,MAAuF,CAClG1J,MAAO0C,EAAK1F,MAAM,gBAAiB,GACnC+C,MAAOa,EACP8I,Y,oIAMJ,OAAO5N,KAAKqK,IAAImD,IAAT,WAAyB,CAC9BpN,YAAa,kBAA+D,CAC1E8D,MADW,EAAG2J,UAEd5J,MAFW,EAAc2C,OAI3B7G,QAAS,GAAF,OAAKC,KAAKgK,iBAAiBpJ,IAA3B,iC,mCAIEoB,GACX,IAAKA,EAAMyD,eAAe,eAAgB,OACyDzD,EAAzF8L,EADgC,EAChCA,KAAMzG,EAD0B,EAC1BA,MAAqDqD,GAD3B,EACnB3I,WADmB,EACPgM,IADO,EACFnG,UADE,EACSoG,SADT,EACmBC,OADnB,EAC2BvD,YAAY3F,EADvC,EACuCA,KAASmJ,EADhD,8FAExC,MAAO,CACL7G,QACAqD,aACA3F,OACA+I,OACAlG,UAAW4E,IAAUC,QACrBP,YAAa,MACRgC,EADM,CAETnD,KAAMmD,EAAKnD,MAAQ,UAIzB,OAAO/I,I,uCAGuCmM,GAA2C,WAAhCjD,EAAgC,uDAAP,GAClF,OAAO5D,OAAO8G,QAAQD,GAAQE,QAAO,SAACC,EAAD,GAAuB,cAAhBP,EAAgB,KAAX7J,EAAW,KAC1D,aACKoK,EADL,MAEGP,EAAM7J,GAAS+I,IAAEzG,SAAStC,GAAS,EAAKU,YAAYC,QAAQX,EAAOgH,GAAchH,MAEnF,M,kCAGOlC,GACV,GAAIA,EAAM8L,KACR,OAAO,EAGT,GAAI9L,EAAM4F,WAAa5F,EAAM4F,YAAc4E,IAAU1J,KAAOd,EAAMmK,SAAU,OAClBnK,EAAMmK,SAAtDoC,EADkE,EAClEA,aAAcb,EADoD,EACpDA,UAAWc,EADyC,EACzCA,MAAO3M,EADkC,EAClCA,YACxC,SAAS0M,GAAkBb,GAAec,GAAW3M,GAGvD,OAAIG,EAAM4F,WAAa5F,EAAM4F,YAAc4E,IAAUC,SAAWzK,EAAMkK,YAAYK,aAAekC,IAAWC,MACjG1M,EAAMkK,YAAYrK,eAAiBG,EAAMkK,YAAYlK,QAGzCA,EAAMkK,YAArBrE,a,oDAKoB+C,EAAiCM,GAAgD,WAC7G,OAAON,EAAQ7J,KAAI,SAACiB,GAAD,OAAW,EAAK2M,uBAAuB3M,EAAOkJ,Q,yCAGhDG,EAAmBH,GAAwB,WACtD0D,EAAiB3B,IAAE4B,MAAMxD,EAAS,GACrCtK,KAAI,0BAAEgN,EAAF,KAAOe,EAAP,KAAiB5K,EAAjB,KAAwB6K,EAAxB,gBACHhB,MACAe,WACA5K,SACI6K,GAAa,CAAEA,iBAEpBV,QAAO,SAAChO,EAAK2O,GAAN,OAAkBA,EAAO9K,MAAP,aAAmB7D,GAAnB,CAAwB2O,IAAU3O,IAAM,IAWpE,OAToB4M,IAAEgC,QACpBL,EAAe7N,KAAI,gBAAGgN,EAAH,EAAGA,IAAKe,EAAR,EAAQA,SAAU5K,EAAlB,EAAkBA,MAAO6K,EAAzB,EAAyBA,UAAzB,OACjB,EAAKnK,YAAYC,QAAQkJ,EAAK7C,GAAc,IAC5C4D,EACA,EAAKlK,YAAYC,QAAQX,EAAOgH,GAAc,GAAI,UAHjC,UAIb6D,EAAY,CAACA,GAAa,UAIZ,K,0CAGJ1C,EAAoBnB,GAA0B,WAC5DgE,EAAiC,GASrC,OARC7C,GAAY,IAAI8C,SAAQ,SAACC,GACxB,IAAMC,EAAe,EAAKzK,YAAYC,QAAQuK,EAAIlE,GAAc,GAAI,OAAOuC,MAAM,KAC7E6B,MAAMC,QAAQF,GAChBH,EAAuBA,EAAqBM,OAAOH,GAEnDH,EAAqBO,KAAKJ,MAGvBH,O,gCAjW4CQ,yB,oLCThD,IAAMC,GAAb,WAaE,WAAYC,I,4FAA8B,cAP1CC,iBAA6B,GAQ3B7P,KAAK8P,0BAA4BC,IAASC,IAC1ChQ,KAAK4P,cAAgBA,EACrB5P,KAAK4G,KAAO5G,KAAK2M,KAAK/F,KACtB5G,KAAKiQ,QAAQ7F,SAAWpK,KAAKiQ,QAAQ7F,UAAY,GACjDpK,KAAKiQ,QAAQ7F,SAASD,mBAAqBnK,KAAKiQ,QAAQ7F,SAASD,mBAC7DnK,KAAKiQ,QAAQ7F,SAASD,mBACtBnK,KAAK8P,0BACT9P,KAAKiQ,QAAQC,eAAiBlQ,KAAKiQ,QAAQC,gBAAkB,GAC7DlQ,KAAKiQ,QAAQE,iBAAmBnQ,KAAKiQ,QAAQE,kBAAoB,GACjEnQ,KAAKoQ,oBAAsBC,I,UAvB/B,mC,EAAA,G,EAAA,4BA0BOC,GACHtQ,KAAKiQ,QAAQC,eAAeK,WAAaD,EAAIE,YAC7CxQ,KAAKiQ,QAAQ7F,SAASqG,SAAWH,EAAII,UACrC1Q,KAAKiQ,QAAQ7F,SAASuG,YAAcL,EAAIM,aACxC5Q,KAAKiQ,QAAQ7F,SAASgD,eAAiBkD,EAAIO,aA9B/C,kCAiCcP,GAkBV,OAjBAtQ,KAAK8Q,0BACAR,EAAIE,aAA0C,IAA3BF,EAAIE,YAAY9I,QACtC1H,KAAK6P,iBAAiBJ,KAAK,0CAGxBa,EAAII,WAAsC,IAAzBJ,EAAII,UAAUhJ,QAClC1H,KAAK6P,iBAAiBJ,KAAK,wCAGxBa,EAAIM,cAA4C,IAA5BN,EAAIM,aAAalJ,QACxC1H,KAAK6P,iBAAiBJ,KAAK,2CAGxBa,EAAIO,YAAwC,IAA1BP,EAAIO,WAAWnJ,QACpC1H,KAAK6P,iBAAiBJ,KAAK,yCAGQ,IAAjCzP,KAAK6P,iBAAiBnI,SACxB1H,KAAK+Q,gBAAiB,GACf,KArDb,+BA2DWC,GACPhR,KAAKiR,SAAW,GACZjR,KAAKkR,YAAYF,IACnBhR,KAAKmR,KAAKH,KA9DhB,iCAkEavI,GACT,IACE,IAAMuI,EAAOI,KAAKnF,MAAMxD,EAAE4I,cAAcC,cAAcC,QAAQ,eAAiBvR,KAAKiR,UAChFjR,KAAKkR,YAAYF,IACnBhR,KAAKmR,KAAKH,GAEZ,MAAO3P,GACPrB,KAAK8Q,0BACL9Q,KAAK6P,iBAAiBJ,KAAtB,wBAA4CpO,EAAM0L,aA1ExD,gDA+EI/M,KAAK6P,iBAAmB,GACxB7P,KAAK+Q,gBAAiB,EACtB/Q,KAAKiR,SAAW,GAEhBjR,KAAKiQ,QAAQ7F,SAAW9C,OAAOC,OAAO,GAAI,CAAE4C,mBAAoBnK,KAAKiQ,QAAQ7F,SAASD,qBACtFnK,KAAKiQ,QAAQC,eAAiB,GAC9BlQ,KAAKiQ,QAAQE,iBAAmB,Q,6BArFpC,K,uKAAaR,GACJ6B,YAAc,sECThB,IAAMC,GAAb,WAIE,c,4FAAc,SACZzR,KAAK2K,WAAWhC,OAAS3I,KAAK2K,WAAWhC,QAAU,GACnD3I,KAAK0R,cAAgB1R,KAAK0R,cAAcpI,KAAKtJ,M,UANjD,O,EAAA,G,EAAA,qCASgB2I,GACZrB,OAAOC,OAAOvH,KAAK2K,WAAWhC,OAAQA,Q,6BAV1C,KAAa8I,GACJD,YAAc,mCCHvB,wCAQO,IAAMG,GAAS,IAAIC,mBAAkE7H,IACzF8H,eAAeC,MACfC,cAAcpC,IACdqC,uBAAuBP,IACvBQ,uBAAuBxL","file":"cloudMonitoringPlugin.63a9c1d648180e457252.js","sourcesContent":["import { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { SelectableValue } from '@grafana/data';\nimport { FetchResponse, getBackendSrv } from '@grafana/runtime';\n\nimport appEvents from 'app/core/app_events';\nimport { CoreEvents } from 'app/types';\nimport { formatCloudMonitoringError } from './functions';\nimport { MetricDescriptor } from './types';\n\nexport interface PostResponse {\n  results: Record<string, any>;\n}\n\ninterface Options {\n  responseMap?: (res: any) => SelectableValue<string> | MetricDescriptor;\n  baseUrl?: string;\n  useCache?: boolean;\n}\n\nexport default class Api {\n  cache: { [key: string]: Array<SelectableValue<string>> };\n  defaultOptions: Options;\n\n  constructor(private baseUrl: string) {\n    this.cache = {};\n    this.defaultOptions = {\n      useCache: true,\n      responseMap: (res: any) => res,\n      baseUrl: this.baseUrl,\n    };\n  }\n\n  get(path: string, options?: Options): Promise<Array<SelectableValue<string>> | MetricDescriptor[]> {\n    const { useCache, responseMap, baseUrl } = { ...this.defaultOptions, ...options };\n\n    if (useCache && this.cache[path]) {\n      return Promise.resolve(this.cache[path]);\n    }\n\n    return getBackendSrv()\n      .fetch<Record<string, any>>({\n        url: baseUrl + path,\n        method: 'GET',\n      })\n      .pipe(\n        map((response) => {\n          const responsePropName = path.match(/([^\\/]*)\\/*$/)![1];\n          let res = [];\n          if (response && response.data && response.data[responsePropName]) {\n            res = response.data[responsePropName].map(responseMap);\n          }\n\n          if (useCache) {\n            this.cache[path] = res;\n          }\n\n          return res;\n        }),\n        catchError((error) => {\n          appEvents.emit(CoreEvents.dsRequestError, {\n            error: { data: { error: formatCloudMonitoringError(error) } },\n          });\n          return of([]);\n        })\n      )\n      .toPromise();\n  }\n\n  post(data: Record<string, any>): Observable<FetchResponse<PostResponse>> {\n    return getBackendSrv().fetch<PostResponse>({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data,\n    });\n  }\n\n  test(projectName: string) {\n    return getBackendSrv()\n      .fetch<any>({\n        url: `${this.baseUrl}${projectName}/metricDescriptors`,\n        method: 'GET',\n      })\n      .toPromise();\n  }\n}\n","import isString from 'lodash/isString';\nimport { alignmentPeriods, MetricKind, selectors, ValueTypes } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery, MetricFindQueryTypes } from './types';\nimport { SelectableValue } from '@grafana/data';\nimport {\n  extractServicesFromMetricDescriptors,\n  getAggregationOptionsByMetric,\n  getAlignmentOptionsByMetric,\n  getLabelKeys,\n  getMetricTypesByService,\n} from './functions';\n\nexport default class CloudMonitoringMetricFindQuery {\n  constructor(private datasource: CloudMonitoringDatasource) {}\n\n  async execute(query: CloudMonitoringVariableQuery) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        case MetricFindQueryTypes.SLOServices:\n          return this.handleSLOServicesQuery(query);\n        case MetricFindQueryTypes.SLO:\n          return this.handleSLOQuery(query);\n        case MetricFindQueryTypes.Selectors:\n          return this.handleSelectorQuery();\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run CloudMonitoringMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return (projects as SelectableValue<string>).map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: any[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map((s) => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s: any) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, [labelKey]);\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type'].map(this.toFindQueryResult);\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAlignmentOptionsByMetric(descriptor.valueType, descriptor.metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(descriptor.valueType as ValueTypes, descriptor.metricKind as MetricKind).map(\n      this.toFindQueryResult\n    );\n  }\n\n  async handleSLOServicesQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const services = await this.datasource.getSLOServices(projectName);\n    return services.map(this.toFindQueryResult);\n  }\n\n  async handleSLOQuery({ selectedSLOService, projectName }: CloudMonitoringVariableQuery) {\n    const slos = await this.datasource.getServiceLevelObjectives(projectName, selectedSLOService);\n    return slos.map(this.toFindQueryResult);\n  }\n\n  async handleSelectorQuery() {\n    return selectors.map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return alignmentPeriods.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { SimpleSelect } from './';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  CloudMonitoringVariableQuery,\n  MetricDescriptor,\n  MetricFindQueryTypes,\n  VariableQueryData,\n} from '../types';\nimport CloudMonitoringDatasource from '../datasource';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { QueryEditorProps } from '@grafana/data';\n\nexport type Props = QueryEditorProps<\n  CloudMonitoringDatasource,\n  CloudMonitoringQuery,\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery\n>;\n\nexport class CloudMonitoringVariableQueryEditor extends PureComponent<Props, VariableQueryData> {\n  queryTypes: Array<{ value: string; name: string }> = [\n    { value: MetricFindQueryTypes.Projects, name: 'Projects' },\n    { value: MetricFindQueryTypes.Services, name: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, name: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, name: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, name: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, name: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, name: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, name: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, name: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, name: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, name: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, name: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n    loading: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = Object.assign(\n      this.defaults,\n      { projectName: this.props.datasource.getDefaultProject() },\n      this.props.query\n    );\n  }\n\n  async componentDidMount() {\n    const projects = (await this.props.datasource.getProjects()) as MetricDescriptor[];\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      name: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some((s) => s.value === getTemplateSrv().replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(this.state.projectName);\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects: projects.map(({ value, label }: any) => ({ value, name: label })),\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n      sloServices: sloServices.map(({ value, label }: any) => ({ value, name: label })),\n      loading: false,\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onPropsChange = () => {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    this.props.onChange({ ...queryModel, refId: 'CloudMonitoringVariableQueryEditor-VariableQuery' });\n  };\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState({\n      ...labels,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projectName,\n      sloServices: sloServices.map(({ value, label }: any) => ({ value, name: label })),\n    });\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state);\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state);\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<VariableQueryData>) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some((l) => l === getTemplateSrv().replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  insertTemplateVariables(options: any) {\n    const templateVariables = getTemplateSrv()\n      .getVariables()\n      .map((v: any) => ({\n        name: `$${v.name}`,\n        value: `$${v.name}`,\n      }));\n    return [...templateVariables, ...options];\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={(e) => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={(e) => this.onServiceChange(e.target.value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={(e) => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={(e) => this.onServiceChange(e.target.value)}\n              label=\"Service\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={(e) => this.onMetricTypeChange(e.target.value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <SimpleSelect\n                value={this.state.labelKey}\n                options={this.insertTemplateVariables(this.state.labels.map((l) => ({ value: l, name: l })))}\n                onValueChange={(e) => this.onLabelKeyChange(e.target.value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={(e) => this.onServiceChange(e.target.value)}\n              label=\"Service\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={(e) => this.onMetricTypeChange(e.target.value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={(e) => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={(e) => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n            <SimpleSelect\n              value={this.state.selectedSLOService}\n              options={this.insertTemplateVariables(this.state.sloServices)}\n              onValueChange={(e) => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: e.target.value,\n                });\n              }}\n              label=\"SLO Service\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"gf-form max-width-21\">\n          <span className=\"gf-form-label width-10 query-keyword\">Query Type</span>\n          <div className=\"gf-form-select-wrapper max-width-12\">\n            <select className=\"gf-form-input\">\n              <option>Loading...</option>\n            </select>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <SimpleSelect\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onValueChange={(e) => this.onQueryTypeChange(e.target.value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery } from './types';\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\n\nexport class CloudMonitoringVariableSupport extends CustomVariableSupport<\n  CloudMonitoringDatasource,\n  CloudMonitoringVariableQuery\n> {\n  private readonly metricFindQuery: CloudMonitoringMetricFindQuery;\n\n  constructor(private readonly datasource: CloudMonitoringDatasource) {\n    super();\n    this.metricFindQuery = new CloudMonitoringMetricFindQuery(datasource);\n    this.query = this.query.bind(this);\n  }\n\n  editor = CloudMonitoringVariableQueryEditor;\n\n  query(request: DataQueryRequest<CloudMonitoringVariableQuery>): Observable<DataQueryResponse> {\n    const executeObservable = from(this.metricFindQuery.execute(request.targets[0]));\n    return from(this.datasource.ensureGCEDefaultProject()).pipe(\n      mergeMap(() => executeObservable),\n      map((data) => ({ data }))\n    );\n  }\n}\n","import _ from 'lodash';\n\nimport {\n  DataQueryRequest,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  SelectableValue,\n  DataQueryResponse,\n} from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport { CloudMonitoringOptions, CloudMonitoringQuery, Filter, MetricDescriptor, QueryType, EditorMode } from './types';\nimport API from './api';\nimport { DataSourceWithBackend } from '@grafana/runtime';\nimport { CloudMonitoringVariableSupport } from './variables';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { from, Observable, of, throwError } from 'rxjs';\n\nexport default class CloudMonitoringDatasource extends DataSourceWithBackend<\n  CloudMonitoringQuery,\n  CloudMonitoringOptions\n> {\n  api: API;\n  authenticationType: string;\n  intervalMs: number;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudMonitoringOptions>,\n    public templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.api = new API(`${instanceSettings.url!}/cloudmonitoring/v3/projects/`);\n    this.variables = new CloudMonitoringVariableSupport(this);\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  query(request: DataQueryRequest<CloudMonitoringQuery>): Observable<DataQueryResponse> {\n    request.targets = request.targets.map((t) => ({\n      ...this.migrateQuery(t),\n      intervalMs: request.intervalMs,\n    }));\n    return super.query(request);\n  }\n\n  async annotationQuery(options: any) {\n    await this.ensureGCEDefaultProject();\n    const annotation = options.annotation;\n    const queries = [\n      {\n        refId: 'annotationQuery',\n        type: 'annotationQuery',\n        datasourceId: this.id,\n        view: 'FULL',\n        crossSeriesReducer: 'REDUCE_NONE',\n        perSeriesAligner: 'ALIGN_NONE',\n        metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),\n        title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),\n        text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),\n        tags: this.templateSrv.replace(annotation.target.tags, options.scopedVars || {}),\n        projectName: this.templateSrv.replace(\n          annotation.target.projectName ? annotation.target.projectName : this.getDefaultProject(),\n          options.scopedVars || {}\n        ),\n        filters: this.interpolateFilters(annotation.target.filters || [], options.scopedVars),\n      },\n    ];\n\n    return this.api\n      .post({\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      })\n      .pipe(\n        map(({ data }) => {\n          const results = data.results['annotationQuery'].tables[0].rows.map((v: any) => {\n            return {\n              annotation: annotation,\n              time: Date.parse(v[0]),\n              title: v[1],\n              tags: [],\n              text: v[3],\n            } as any;\n          });\n\n          return results;\n        })\n      )\n      .toPromise();\n  }\n\n  applyTemplateVariables(\n    { metricQuery, refId, queryType, sloQuery }: CloudMonitoringQuery,\n    scopedVars: ScopedVars\n  ): Record<string, any> {\n    return {\n      datasourceId: this.id,\n      refId,\n      intervalMs: this.intervalMs,\n      type: 'timeSeriesQuery',\n      queryType,\n      metricQuery: {\n        ...this.interpolateProps(metricQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          metricQuery.projectName ? metricQuery.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n        filters: this.interpolateFilters(metricQuery.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(metricQuery.groupBys || [], scopedVars),\n        view: metricQuery.view || 'FULL',\n        editorMode: metricQuery.editorMode,\n      },\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars),\n    };\n  }\n\n  async getLabels(metricType: string, refId: string, projectName: string, groupBys?: string[]) {\n    const options = {\n      targets: [\n        {\n          refId,\n          datasourceId: this.id,\n          queryType: QueryType.METRICS,\n          metricQuery: {\n            projectName: this.templateSrv.replace(projectName),\n            metricType: this.templateSrv.replace(metricType),\n            groupBys: this.interpolateGroupBys(groupBys || [], {}),\n            crossSeriesReducer: 'REDUCE_NONE',\n            view: 'HEADERS',\n          },\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    } as DataQueryRequest<CloudMonitoringQuery>;\n\n    const queries = options.targets;\n\n    if (!queries.length) {\n      return of({ results: [] }).toPromise();\n    }\n\n    return from(this.ensureGCEDefaultProject())\n      .pipe(\n        mergeMap(() => {\n          return this.api.post({\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries,\n          });\n        }),\n        map(({ data }) => {\n          return data;\n        }),\n        map((response) => {\n          const result = response.results[refId];\n          return result && result.meta ? result.meta.labels : {};\n        })\n      )\n      .toPromise();\n  }\n\n  async testDatasource() {\n    let status, message;\n    const defaultErrorMessage = 'Cannot connect to Google Cloud Monitoring API';\n    try {\n      await this.ensureGCEDefaultProject();\n      const response = await this.api.test(this.getDefaultProject());\n      if (response.status === 200) {\n        status = 'success';\n        message = 'Successfully queried the Google Cloud Monitoring API.';\n      } else {\n        status = 'error';\n        message = response.statusText ? response.statusText : defaultErrorMessage;\n      }\n    } catch (error) {\n      status = 'error';\n      if (_.isString(error)) {\n        message = error;\n      } else {\n        message = 'Google Cloud Monitoring: ';\n        message += error.statusText ? error.statusText : defaultErrorMessage;\n        if (error.data && error.data.error && error.data.error.code) {\n          message += ': ' + error.data.error.code + '. ' + error.data.error.message;\n        }\n      }\n    } finally {\n      return {\n        status,\n        message,\n      };\n    }\n  }\n\n  async getGCEDefaultProject() {\n    return this.api\n      .post({\n        queries: [\n          {\n            refId: 'getGCEDefaultProject',\n            type: 'getGCEDefaultProject',\n            datasourceId: this.id,\n          },\n        ],\n      })\n      .pipe(\n        map(({ data }) => {\n          return data && data.results && data.results.getGCEDefaultProject && data.results.getGCEDefaultProject.meta\n            ? data.results.getGCEDefaultProject.meta.defaultProject\n            : '';\n        }),\n        catchError((err) => {\n          return throwError(err.data.error);\n        })\n      )\n      .toPromise();\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.api.get(`${this.templateSrv.replace(projectName)}/metricDescriptors`, {\n      responseMap: (m: any) => {\n        const [service] = m.type.split('/');\n        const [serviceShortName] = service.split('.');\n        m.service = service;\n        m.serviceShortName = serviceShortName;\n        m.displayName = m.displayName || m.type;\n\n        return m;\n      },\n    }) as Promise<MetricDescriptor[]>;\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.api.get(`${this.templateSrv.replace(projectName)}/services`, {\n      responseMap: ({ name }: { name: string }) => ({\n        value: name.match(/([^\\/]*)\\/*$/)![1],\n        label: name.match(/([^\\/]*)\\/*$/)![1],\n      }),\n    });\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.api.get(`${p}/services/${s}/serviceLevelObjectives`, {\n      responseMap: ({ name, displayName, goal }: { name: string; displayName: string; goal: number }) => ({\n        value: name.match(/([^\\/]*)\\/*$/)![1],\n        label: displayName,\n        goal,\n      }),\n    });\n  }\n\n  getProjects() {\n    return this.api.get(`projects`, {\n      responseMap: ({ projectId, name }: { projectId: string; name: string }) => ({\n        value: projectId,\n        label: name,\n      }),\n      baseUrl: `${this.instanceSettings.url!}/cloudresourcemanager/v1/`,\n    });\n  }\n\n  migrateQuery(query: CloudMonitoringQuery): CloudMonitoringQuery {\n    if (!query.hasOwnProperty('metricQuery')) {\n      const { hide, refId, datasource, key, queryType, maxLines, metric, intervalMs, type, ...rest } = query as any;\n      return {\n        refId,\n        intervalMs,\n        type,\n        hide,\n        queryType: QueryType.METRICS,\n        metricQuery: {\n          ...rest,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n    return query;\n  }\n\n  interpolateProps<T extends Record<string, any>>(object: T, scopedVars: ScopedVars = {}): T {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: value && _.isString(value) ? this.templateSrv.replace(value, scopedVars) : value,\n      };\n    }, {} as T);\n  }\n\n  filterQuery(query: CloudMonitoringQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType && query.queryType === QueryType.SLO && query.sloQuery) {\n      const { selectorName, serviceId, sloId, projectName } = query.sloQuery;\n      return !!selectorName && !!serviceId && !!sloId && !!projectName;\n    }\n\n    if (query.queryType && query.queryType === QueryType.METRICS && query.metricQuery.editorMode === EditorMode.MQL) {\n      return !!query.metricQuery.projectName && !!query.metricQuery.query;\n    }\n\n    const { metricType } = query.metricQuery;\n\n    return !!metricType;\n  }\n\n  interpolateVariablesInQueries(queries: CloudMonitoringQuery[], scopedVars: ScopedVars): CloudMonitoringQuery[] {\n    return queries.map((query) => this.applyTemplateVariables(query, scopedVars) as CloudMonitoringQuery);\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter = _.chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .reduce((res, filter) => (filter.value ? [...res, filter] : res), []);\n\n    const filterArray = _.flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, 'regex'),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach((gb) => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n}\n","import DatasourceSrv from 'app/features/plugins/datasource_srv';\nimport { AuthType, authTypes } from './types';\n\nexport interface JWT {\n  private_key: string;\n  token_uri: string;\n  client_email: string;\n  project_id: string;\n}\n\nexport class CloudMonitoringConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/cloud-monitoring/partials/config.html';\n  datasourceSrv: DatasourceSrv;\n  current: any;\n  meta: any;\n  jsonText: string;\n  validationErrors: string[] = [];\n  inputDataValid: boolean;\n  authenticationTypes: Array<{ key: AuthType; value: string }>;\n  defaultAuthenticationType: string;\n  name: string;\n\n  /** @ngInject */\n  constructor(datasourceSrv: DatasourceSrv) {\n    this.defaultAuthenticationType = AuthType.JWT;\n    this.datasourceSrv = datasourceSrv;\n    this.name = this.meta.name;\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.authenticationType = this.current.jsonData.authenticationType\n      ? this.current.jsonData.authenticationType\n      : this.defaultAuthenticationType;\n    this.current.secureJsonData = this.current.secureJsonData || {};\n    this.current.secureJsonFields = this.current.secureJsonFields || {};\n    this.authenticationTypes = authTypes;\n  }\n\n  save(jwt: JWT) {\n    this.current.secureJsonData.privateKey = jwt.private_key;\n    this.current.jsonData.tokenUri = jwt.token_uri;\n    this.current.jsonData.clientEmail = jwt.client_email;\n    this.current.jsonData.defaultProject = jwt.project_id;\n  }\n\n  validateJwt(jwt: JWT) {\n    this.resetValidationMessages();\n    if (!jwt.private_key || jwt.private_key.length === 0) {\n      this.validationErrors.push('Private key field missing in JWT file.');\n    }\n\n    if (!jwt.token_uri || jwt.token_uri.length === 0) {\n      this.validationErrors.push('Token URI field missing in JWT file.');\n    }\n\n    if (!jwt.client_email || jwt.client_email.length === 0) {\n      this.validationErrors.push('Client Email field missing in JWT file.');\n    }\n\n    if (!jwt.project_id || jwt.project_id.length === 0) {\n      this.validationErrors.push('Project Id field missing in JWT file.');\n    }\n\n    if (this.validationErrors.length === 0) {\n      this.inputDataValid = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  onUpload(json: JWT) {\n    this.jsonText = '';\n    if (this.validateJwt(json)) {\n      this.save(json);\n    }\n  }\n\n  onPasteJwt(e: any) {\n    try {\n      const json = JSON.parse(e.originalEvent.clipboardData.getData('text/plain') || this.jsonText);\n      if (this.validateJwt(json)) {\n        this.save(json);\n      }\n    } catch (error) {\n      this.resetValidationMessages();\n      this.validationErrors.push(`Invalid json: ${error.message}`);\n    }\n  }\n\n  resetValidationMessages() {\n    this.validationErrors = [];\n    this.inputDataValid = false;\n    this.jsonText = '';\n\n    this.current.jsonData = Object.assign({}, { authenticationType: this.current.jsonData.authenticationType });\n    this.current.secureJsonData = {};\n    this.current.secureJsonFields = {};\n  }\n}\n","import { AnnotationTarget } from './types';\n\nexport class CloudMonitoringAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n\n  constructor() {\n    this.annotation.target = this.annotation.target || {};\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(target: AnnotationTarget) {\n    Object.assign(this.annotation.target, target);\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport CloudMonitoringDatasource from './datasource';\nimport { QueryEditor } from './components/QueryEditor';\nimport { CloudMonitoringConfigCtrl } from './config_ctrl';\nimport { CloudMonitoringAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport { CloudMonitoringQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudMonitoringDatasource, CloudMonitoringQuery>(CloudMonitoringDatasource)\n  .setQueryEditor(QueryEditor)\n  .setConfigCtrl(CloudMonitoringConfigCtrl)\n  .setAnnotationQueryCtrl(CloudMonitoringAnnotationsQueryCtrl)\n  .setVariableQueryEditor(CloudMonitoringVariableQueryEditor);\n"],"sourceRoot":""}