{"version":3,"sources":["webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/aggregations.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/utils.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/BucketScriptSettingsEditor/utils.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_def.ts","webpack:///./public/app/plugins/datasource/elasticsearch/language_provider.ts","webpack:///./public/app/plugins/datasource/elasticsearch/utils.ts","webpack:///./public/app/plugins/datasource/elasticsearch/elastic_response.ts","webpack:///./public/app/plugins/datasource/elasticsearch/index_pattern.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_builder.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/utils.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/FiltersSettingsEditor/utils.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/aggregations.ts","webpack:///./public/app/plugins/datasource/elasticsearch/datasource.ts","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/ElasticDetails.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/LogsConfig.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/DataLink.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/DataLinks.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/hooks/useStatelessReducer.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/state.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/state/reducer.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/state/types.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/state/reducer.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/state/types.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/ElasticsearchQueryContext.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/styles.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/state/actions.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/IconButton.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/AddRemove.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/MetricPicker.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/BucketScriptSettingsEditor/state/reducer.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/BucketScriptSettingsEditor/state/types.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/SettingField.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/BucketScriptSettingsEditor/index.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/BucketScriptSettingsEditor/state/actions.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/styles.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/SettingsEditorContainer.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/MovingAverageSettingsEditor.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/index.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/useDescription.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/MetricEditor.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/QueryEditorRow.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/index.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/state/actions.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/FiltersSettingsEditor/state/types.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/FiltersSettingsEditor/state/actions.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/FiltersSettingsEditor/state/reducer.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/FiltersSettingsEditor/index.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/useDescription.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/index.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/BucketAggregationEditor.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/index.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/hooks/useNextId.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/QueryEditor/index.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/module.ts","webpack:///./public/app/plugins/datasource/prometheus/promql.ts","webpack:///./node_modules/react-use/esm/usePrevious.js"],"names":["isMetricAggregationWithField","metric","metricAggregationConfig","type","requiresField","isPipelineAggregation","isPipelineAgg","isPipelineAggregationWithMultipleBucketPaths","supportsMultipleBucketPaths","isMetricAggregationWithSettings","hasSettings","count","label","supportsMissing","hasMeta","supportsInlineScript","defaults","avg","sum","max","min","extended_stats","meta","std_deviation_bounds_lower","std_deviation_bounds_upper","percentiles","settings","percents","cardinality","moving_avg","minVersion","model","window","moving_fn","derivative","serial_diff","cumulative_sum","bucket_script","pipelineVariables","name","pipelineAgg","raw_document","isSingleMetric","size","raw_data","logs","pipelineOptions","default","extendedStats","value","movingAvgModelOptions","defaultMetricAgg","id","defaultBucketAgg","interval","findMetricById","metrics","find","hasMetricOfType","target","some","m","ElasticsearchLanguageProvider","datasource","initialValues","Object","assign","queries","datasourceType","map","query","expr","prometheusLabels","elasticsearchLuceneLabels","keyOperatorValue","push","substring","length","join","getElasticsearchQuery","promQuery","labels","tokens","Prism","tokenize","grammar","nameLabelValue","prop","getNameLabelValue","Token","token","labelKey","labelValue","labelOperator","contentTokens","content","currentToken","currentStr","extractPrometheusLabels","isLogsQuery","bucketAggs","field","timeField","refId","LanguageProvider","describeMetric","removeEmpty","obj","entries","reduce","acc","key","Array","isArray","cleanObj","keys","convertOrderByToMetricId","orderBy","metricIdMatches","match","ElasticResponse","targets","response","processResponseToSeries","seriesList","i","responses","error","getErrorFromElasticResponse","hits","processHits","aggregations","tmpSeriesList","table","TableModel","processBuckets","trimDatapoints","nameSeries","y","rows","data","this","esAgg","props","newSeries","hide","datapoints","buckets","bucket","doc_count","values","percentileName","statName","stats","std_deviation_bounds","upper","lower","metricId","undefined","normalized_value","aggDef","columns","_","propKey","addColumn","text","filterable","addMetricValue","metricName","propValues","getMetricName","filter","script","aggs","depth","aggId","maxDepth","processMetrics","processAggregationDocs","nameIndex","clone","key_as_string","metricDef","extendedStat","queryDef","e","series","metricTypeCount","alias","replace","g1","g2","group","indexOf","metricType","agg","pv","appliedAgg","propName","trim","uniq","getSeriesName","hit","doc","hitsTotal","total","_id","_type","_index","sort","_source","fields","histogram","trimEdges","points","slice","err","result","JSON","stringify","root_cause","reason","message","$$config","config","processResponseToDataFrames","logMessageField","logLevelField","isLogsRequest","dataFrame","n","flattenHits","propNames","docs","createEmptyDataFrame","add","addPreferredVisualisationType","toDataFrame","flattened","flatten","MutableDataFrame","addField","FieldType","time","string","parse","v","fieldNames","includes","s","preferredVisualisationType","intervalMap","Hourly","startOf","amount","Daily","Weekly","Monthly","Yearly","IndexPattern","pattern","dateLocale","toUtc","locale","format","from","to","intervalInfo","start","dateTime","utc","endEpoch","valueOf","indexList","ElasticQueryBuilder","options","esVersion","gte","lte","queryNode","terms","parseInt","order","_count","min_doc_count","isNaN","missing","extended_bounds","offset","filterObj","filters","query_string","analyze_wildcard","unmapped_type","_doc","script_fields","adhocFilters","condition","queryCondition","operator","bool","must","match_phrase","must_not","lt","range","gt","regexp","queryString","j","nestedAggs","getRangeFilter","addAdhocFilters","documentQuery","getDateHistogramAgg","getHistogramAgg","getFiltersAgg","buildTermsAgg","precision","aggField","metricAgg","buckets_path","test","forEach","k","keyname","querystring","build","bucketAggregationConfig","defaultSettings","geohash_grid","date_histogram","orderOptions","sizeOptions","orderByOptions","intervalOptions","createOrderByOptionsForExtendedStats","method","createOrderByOptionsForPercentiles","percent","percentString","isBucketAggregationWithField","bucketAgg","ELASTIC_META_FIELDS","ElasticDatasource","instanceSettings","templateSrv","getTemplateSrv","getLogRowContext","row","sortField","f","searchAfter","get","rowIndex","timeEpochMs","direction","header","getQueryHeader","limit","esQuery","search_after","payload","url","getMultiSearchUrl","post","toPromise","elasticResponse","transformHitsBasedOnDirection","logResponse","getLogs","first","timestampField","lineField","basicAuth","withCredentials","index","database","settingsData","jsonData","indexPattern","timeInterval","maxConcurrentShardRequests","queryBuilder","dataLinks","languageProvider","headers","Authorization","getBackendSrv","fetch","pipe","results","catchError","throwError","originMeta","importQueries","getDefaultTimeRange","getIndexList","getIndexForToday","indexUrlList","requestAllIndices","listLen","generate","Math","mergeMap","request","of","skipWhile","resp","status","throwIfEmpty","annotation","timeEndField","tagsField","textField","dateRanges","rangeStart","rangeEnd","should","minimum_should_match","search_type","ignore_unavailable","res","list","getFieldFromSource","source","fieldName","split","fieldValue","console","log","isString","isNumber","event","tags","timeEnd","titleField","title","scopedVars","expandedQueries","expandedQuery","interpolateLuceneQuery","getFields","dateFields","searchType","timeFrom","timeTo","queryHeader","metricAggs","RegExp","interpolateVariablesInQueries","cloneDeep","sentTargets","getAdhocFilters","queryObj","getLogsQuery","toString","er","enhanceDataFrame","getTimeSeries","configuredEsVersion","typeMap","float","double","integer","long","date","date_nanos","scaled_float","nested","shouldAddField","isMetadataField","fieldNameParts","getFieldsRecursively","subObj","isObject","properties","concat","pop","indexName","mappings","typeName","getTermsQuery","parsedQuery","getTerms","Promise","resolve","variableExists","objectContainsTemplate","isPrimitive","item","DataSourceApi","dataSourceSrv","getDataSourceSrv","dataLinkConfig","dataLink","link","datasourceUid","dsSettings","getInstanceSettings","internal","datasourceName","links","actualResponse","reverse","Select","LegacyForms","Input","FormField","indexPatternTypes","example","esVersions","ElasticDetails","onChange","className","labelWidth","inputWidth","changeHandler","placeholder","required","inputEl","intervalHandler","jsonDataChangeHandler","option","version","defaultMaxConcurrentShardRequests","getMaxConcurrenShardRequestOrDefault","aria-label","validationEvents","EventsWithValidation","onBlur","regexValidation","tooltip","currentTarget","newInterval","startsWith","newDatabase","LogsConfig","Switch","getStyles","stylesFactory","firstRow","css","nameField","regexField","DataLink","onDelete","suggestions","styles","useState","showInternalLink","setShowInternalLink","previousUid","usePrevious","useEffect","useInternalLink","variant","icon","onClick","preventDefault","newValue","labelClass","checked","DataSourcePicker","tracing","ds","uid","current","theme","infoText","spacing","md","colors","textWeak","sm","DataLinks","useTheme","newField","newDataLinks","splice","DataLinkBuiltInVars","valueRaw","documentation","origin","VariableOrigin","Value","useStatelessReducer","state","reducer","useCallback","action","DispatchContext","createContext","useDispatch","dispatch","useContext","Error","queryReducer","prevQuery","aliasPatternReducer","prevAliasPattern","aliasPattern","metricToRemove","metricsToRemove","getChildren","children","flatMap","child","resultingMetrics","toRemove","newMetric","newSettings","settingName","isMetricAggregationWithMeta","attribute","newAgg","lastAgg","newType","DatasourceContext","QueryContext","ElasticsearchProvider","reducers","onRunQuery","onStateChange","metricsReducer","bucketAggsReducer","newState","Provider","useQuery","useDatasource","hidden","color","textFaint","changeMetricField","changeMetricSetting","SROnly","IconButton","iconName","buttonProps","cx","aria-hidden","AddRemove","onAdd","onRemove","elements","noWrap","toOption","MetricPicker","pipelineVariable","newName","SettingField","uniqueId","defaultValue","BucketScriptSettingsEditor","previousMetrics","upperStateDispatch","width","pipelineVar","renamePipelineVariable","changePipelineVariableMetric","removePipelineVariable","segmentStyles","wrapper","settingsWrapper","xs","button","SettingsEditorContainer","open","setOpen","aria-expanded","MovingAverageSettingsEditor","predict","isEWMAMovingAverage","alpha","minimize","isHoltMovingAverage","beta","isHoltWintersMovingAverage","gamma","period","pad","inlineFieldProps","SettingsEditor","description","precisionThreshold","precision_threshold","selectedStats","object","hasValue","Boolean","useDescription","lag","stat","changeMetricMeta","isMetricAggregationWithInlineScript","isMetricAggregationWithMissingSupport","ExtendedStatSetting","toSelectableValue","isBasicAggregation","getTypeOptions","includePipelineAggregations","maxVersion","MetricEditor","findIndex","loadOptions","QueryEditorRow","onRemoveClick","onHideClick","as","iconWrapper","surface","aria-pressed","noop","disabled","xxs","MetricAggregationsEditor","nextId","totalMetrics","changeBucketAggregationSetting","ADD_FILTER","REMOVE_FILTER","CHANGE_FILTER","addFilter","changeFilter","FiltersSettingsEditor","filtersReducer","portalOrigin","removeFilter","settingsDescription","minDocCount","orderLabel","orderByOption","metricOptions","createOrderByOptionsFromMetrics","allowCustomValue","bucketAggOptions","BucketAggregationEditor","BucketAggregationsEditor","totalBucketAggs","toId","toInt","idString","QueryEditorForm","useMemo","grow","changeQuery","ElasticAnnotationsQueryCtrl","templateUrl","plugin","DataSourcePlugin","setQueryEditor","setConfigEditor","onOptionsChange","access","severity","defaultUrl","dataSourceConfig","showAccessOptions","sigV4AuthToggleEnabled","sigV4AuthEnabled","setAnnotationQueryCtrl","RATE_RANGES","sortText","FUNCTIONS","insertText","detail","tokenizer","comment","lookbehind","inside","punctuation","greedy","function","number","ref"],"mappings":"yKA+SaA,EAA+B,SAC1CC,GAD0C,OAEDC,EAAwBD,EAAOE,MAAMC,eAEnEC,EAAwB,SACnCJ,GADmC,OAEKC,EAAwBD,EAAOE,MAAMG,eAElEC,EAA+C,SAC1DN,GAD0D,OAG1DC,EAAwBD,EAAOE,MAAMK,6BAM1BC,EAAkC,SAC7CR,GAD6C,OAEDC,EAAwBD,EAAOE,MAAMO,a,qVCzT5E,IAAMR,EAAgD,CAC3DS,MAAO,CACLC,MAAO,QACPR,eAAe,EACfE,eAAe,EACfO,iBAAiB,EACjBL,6BAA6B,EAC7BE,aAAa,EACbI,SAAS,EACTC,sBAAsB,EACtBC,SAAU,IAEZC,IAAK,CACHL,MAAO,UACPR,eAAe,EACfW,sBAAsB,EACtBF,iBAAiB,EACjBP,eAAe,EACfE,6BAA6B,EAC7BE,aAAa,EACbI,SAAS,EACTE,SAAU,IAEZE,IAAK,CACHN,MAAO,MACPR,eAAe,EACfW,sBAAsB,EACtBF,iBAAiB,EACjBP,eAAe,EACfE,6BAA6B,EAC7BE,aAAa,EACbI,SAAS,EACTE,SAAU,IAEZG,IAAK,CACHP,MAAO,MACPR,eAAe,EACfW,sBAAsB,EACtBF,iBAAiB,EACjBP,eAAe,EACfE,6BAA6B,EAC7BE,aAAa,EACbI,SAAS,EACTE,SAAU,IAEZI,IAAK,CACHR,MAAO,MACPR,eAAe,EACfW,sBAAsB,EACtBF,iBAAiB,EACjBP,eAAe,EACfE,6BAA6B,EAC7BE,aAAa,EACbI,SAAS,EACTE,SAAU,IAEZK,eAAgB,CACdT,MAAO,iBACPR,eAAe,EACfS,iBAAiB,EACjBE,sBAAsB,EACtBT,eAAe,EACfE,6BAA6B,EAC7BE,aAAa,EACbI,SAAS,EACTE,SAAU,CACRM,KAAM,CACJC,4BAA4B,EAC5BC,4BAA4B,KAIlCC,YAAa,CACXb,MAAO,cACPR,eAAe,EACfS,iBAAiB,EACjBE,sBAAsB,EACtBT,eAAe,EACfE,6BAA6B,EAC7BE,aAAa,EACbI,SAAS,EACTE,SAAU,CACRU,SAAU,CACRC,SAAU,CAAC,KAAM,KAAM,KAAM,KAAM,SAIzCC,YAAa,CACXhB,MAAO,eACPR,eAAe,EACfS,iBAAiB,EACjBP,eAAe,EACfE,6BAA6B,EAC7BE,aAAa,EACbK,sBAAsB,EACtBD,SAAS,EACTE,SAAU,IAEZa,WAAY,CACVjB,MAAO,iBACPR,eAAe,EACfE,eAAe,EACfwB,WAAY,EACZjB,iBAAiB,EACjBL,6BAA6B,EAC7BE,aAAa,EACbK,sBAAsB,EACtBD,SAAS,EACTE,SAAU,CACRU,SAAU,CACRK,MAAO,SACPC,OAAQ,KAIdC,UAAW,CAETrB,MAAO,kBACPR,eAAe,EACfE,eAAe,EACfE,6BAA6B,EAC7BO,sBAAsB,EACtBF,iBAAiB,EACjBC,SAAS,EACTJ,aAAa,EACboB,WAAY,GACZd,SAAU,IAEZkB,WAAY,CACVtB,MAAO,aACPR,eAAe,EACfE,eAAe,EACfwB,WAAY,EACZjB,iBAAiB,EACjBL,6BAA6B,EAC7BE,aAAa,EACbK,sBAAsB,EACtBD,SAAS,EACTE,SAAU,IAEZmB,YAAa,CACXvB,MAAO,oBACPR,eAAe,EACfE,eAAe,EACfwB,WAAY,EACZjB,iBAAiB,EACjBL,6BAA6B,EAC7BE,aAAa,EACbK,sBAAsB,EACtBD,SAAS,EACTE,SAAU,IAEZoB,eAAgB,CACdxB,MAAO,iBACPR,eAAe,EACfE,eAAe,EACfwB,WAAY,EACZjB,iBAAiB,EACjBL,6BAA6B,EAC7BE,aAAa,EACbK,sBAAsB,EACtBD,SAAS,EACTE,SAAU,IAEZqB,cAAe,CACbzB,MAAO,gBACPR,eAAe,EACfE,eAAe,EACfO,iBAAiB,EACjBL,6BAA6B,EAC7BsB,WAAY,EACZpB,aAAa,EACbK,sBAAsB,EACtBD,SAAS,EACTE,SAAU,CACRsB,kBAAmB,CCtLuC,CAAEC,KAAM,OAAQC,YAAa,ODyL3FC,aAAc,CACZ7B,MAAO,wBACPR,eAAe,EACfsC,gBAAgB,EAChBpC,eAAe,EACfO,iBAAiB,EACjBL,6BAA6B,EAC7BE,aAAa,EACbK,sBAAsB,EACtBD,SAAS,EACTE,SAAU,CACRU,SAAU,CACRiB,KAAM,SAIZC,SAAU,CACRhC,MAAO,WACPR,eAAe,EACfsC,gBAAgB,EAChBpC,eAAe,EACfO,iBAAiB,EACjBL,6BAA6B,EAC7BE,aAAa,EACbK,sBAAsB,EACtBD,SAAS,EACTE,SAAU,CACRU,SAAU,CACRiB,KAAM,SAIZE,KAAM,CACJjC,MAAO,OACPR,eAAe,EACfE,eAAe,EACfO,iBAAiB,EACjBL,6BAA6B,EAC7BE,aAAa,EACbK,sBAAsB,EACtBD,SAAS,EACTE,SAAU,KAaD8B,EAAmC,CAC9CjB,WAAY,CACV,CAAEjB,MAAO,SAAUmC,QAAS,GAC5B,CAAEnC,MAAO,QAASmC,QAAS,UAC3B,CAAEnC,MAAO,WACT,CAAEA,MAAO,WAAYmC,SAAS,IAEhCd,UAAW,CAAC,CAAErB,MAAO,SAAUmC,QAAS,GAAK,CAAEnC,MAAO,WACtDsB,WAAY,CAAC,CAAEtB,MAAO,SACtBuB,YAAa,CAAC,CAAEvB,MAAO,QACvBwB,eAAgB,CAAC,CAAExB,MAAO,WAC1ByB,cAAe,IEnPJW,EAAgC,CAC3C,CAAEpC,MAAO,MAAOqC,MAAO,OACvB,CAAErC,MAAO,MAAOqC,MAAO,OACvB,CAAErC,MAAO,MAAOqC,MAAO,OACvB,CAAErC,MAAO,MAAOqC,MAAO,OACvB,CAAErC,MAAO,QAASqC,MAAO,SACzB,CAAErC,MAAO,UAAWqC,MAAO,iBAC3B,CAAErC,MAAO,gBAAiBqC,MAAO,8BACjC,CAAErC,MAAO,gBAAiBqC,MAAO,+BAGtBC,EAAoD,CAC/D,CAAEtC,MAAO,SAAUqC,MAAO,UAC1B,CAAErC,MAAO,SAAUqC,MAAO,UAC1B,CAAErC,MAAO,yBAA0BqC,MAAO,QAC1C,CAAErC,MAAO,cAAeqC,MAAO,QAC/B,CAAErC,MAAO,eAAgBqC,MAAO,iBAG3B,SAASE,IAA8C,IAA7BC,EAA6B,uDAAxB,IACpC,MAAO,CAAEjD,KAAM,QAASiD,MAGnB,SAASC,IAA8C,IAA7BD,EAA6B,uDAAxB,IACpC,MAAO,CAAEjD,KAAM,iBAAkBiD,KAAI1B,SAAU,CAAE4B,SAAU,SAGtD,IAAMC,EAAiB,SAACC,EAA8BJ,GAA/B,OAC5BI,EAAQC,MAAK,SAACxD,GAAD,OAAYA,EAAOmD,KAAOA,MAElC,SAASM,EAAgBC,EAAaxD,GAC3C,OAAOwD,GAAUA,EAAOH,SAAWG,EAAOH,QAAQI,MAAK,SAACC,GAAD,OAAYA,EAAE1D,OAASA,K,85CCuD3D2D,E,YAKnB,WAAYC,EAA+BC,GAAqB,M,IAAA,O,4FAAA,S,EAC9D,U,EAAA,kB,8CACKD,WAAaA,EAElBE,OAAOC,OAAP,KAAoBF,GAJ0C,E,qSAYlDG,EAAsBC,GAA8C,WAChF,MAAuB,eAAnBA,GAAsD,SAAnBA,EAC9BD,EAAQE,KAAI,SAACC,GAClB,IACMC,EAlDd,SAA+BC,GAC7B,IAAIC,EAA4B,GADmC,uBAEnE,YAA6BD,EAA7B,+CAA+C,KAAtCE,EAAsC,QAC7C,OAAQA,EAAiB,IACvB,IAAK,IACHD,EAA0BE,KAAKD,EAAiB,GAAK,IAAMA,EAAiB,IAC5E,MAEF,IAAK,KACHD,EAA0BE,KAAK,OAASD,EAAiB,GAAK,IAAMA,EAAiB,IACrF,MAEF,IAAK,KACHD,EAA0BE,KACxBD,EAAiB,GAAK,KAAOA,EAAiB,GAAGE,UAAU,EAAGF,EAAiB,GAAGG,OAAS,GAAK,KAElG,MAEF,IAAK,KACHJ,EAA0BE,KACxB,OAASD,EAAiB,GAAK,KAAOA,EAAiB,GAAGE,UAAU,EAAGF,EAAiB,GAAGG,OAAS,GAAK,OApB9C,kFA0BnE,OAAOJ,EAA0BK,KAAK,SAwBnBC,CA9FrB,SAAiCC,GAC/B,IAAMC,EAAqB,GAC3B,IAAKD,GAAkC,IAArBA,EAAUH,OAC1B,OAAOI,EAET,IAAMC,EAASC,IAAMC,SAASJ,EAAWK,KACnCC,EAjBR,SAA2BN,EAAmBE,GAC5C,IAAII,EAAiB,GACrB,IAAK,IAAIC,KAAQL,EACf,GAA4B,iBAAjBA,EAAOK,GAAoB,CACpCD,EAAiBJ,EAAOK,GACxB,MAGJ,OAAOD,EASgBE,CAAkBR,EAAWE,GAKpD,IAAK,IAAIK,KAJLD,GAAkBA,EAAeT,OAAS,GAC5CI,EAAON,KAAK,CAAC,WAAY,IAAK,IAAMW,EAAiB,MAGtCJ,EACf,GAAIA,EAAOK,aAAiBE,QAAO,CACjC,IAAIC,EAAeR,EAAOK,GAC1B,GAAmB,mBAAfG,EAAMvF,KAA2B,CACnC,IAAIwF,EAAW,GACXC,EAAa,GACbC,EAAgB,GAChBC,EAAuBJ,EAAMK,QACjC,IAAK,IAAIC,KAAgBF,EACvB,GAA2C,iBAAhCA,EAAcE,GAA4B,CACnD,IAAIC,EAEe,OADnBA,EAAaH,EAAcE,KACc,OAAfC,GAAsC,OAAfA,GAAsC,OAAfA,IACtEJ,EAAgBI,QAEb,GAAIH,EAAcE,aAAyBP,QAChD,OAAQK,EAAcE,GAAc7F,MAClC,IAAK,YACHwF,EAAWG,EAAcE,GAAcD,QACvC,MACF,IAAK,cACHH,EAAaE,EAAcE,GAAcD,QACzCd,EAAON,KAAK,CAACgB,EAAUE,EAAeD,MAQpD,OAAOX,EAqDkCiB,CADb5B,EACqDC,OAC3E,MAAO,CACL4B,aAAa,EACb3C,QAAS,CACP,CACEJ,GAAI,IACJjD,KAAM,SAGViG,WAAY,CAAC,EAAD,GAAM/C,EAAiB,KAAvB,CAA6BgD,MAAO,EAAKtC,WAAWuC,aAChEhC,MAAOC,EACPgC,MAAOjC,EAAMiC,UAIZpC,EAAQE,KAAI,SAACC,GAClB,MAAO,CACLiC,MAAOjC,EAAMiC,e,8BAtCsCC,oB,06CCzFpD,IAAMC,EAAiB,SAACxG,GAC7B,OAAKD,EAA6BC,GAKlC,UAAUC,EAAwBD,EAAOE,MAAMS,MAA/C,YAAwDX,EAAOoG,OAJtDnG,EAAwBD,EAAOE,MAAMS,OAanC8F,EAAc,SAAdA,EAAkBC,GAAJ,OACzB1C,OAAO2C,QAAQD,GAAKE,QAAO,SAACC,EAAD,GAAuB,aAAhBC,EAAgB,KAAX9D,EAAW,KAEhD,GAAa,MAATA,EACF,YAAY6D,GAId,GAAIE,MAAMC,QAAQhE,IAA2B,IAAjBA,EAAM4B,OAChC,YAAYiC,GAId,GAAsB,KAAlB7D,aAAA,EAAAA,EAAO4B,QACT,YAAYiC,GAId,IAAKE,MAAMC,QAAQhE,IAA2B,WAAjB,EAAOA,GAAoB,CACtD,IAAMiE,EAAWR,EAAYzD,GAE7B,OAAqC,IAAjCgB,OAAOkD,KAAKD,GAAUrC,OACxB,KAAYiC,GAGd,KAAYA,EAAZ,KAAkBC,EAAMG,IAG1B,YACKJ,EADL,KAEGC,EAAM9D,MAER,KAOQmE,EAA2B,SAACC,GACvC,IAAMC,EAAkBD,EAAQE,MAAM,UACtC,OAAOD,EAAkBA,EAAgB,QAAK,G,m1CC1CzC,IAAME,EAAb,WACE,WAAoBC,EAAuCC,GAAe,Y,4FAAA,cAAtDD,UAAsD,KAAfC,WAAe,KAye1EC,wBAA0B,WAGxB,IAFA,IAAMC,EAAa,GAEVC,EAAI,EAAGA,EAAI,EAAKH,SAASI,UAAUjD,OAAQgD,IAAK,CACvD,IAAMH,EAAW,EAAKA,SAASI,UAAUD,GACnClE,EAAS,EAAK8D,QAAQI,GAE5B,GAAIH,EAASK,MACX,MAAM,EAAKC,4BAA4B,EAAKN,SAAUA,EAASK,OAOjE,GAJIL,EAASO,MAAQP,EAASO,KAAKA,KAAKpD,OAAS,GAC/C,EAAKqD,YAAYR,EAASO,KAAML,EAAYjE,GAG1C+D,EAASS,aAAc,CACzB,IAAMA,EAAeT,EAASS,aACxBxE,EAAS,EAAK8D,QAAQI,GACtBO,EAAuB,GACvBC,EAAQ,IAAIC,IAClBD,EAAM9B,MAAQ5C,EAAO4C,MAErB,EAAKgC,eAAeJ,EAAcxE,EAAQyE,EAAeC,EAAO,GAAI,GACpE,EAAKG,eAAeJ,EAAezE,GACnC,EAAK8E,WAAWL,EAAezE,GAE/B,IAAK,IAAI+E,EAAI,EAAGA,EAAIN,EAAcvD,OAAQ6D,IACxCd,EAAWjD,KAAKyD,EAAcM,IAG5BL,EAAMM,KAAK9D,OAAS,GACtB+C,EAAWjD,KAAK0D,IAKtB,MAAO,CAAEO,KAAMhB,IA5gBfiB,KAAKpB,QAAUA,EACfoB,KAAKnB,SAAWA,E,UAHpB,O,EAAA,G,EAAA,sCAMiBoB,EAAYnF,EAA4BiE,EAAiBmB,GAGtE,IAFA,IAAIC,EAEKN,EAAI,EAAGA,EAAI/E,EAAOH,QAASqB,OAAQ6D,IAAK,CAC/C,IAAMzI,EAAS0D,EAAOH,QAASkF,GAC/B,IAAIzI,EAAOgJ,KAIX,OAAQhJ,EAAOE,MACb,IAAK,QACH6I,EAAY,CAAEE,WAAY,GAAIjJ,OAAQ,QAAS8I,QAAOxC,MAAO5C,EAAO4C,OACpE,IAAK,IAAIsB,EAAI,EAAGA,EAAIiB,EAAMK,QAAQtE,OAAQgD,IAAK,CAC7C,IAAMuB,EAASN,EAAMK,QAAQtB,GACvB5E,EAAQmG,EAAOC,UACrBL,EAAUE,WAAWvE,KAAK,CAAC1B,EAAOmG,EAAOrC,MAE3Ca,EAAWjD,KAAKqE,GAChB,MAEF,IAAK,cACH,GAA6B,IAAzBF,EAAMK,QAAQtE,OAChB,MAGF,IACMpD,EADcqH,EAAMK,QAAQ,GACFlJ,EAAOmD,IAAIkG,OAE3C,IAAK,IAAMC,KAAkB9H,EAAa,CACxCuH,EAAY,CACVE,WAAY,GACZjJ,OAAQ,IAAMsJ,EACdR,MAAOA,EACP1C,MAAOpG,EAAOoG,MACdE,MAAO5C,EAAO4C,OAGhB,IAAK,IAAIsB,EAAI,EAAGA,EAAIiB,EAAMK,QAAQtE,OAAQgD,IAAK,CAC7C,IAAMuB,EAASN,EAAMK,QAAQtB,GACvByB,EAASF,EAAOnJ,EAAOmD,IAAIkG,OACjCN,EAAUE,WAAWvE,KAAK,CAAC2E,EAAOC,GAAiBH,EAAOrC,MAE5Da,EAAWjD,KAAKqE,GAGlB,MAEF,IAAK,iBACH,IAAK,IAAMQ,KAAYvJ,EAAOqB,KAC5B,GAAKrB,EAAOqB,KAAKkI,GAAjB,CAIAR,EAAY,CACVE,WAAY,GACZjJ,OAAQuJ,EACRT,MAAOA,EACP1C,MAAOpG,EAAOoG,MACdE,MAAO5C,EAAO4C,OAGhB,IAAK,IAAIsB,EAAI,EAAGA,EAAIiB,EAAMK,QAAQtE,OAAQgD,IAAK,CAC7C,IAAMuB,EAASN,EAAMK,QAAQtB,GACvB4B,EAAQL,EAAOnJ,EAAOmD,IAG5BqG,EAAMjI,2BAA6BiI,EAAMC,qBAAqBC,MAC9DF,EAAMlI,2BAA6BkI,EAAMC,qBAAqBE,MAE9DZ,EAAUE,WAAWvE,KAAK,CAAC8E,EAAMD,GAAWJ,EAAOrC,MAGrDa,EAAWjD,KAAKqE,GAGlB,MAEF,QACEA,EAAY,CACVE,WAAY,GACZjJ,OAAQA,EAAOE,KACf0J,SAAU5J,EAAOmD,GACjB2F,MAAOA,EACPxC,MAAO5C,EAAO4C,OAGZvG,EAA6BC,KAC/B+I,EAAU3C,MAAQpG,EAAOoG,OAG3B,IAAK,IAAIwB,EAAI,EAAGA,EAAIiB,EAAMK,QAAQtE,OAAQgD,IAAK,CAC7C,IAAMuB,EAASN,EAAMK,QAAQtB,GACvB5E,EAAQmG,EAAOnJ,EAAOmD,SAEd0G,IAAV7G,IACEA,EAAM8G,iBACRf,EAAUE,WAAWvE,KAAK,CAAC1B,EAAM8G,iBAAkBX,EAAOrC,MAE1DiC,EAAUE,WAAWvE,KAAK,CAAC1B,EAAMA,MAAOmG,EAAOrC,OAIrDa,EAAWjD,KAAKqE,OA5G1B,6CAoHIF,EACAkB,EACArG,EACA0E,EACAU,GAGA,GAA6B,IAAzBV,EAAM4B,QAAQpF,OAAc,4BAC9B,YAAsBqF,IAAE/C,KAAK4B,GAA7B,+CAAqC,KAA1BoB,EAA0B,QACnC9B,EAAM+B,UAAU,CAAEC,KAAMF,EAASG,YAAY,KAFjB,kFAI9BjC,EAAM+B,UAAU,CAAEC,KAAML,EAAO3D,MAAOiE,YAAY,IAIpD,IAAMC,EAAiB,SAACjB,EAAekB,EAAoBvH,GACzDoF,EAAM+B,UAAU,CAAEC,KAAMG,IACxBlB,EAAO3E,KAAK1B,IAERkG,EAAUe,IAAEjD,QAAQ6B,EAAMK,SAAWL,EAAMK,QAAU,CAACL,EAAMK,SAdlE,uBAeA,YAAqBA,EAArB,+CAA8B,KAAnBC,EAAmB,QACtBE,EAAS,GADa,uBAG5B,YAAyBY,IAAEZ,OAAOP,GAAlC,+CAA0C,KAA/B0B,EAA+B,QACxCnB,EAAO3E,KAAK8F,IAJc,kFAQ5BnB,EAAO3E,KAAKyE,EAAOrC,KARS,2BAU5B,aAAqBpD,EAAOH,SAAW,IAAvC,+CAA2C,KAAhCvD,EAAgC,QACzC,OAAQA,EAAOE,MACb,IAAK,QACHoK,EAAejB,EAAQT,KAAK6B,cAAczK,EAAOE,MAAOiJ,EAAOC,WAC/D,MAEF,IAAK,iBACH,IAAK,IAAMG,KAAYvJ,EAAOqB,KAC5B,GAAKrB,EAAOqB,KAAKkI,GAAjB,CAIA,IAAMC,EAAQL,EAAOnJ,EAAOmD,IAE5BqG,EAAMjI,2BAA6BiI,EAAMC,qBAAqBC,MAC9DF,EAAMlI,2BAA6BkI,EAAMC,qBAAqBE,MAE9DW,EAAejB,EAAQT,KAAK6B,cAAclB,GAAmCC,EAAMD,IAErF,MAEF,IAAK,cACH,IAAM/H,EAAc2H,EAAOnJ,EAAOmD,IAAIkG,OAEtC,IAAK,IAAMC,KAAkB9H,EAC3B8I,EAAejB,EAAD,WAAaC,EAAb,YAA+BtJ,EAAOoG,OAAS5E,EAAY8H,IAE3E,MAEF,QACE,IASuC,EATnCiB,EAAa3B,KAAK6B,cAAczK,EAAOE,MACtB+J,IAAES,OAAOhH,EAAOH,QAAS,CAAErD,KAAMF,EAAOE,OAG5C0E,OAAS,IACpB7E,EAA6BC,KAC/BuK,GAAc,IAAMvK,EAAOoG,OAGT,kBAAhBpG,EAAOE,OAETqK,GAAa,UAAAvK,EAAOyB,gBAAP,eAAiBkJ,SAAU,KAI5CL,EAAejB,EAAQkB,EAAYpB,EAAOnJ,EAAOmD,IAAIH,SAvD/B,kFA6D5BoF,EAAMM,KAAKhE,KAAK2E,IA5ElB,qFAzHJ,qCA2MiBuB,EAAWlH,EAA4BiE,EAAiBS,EAAmBU,EAAY+B,GACpG,IAAI1B,EAAQY,EAAalB,EAAOiC,EAC1BC,EAAWrH,EAAOyC,WAAYvB,OAAS,EAE7C,IAAKkG,KAASF,EAIZ,GAHAb,EAASE,IAAEzG,KAAKE,EAAOyC,WAAY,CAAEhD,GAAI2H,IACzCjC,EAAQ+B,EAAKE,GAERf,EAIL,GAAIc,IAAUE,EACQ,mBAAhBhB,EAAO7J,KACT0I,KAAKoC,eAAenC,EAAOnF,EAAQiE,EAAYmB,GAE/CF,KAAKqC,uBAAuBpC,EAAOkB,EAAQrG,EAAQ0E,EAAOU,QAG5D,IAAK,IAAMoC,KAAarC,EAAMK,QAC5BC,EAASN,EAAMK,QAAQgC,GACvBpC,EAAQmB,IAAEkB,MAAMrC,QACG,IAAfK,EAAOrC,IACTgC,EAAMiB,EAAO3D,OAAS+C,EAAOrC,IAE7BgC,EAAK,OAAaoC,EAEhB/B,EAAOiC,gBACTtC,EAAMiB,EAAO3D,OAAS+C,EAAOiC,eAE/BxC,KAAKN,eAAea,EAAQzF,EAAQiE,EAAYS,EAAOU,EAAO+B,EAAQ,KAzOhF,oCA+OwB7K,GACpB,IAAMqL,EAAYrH,OAAO2C,QAAQ1G,GAC9ByK,QAAO,+BAAmB1K,KAC1BoE,KAAI,6CAAuB,GAE9B,GAAIiH,EACF,OAAOA,EAAU1K,MAGnB,IAAM2K,EAAeC,EAAuB/H,MAAK,SAACgI,GAAD,OAAOA,EAAExI,QAAUhD,KACpE,OAAIsL,EACKA,EAAa3K,MAGfX,IA7PX,oCAgQwByL,EAAa/H,EAA4BgI,GAC7D,IAAInB,EAAa3B,KAAK6B,cAAcgB,EAAOzL,QAE3C,GAAI0D,EAAOiI,MAGT,OAAOjI,EAAOiI,MAAMC,QAFN,uBAEqB,SAACtE,EAAYuE,EAASC,GACvD,IAAMC,EAAQF,GAAMC,EAEpB,OAA+B,IAA3BC,EAAMC,QAAQ,SACTP,EAAO3C,MAAMiD,EAAMpH,UAAU,SAEV,IAAxB8G,EAAO3C,MAAMiD,GACRN,EAAO3C,MAAMiD,GAER,WAAVA,EACKxB,EAEK,UAAVwB,EACKN,EAAOrF,OAAS,GAGlBkB,KAIX,GAA2BmE,EAAOzL,UHhQf6C,EGiQjB,GAAI4I,EAAOzL,QH9PV,SAA8CiM,GACnD,QAAShM,EAAwBgM,GAAY1L,4BG6PpBgL,CAA8CE,EAAOzL,QAAS,CACjF,IAAMkM,EAAWjC,IAAEzG,KAAKE,EAAOH,QAAS,CAAEJ,GAAIsI,EAAO7B,WACrD,GAAIsC,GAAOA,EAAIzK,SAASkJ,OAAQ,CAC9BJ,EAAa2B,EAAIzK,SAASkJ,OADI,2BAG9B,YAAiBuB,EAAI7J,kBAArB,+CAAwC,KAA7B8J,EAA6B,QAChCC,EAAkBnC,IAAEzG,KAAKE,EAAOH,QAAS,CAAEJ,GAAIgJ,EAAG5J,cACpD6J,IACF7B,EAAaA,EAAWqB,QAAQ,UAAYO,EAAG7J,KAAMkE,EAAe4F,MAN1C,wFAU9B7B,EAAa,YAEV,CACL,IAAM6B,EAAkBnC,IAAEzG,KAAKE,EAAOH,QAAS,CAAEJ,GAAIsI,EAAOrF,QACxDgG,EACF7B,GAAc,IAAM/D,EAAe4F,GAEnC7B,EAAa,aAGRkB,EAAOrF,QAChBmE,GAAc,IAAMkB,EAAOrF,OAI7B,GAAwB,IADP6D,IAAE/C,KAAKuE,EAAO3C,OAClBlE,OACX,OAAO2F,EAGT,IAAIjI,EAAO,GACX,IAAK,IAAM+J,KAAYZ,EAAO3C,MAC5BxG,GAAQmJ,EAAO3C,MAAMuD,GAAY,IAGnC,OAAwB,IAApBX,EACKpJ,EAAKgK,OAGPhK,EAAKgK,OAAS,IAAM/B,IAnU/B,iCAsUa5C,EAAiBjE,GAG1B,IAFA,IAAMgI,EAAkBzB,IAAEsC,KAAKtC,IAAE7F,IAAIuD,EAAY,WAAW/C,OAEnDgD,EAAI,EAAGA,EAAID,EAAW/C,OAAQgD,IAAK,CAC1C,IAAM6D,EAAS9D,EAAWC,GAC1B6D,EAAO/H,OAASkF,KAAK4D,cAAcf,EAAQ/H,EAAQgI,MA3UzD,kCA+Uc1D,EAA8CL,EAAmBjE,GAC3E,IAUI2I,EAAUI,EAAKC,EAAU9E,EAVvB+E,EAAkC,iBAAf3E,EAAK4E,MAAqB5E,EAAK4E,MAAQ5E,EAAK4E,MAAM5J,MAErEyI,EAAc,CAClB/H,OAAQA,EAAO4C,MACfpG,KAAM,OACNoG,MAAO5C,EAAO4C,MACd2C,WAAY,GACZ2D,MAAOD,EACPtC,YAAY,GAId,IAAKzC,EAAI,EAAGA,EAAII,EAAKA,KAAKpD,OAAQgD,IAAK,CASrC,GAPA8E,EAAM,CACJG,KAFFJ,EAAMzE,EAAKA,KAAKJ,IAELiF,IACTC,MAAOL,EAAIK,MACXC,OAAQN,EAAIM,OACZC,KAAMP,EAAIO,MAGRP,EAAIQ,QACN,IAAKZ,KAAYI,EAAIQ,QACnBP,EAAIL,GAAYI,EAAIQ,QAAQZ,GAIhC,IAAKA,KAAYI,EAAIS,OACnBR,EAAIL,GAAYI,EAAIS,OAAOb,GAE7BZ,EAAOxC,WAAWvE,KAAKgI,GAGzB/E,EAAWjD,KAAK+G,KAjXpB,qCAoXiBvD,EAAmBxE,GAChC,IAAMyJ,EAAiBlD,IAAEzG,KAAKE,EAAOyC,WAAY,CAAEjG,KAAM,mBAGzD,GAD+BiN,GAAaA,EAAU1L,UAAY0L,EAAU1L,SAAS2L,UACzD,CAC1B,IAAMd,EAAOa,EAAU1L,SAAS2L,UAChC,IAAK,IAAM9H,KAAQ4C,EAAc,CAC/B,IAAMmF,EAASnF,EAAa5C,GACxB+H,EAAOpE,WAAWrE,OAAgB,EAAP0H,IAC7Be,EAAOpE,WAAaoE,EAAOpE,WAAWqE,MAAMhB,EAAMe,EAAOpE,WAAWrE,OAAS0H,QA7XvF,kDAmY8B7E,EAAe8F,GACzC,IAAMC,EAAc,GAYpB,OAXAA,EAAO7E,KAAO8E,KAAKC,UAAUH,EAAK,KAAM,GACpCA,EAAII,YAAcJ,EAAII,WAAW/I,OAAS,GAAK2I,EAAII,WAAW,GAAGC,OACnEJ,EAAOK,QAAUN,EAAII,WAAW,GAAGC,OAEnCJ,EAAOK,QAAUN,EAAIK,QAAU,iCAG7BnG,EAASqG,WACXN,EAAOO,OAAStG,EAASqG,UAGpBN,IAhZX,sCAoZI,OAAI5E,KAAKpB,QAAQ7D,MAAK,SAACD,GAAD,uBAAYA,EAAOH,eAAnB,aAAY,EAAgBI,MAAK,SAAC3D,GAAD,MAA4B,aAAhBA,EAAOE,WACjE0I,KAAKoF,6BAA4B,GAEnCpF,KAAKlB,4BAvZhB,8BA0ZUuG,EAA0BC,GAChC,OAAOtF,KAAKoF,6BAA4B,EAAMC,EAAiBC,KA3ZnE,kDA+ZIC,EACAF,EACAC,GAIA,IAFA,IAAME,EAAyB,GAEtBC,EAAI,EAAGA,EAAIzF,KAAKnB,SAASI,UAAUjD,OAAQyJ,IAAK,CACvD,IAAM5G,EAAWmB,KAAKnB,SAASI,UAAUwG,GACzC,GAAI5G,EAASK,MACX,MAAMc,KAAKb,4BAA4Ba,KAAKnB,SAAUA,EAASK,OAGjE,GAAIL,EAASO,MAAQP,EAASO,KAAKA,KAAKpD,OAAS,EAAG,OACtB0J,EAAY7G,EAASO,KAAKA,MAA9CuG,EAD0C,EAC1CA,UAAWC,EAD+B,EAC/BA,KACnB,GAAIA,EAAK5J,OAAS,EAAG,CACnB,IAAI6G,EAASgD,EACXF,EACA3F,KAAKpB,QAAQ,GAAGnB,UAChB8H,EACAF,EACAC,GANiB,uBAUnB,YAAkBM,EAAlB,+CAAwB,KAAb9B,EAAa,QAClBwB,IAGFxB,EAAG,MAAYA,EAAIwB,IAGrBzC,EAAOiD,IAAIhC,IAjBM,kFAmBfyB,IACF1C,EAASkD,EAA8BlD,EAAQ,SAEjD,IAAM/H,EAASkF,KAAKpB,QAAQ6G,GAC5B5C,EAAOnF,MAAQ5C,EAAO4C,MACtB8H,EAAU1J,KAAK+G,IAInB,GAAIhE,EAASS,aAAc,CACzB,IAAMA,EAAeT,EAASS,aACxBxE,EAASkF,KAAKpB,QAAQ6G,GACtBlG,EAAuB,GACvBC,EAAQ,IAAIC,IAMlB,GAJAO,KAAKN,eAAeJ,EAAcxE,EAAQyE,EAAeC,EAAO,GAAI,GACpEQ,KAAKL,eAAeJ,EAAezE,GACnCkF,KAAKJ,WAAWL,EAAezE,GAE3B0E,EAAMM,KAAK9D,OAAS,EAAG,CACzB,IAAM6G,EAASmD,sBAAYxG,GAC3BqD,EAAOnF,MAAQ5C,EAAO4C,MACtB8H,EAAU1J,KAAK+G,GAGjB,IAAK,IAAIhD,EAAI,EAAGA,EAAIN,EAAcvD,OAAQ6D,IAAK,CAC7C,IAAIgD,EAASmD,sBAAYzG,EAAcM,IAGnC0F,IACF1C,EAASkD,EAA8BlD,EAAQ,UAGjDA,EAAOnF,MAAQ5C,EAAO4C,MACtB8H,EAAU1J,KAAK+G,KAKrB,MAAO,CAAE9C,KAAMyF,Q,2BAvenB,KAgiBME,EAAc,SAACtG,GACnB,IAAMwG,EAAc,GAGhBD,EAAsB,GAJoE,uBAM9F,YAAkBvG,EAAlB,+CAAwB,CAWtB,IAXsB,IAAbyE,EAAa,QAChBoC,EAAYpC,EAAIQ,QAAU6B,kBAAQrC,EAAIQ,SAAW,GACjDP,EAAM,GACVG,IAAKJ,EAAII,IACTC,MAAOL,EAAIK,MACXC,OAAQN,EAAIM,OACZC,KAAMP,EAAIO,KACVC,QAAS,KAAK4B,IACXA,GAGL,MAAuB7K,OAAOkD,KAAKwF,GAAnC,eAAyC,CAApC,IAAML,EAAQ,MACoB,IAAjCkC,EAAUvC,QAAQK,IACpBkC,EAAU7J,KAAK2H,GAInBmC,EAAK9J,KAAKgI,IAvBkF,kFA2B9F,OADA6B,EAAUvB,OACH,CAAEwB,OAAMD,cAWXE,EAAuB,SAC3BF,EACAlI,EACA8H,EACAF,EACAC,GAEA,IAAMzC,EAAS,IAAIsD,mBAAiB,CAAE7B,OAAQ,KAE9CzB,EAAOuD,SAAS,CACdjB,OAAQ,CACN1D,YAAY,GAEd/H,KAAM+D,EACNnG,KAAM+O,YAAUC,OAGdjB,IACFxC,EAAOuD,SAAS,CACd1M,KAAM2L,EACN/N,KAAM+O,YAAUE,SACfC,MAAQ,SAACC,GACV,OAAOA,GAAK,KAIZnB,IACFzC,EAAOuD,SAAS,CACd1M,KAAM,QACNpC,KAAM+O,YAAUE,SACfC,MAAQ,SAACC,GACV,OAAOA,GAAK,KAIhB,IAAMC,EAAa7D,EAAOyB,OAAO9I,KAAI,SAACgC,GAAD,OAAWA,EAAM9D,QA7BjC,uBA+BrB,YAAuBiM,EAAvB,+CAAkC,KAAvBlC,EAAuB,QAE5BiD,EAAWC,SAASlD,KAInB8B,GAA8B,YAAb9B,KAItBZ,EAAOuD,SAAS,CACdjB,OAAQ,CACN1D,YAAY,GAEd/H,KAAM+J,EACNnM,KAAM+O,YAAUE,SACfC,MAAQ,SAACC,GACV,OAAOA,GAAK,MAhDK,kFAoDrB,OAAO5D,GAGHkD,EAAgC,SAAClD,EAAavL,GAClD,IAAIsP,EAAI/D,EAOR,OANA+D,EAAEnO,KACGmO,EAAEnO,KAAKoO,2BAA6BvP,EACpCsP,EAAEnO,KAAO,CACRoO,2BAA4BvP,GAG3BsP,G,sKCppBT,IAAME,EAA2B,CAC/BC,OAAQ,CAAEC,QAAS,OAAQC,OAAQ,SACnCC,MAAO,CAAEF,QAAS,MAAOC,OAAQ,QACjCE,OAAQ,CAAEH,QAAS,OAAQC,OAAQ,SACnCG,QAAS,CAAEJ,QAAS,QAASC,OAAQ,UACrCI,OAAQ,CAAEL,QAAS,OAAQC,OAAQ,UAGxBK,EAAb,WAGE,WAAoBC,EAAyB9M,I,4FAAqC,cAA9D8M,UAA8D,KAArC9M,WAAqC,KAF1E+M,WAAa,K,UADvB,O,EAAA,G,EAAA,0CAMI,OAAIxH,KAAKvF,SACAgN,kBAAQC,OAAO1H,KAAKwH,YAAYG,OAAO3H,KAAKuH,SAE5CvH,KAAKuH,UATlB,mCAaeK,EAAiBC,GAM5B,IAAK7H,KAAKvF,SACR,OAAOuF,KAAKuH,QAad,IAVA,IAAMO,EAAehB,EAAY9G,KAAKvF,UAChCsN,EAAQC,mBAASJ,GAAQI,mBAASH,GAAI/B,KANxB,EAM0CgC,EAAab,SACxEgB,MACAjB,QAAQc,EAAad,SAClBkB,EAAWF,mBAASH,GAAMG,mBAASJ,GAAM9B,IAT3B,EAS4CgC,EAAab,SAC1EgB,MACAjB,QAAQc,EAAad,SACrBmB,UACGC,EAAY,GAEXL,EAAMI,WAAaD,GACxBE,EAAUtM,KAAKiM,EAAML,OAAO1H,KAAKwH,YAAYG,OAAO3H,KAAKuH,UACzDQ,EAAMjC,IAAI,EAAGgC,EAAab,QAG5B,OAAOmB,O,2BAtCX,K,q/BCHO,IAAMC,GAAb,WAIE,WAAYC,I,4FAAmD,SAC7DtI,KAAKvC,UAAY6K,EAAQ7K,UACzBuC,KAAKuI,UAAYD,EAAQC,U,UAN7B,O,EAAA,G,EAAA,wCAUI,IAAMzG,EAAc,GAOpB,OANAA,EAAO9B,KAAKvC,WAAa,CACvB+K,IAAK,YACLC,IAAK,UACLd,OAAQ,gBAGH7F,IAjBX,oCAoBgBX,EAAeuH,EAAwC5N,GAA4B,MAG/F,GAFA4N,EAAUC,MAAQ,CAAEnL,MAAO2D,EAAO3D,QAE7B2D,EAAOtI,SACV,OAAO6P,EAIT,IAAM5O,GAAO,UAAAqH,EAAOtI,gBAAP,eAAiBiB,MAAO8O,SAASzH,EAAOtI,SAASiB,KAAM,IAAM,IAG1E,GAFA4O,EAAUC,MAAM7O,KAAgB,IAATA,EAAa,IAAMA,OAEV,IAA5BqH,EAAOtI,SAAS2F,QAAoB,CACtCkK,EAAUC,MAAME,MAAQ,GACQ,UAA5B1H,EAAOtI,SAAS2F,SAAuBwB,KAAKuI,WAAa,GAC3DG,EAAUC,MAAME,MAAhB,KAAgC1H,EAAOtI,SAASgQ,MAEhDH,EAAUC,MAAME,MAAM1H,EAAOtI,SAAS2F,SAAW2C,EAAOtI,SAASgQ,MAInE,IAAM7H,EAAWzC,EAAyB4C,EAAOtI,SAAS2F,SAC1D,GAAIwC,EAAU,4BACZ,aAAmBlG,EAAOH,SAAW,IAArC,+CAAyC,KAAhCvD,EAAgC,QACvC,GAAIA,EAAOmD,KAAOyG,EAAU,CACN,UAAhB5J,EAAOE,KACToR,EAAUC,MAAME,MAAQ,CAAEC,OAAQ3H,EAAOtI,SAASgQ,OACzC1R,EAA6BC,KACtCsR,EAAU1G,KAAO,GACjB0G,EAAU1G,KAAK5K,EAAOmD,IAAtB,MACGnD,EAAOE,KAAO,CAAEkG,MAAOpG,EAAOoG,SAGnC,QAXQ,oFA6BhB,YAZsC,IAAlC2D,EAAOtI,SAASkQ,gBAClBL,EAAUC,MAAMI,cAAgBH,SAASzH,EAAOtI,SAASkQ,cAAe,IAEpEC,MAAMN,EAAUC,MAAMI,iBACxBL,EAAUC,MAAMI,cAAgB5H,EAAOtI,SAASkQ,gBAIhD5H,EAAOtI,SAASoQ,UAClBP,EAAUC,MAAMM,QAAU9H,EAAOtI,SAASoQ,SAGrCP,IAtEX,0CAyEsBvH,GAClB,IAAMlB,EAAa,GACbpH,EAAWsI,EAAOtI,UAAY,GAepC,OAdAoH,EAAMxF,SAAW5B,EAAS4B,SAC1BwF,EAAMzC,MAAQwC,KAAKvC,UACnBwC,EAAM8I,cAAgBlQ,EAASkQ,eAAiB,EAChD9I,EAAMiJ,gBAAkB,CAAE3Q,IAAK,YAAaD,IAAK,WACjD2H,EAAM0H,OAAS,eAES,KAApB9O,EAASsQ,SACXlJ,EAAMkJ,OAAStQ,EAASsQ,QAGH,SAAnBlJ,EAAMxF,WACRwF,EAAMxF,SAAW,eAGZwF,IA1FX,sCA6FkBkB,GACd,IAAMlB,EAAa,GACbpH,EAAWsI,EAAOtI,UAAY,GAKpC,OAJAoH,EAAMxF,SAAW5B,EAAS4B,SAC1BwF,EAAMzC,MAAQ2D,EAAO3D,MACrByC,EAAM8I,cAAgBlQ,EAASkQ,eAAiB,EAEzC9I,IApGX,oCAuGgBkB,GACZ,IAAMiI,EAA4F,GADrE,uBAG7B,cAA6B,UAAAjI,EAAOtI,gBAAP,eAAiBwQ,UAAW,IAAzD,+CAA6D,iBAAlD5N,EAAkD,EAAlDA,MACT2N,EAD2D,EAA3CrR,OACG0D,GAAS,CAC1B6N,aAAc,CACZ7N,MAAOA,EACP8N,kBAAkB,KAPK,kFAY7B,OAAOH,IAnHX,oCAsHgB3N,EAAY3B,GAiBxB,OAhBA2B,EAAM3B,KAAOA,EACb2B,EAAM2I,KAAO,CAAC,MAETpE,KAAKvC,UAAY,CAAEoL,MAAO,OAAQW,cAAe,YAEpD,CACEC,KAAM,CAAEZ,MAAO,UAKf7I,KAAKuI,UAAY,IACnB9M,EAAM6I,OAAS,CAAC,IAAK,YAGvB7I,EAAMiO,cAAgB,GACfjO,IAvIX,sCA0IkBA,EAAYkO,GAK1B,IAAI3K,EAAG8C,EAAQ8H,EAAgBC,EAJ/B,GAAKF,EAML,IAAK3K,EAAI,EAAGA,EAAI2K,EAAa3N,OAAQgD,IAOnC,QALA4K,EAAY,KADZ9H,EAAS6H,EAAa3K,IAELd,KAAO4D,EAAO1H,OAC/ByP,EAAiB,IACF/H,EAAO5D,KAAO,CAAEzC,MAAOqG,EAAO1H,OAErC0H,EAAOgI,UACb,IAAK,IACErO,EAAMA,MAAMsO,KAAKC,OACpBvO,EAAMA,MAAMsO,KAAKC,KAAO,IAE1BvO,EAAMA,MAAMsO,KAAKC,KAAKlO,KAAK,CAAEmO,aAAcJ,IAC3C,MACF,IAAK,KACEpO,EAAMA,MAAMsO,KAAKG,WACpBzO,EAAMA,MAAMsO,KAAKG,SAAW,IAE9BzO,EAAMA,MAAMsO,KAAKG,SAASpO,KAAK,CAAEmO,aAAcJ,IAC/C,MACF,IAAK,IACHD,EAAU9H,EAAO5D,KAAO,CAAEiM,GAAIrI,EAAO1H,OACrCqB,EAAMA,MAAMsO,KAAKjI,OAAOhG,KAAK,CAAEsO,MAAOR,IACtC,MACF,IAAK,IACHA,EAAU9H,EAAO5D,KAAO,CAAEmM,GAAIvI,EAAO1H,OACrCqB,EAAMA,MAAMsO,KAAKjI,OAAOhG,KAAK,CAAEsO,MAAOR,IACtC,MACF,IAAK,KACHnO,EAAMA,MAAMsO,KAAKjI,OAAOhG,KAAK,CAAEwO,OAAQV,IACvC,MACF,IAAK,KACHnO,EAAMA,MAAMsO,KAAKjI,OAAOhG,KAAK,CAC3BiO,KAAM,CAAEG,SAAU,CAAEI,OAAQV,SAlLxC,4BAyLQ9O,EAA4B6O,EAAoBY,GAAsB,YAMtEvL,EAAGwL,EAAGjH,EAAIkH,EAAYrT,EAJ1B0D,EAAOH,QAAUG,EAAOH,SAAW,CAACL,KACpCQ,EAAOyC,WAAazC,EAAOyC,YAAc,CAAC/C,KAC1CM,EAAO2C,UAAYuC,KAAKvC,UAGxB,IAAMhC,EAAQ,CACZ3B,KAAM,EACN2B,MAAO,CACLsO,KAAM,CACJjI,OAAQ,CACN,CAAEsI,MAAOpK,KAAK0K,kBACd,CACEpB,aAAc,CACZC,kBAAkB,EAClB9N,MAAO8O,QAWnB,GAHAvK,KAAK2K,gBAAgBlP,EAAOkO,GAGK,IAA7B7O,EAAOyC,WAAWvB,WACpB5E,EAAS0D,EAAOH,QAAQ,KAES,iBAAhBvD,EAAOE,MAA2C,aAAhBF,EAAOE,MACxD,KAAM,CAAE2N,QAAS,iBAQrB,GAAkC,kBAA9B,UAAAnK,EAAOH,eAAP,mBAAiB,UAAjB,eAAqBrD,OAAyD,cAA9B,UAAAwD,EAAOH,eAAP,mBAAiB,UAAjB,eAAqBrD,MAAqB,OAItFwC,GAAO,WAHb1C,EAAS0D,EAAOH,QAAQ,IAGJ9B,gBAAP,eAAiBiB,MAAO8O,SAASxR,EAAOyB,SAASiB,KAAM,IAAM,IAE1E,OAAOkG,KAAK4K,cAAcnP,EAAO3B,GAAQ,KAK3C,IAFA2Q,EAAahP,EAERuD,EAAI,EAAGA,EAAIlE,EAAOyC,WAAWvB,OAAQgD,IAAK,CAC7C,IAAMmC,EAASrG,EAAOyC,WAAWyB,GAC3BiB,EAAa,GAEnB,OAAQkB,EAAO7J,MACb,IAAK,iBACH2I,EAAK,eAAqBD,KAAK6K,oBAAoB1J,GACnD,MAEF,IAAK,YACHlB,EAAK,UAAgBD,KAAK8K,gBAAgB3J,GAC1C,MAEF,IAAK,UACHlB,EAAK,QAAc,CAAEoJ,QAASrJ,KAAK+K,cAAc5J,IACjD,MAEF,IAAK,QACHnB,KAAKgL,cAAc7J,EAAQlB,EAAOnF,GAClC,MAEF,IAAK,eAAgB,MACnBmF,EAAK,aAAmB,CACtBzC,MAAO2D,EAAO3D,MACdyN,UAAS,UAAE9J,EAAOtI,gBAAT,aAAE,EAAiBoS,WAMlCR,EAAWzI,KAAOyI,EAAWzI,MAAQ,GACrCyI,EAAWzI,KAAKb,EAAO5G,IAAM0F,EAC7BwK,EAAaxK,EAGfwK,EAAWzI,KAAO,GArFwD,iBAyFxE,GAAoB,WADpB5K,EAAS0D,EAAOH,QAAQqE,IACb1H,KACT,iBAGF,IAAM4T,EAAgB,GAClBC,EAAiB,KAErB,GAAI3T,EAAsBJ,GACxB,GAAIM,EAA6CN,GAAS,CACxD,IAAIA,EAAOqC,kBAoBT,iBAfA,IAJA0R,EAAY,CACVC,aAAc,IAGXZ,EAAI,EAAGA,EAAIpT,EAAOqC,kBAAkBuC,OAAQwO,IAG/C,IAFAjH,EAAKnM,EAAOqC,kBAAkB+Q,IAEvB9Q,MAAQ6J,EAAG5J,aAAe,QAAQ0R,KAAK9H,EAAG5J,aAAc,CAC7D,IAAM6J,EAAa9I,EAAeI,EAAOH,QAAS4I,EAAG5J,aACjD6J,IACsB,UAApBA,EAAWlM,KACb6T,EAAUC,aAAa7H,EAAG7J,MAAQ,SAElCyR,EAAUC,aAAa7H,EAAG7J,MAAQ6J,EAAG5J,kBAQ1C,CACL,IAAIvC,EAAOoG,QAAS,QAAQ6N,KAAKjU,EAAOoG,OAUtC,iBATA,IAAMgG,EAAa9I,EAAeI,EAAOH,QAASvD,EAAOoG,OACrDgG,IAEA2H,EADsB,UAApB3H,EAAWlM,KACD,CAAE8T,aAAc,UAEhB,CAAEA,aAAchU,EAAOoG,aAOlCrG,EAA6BC,KACtC+T,EAAY,CAAE3N,MAAOpG,EAAOoG,QAG1B5F,EAAgCR,IAClCgE,OAAO2C,QAAQ3G,EAAOyB,UAAY,IAC/BiJ,QAAO,sCAAkB,OAAlB,QACPwJ,SAAQ,0BAAEC,EAAF,KAAK9E,EAAL,YAAa0E,EAAUI,GAAK9E,KAGzCyE,EAAS9T,EAAOE,MAAQ6T,EACxBV,EAAWzI,KAAK5K,EAAOmD,IAAM2Q,GA1D/B,IAAKlM,EAAI,EAAGA,EAAIlE,EAAOH,QAAQqB,OAAQgD,IAAK,IA6D5C,OAAOvD,IA7UX,oCAgVgBkH,GACZ,IAAMlH,EAAa,CACjB3B,KAAM,EACN2B,MAAO,CACLsO,KAAM,CACJjI,OAAQ,CAAC,CAAEsI,MAAOpK,KAAK0K,sBAKzB/H,EAASlH,OACXA,EAAMA,MAAMsO,KAAKjI,OAAOhG,KAAK,CAC3BwN,aAAc,CACZC,kBAAkB,EAClB9N,MAAOkH,EAASlH,SAKtB,IAAI3B,EAAO,IACP6I,EAAS7I,OACXA,EAAO6I,EAAS7I,MAGlB2B,EAAMuG,KAAO,CACX,EAAK,CACH2G,MAAO,CACLnL,MAAOmF,EAASnF,MAChB1D,KAAMA,EACN+O,MAAO,MA7Bc,MAsCmDlG,EAAtEnE,eAtCmB,MAsCT,MAtCS,IAsCmDmE,EAArDkG,aAtCE,MAsCkB,cAAZrK,EAA0B,OAAS,MAtCzC,EAwC3B,GAAI,CAAC,MAAO,QAAQ4E,QAAQyF,GAAS,EACnC,KAAM,CAAE5D,QAAS,4BAAF,OAA8B4D,IAG/C,OAAQrK,GACN,IAAK,MACL,IAAK,OACH,IAAMgN,EAAUxL,KAAKuI,WAAa,GAAK,OAAS,QAChD9M,EAAMuG,KAAK,GAAK2G,MAAME,MAAM2C,GAAW3C,EACvC,MACF,IAAK,YACHpN,EAAMuG,KAAK,GAAK2G,MAAME,MAAtB,OAAwCA,EACxC,MACF,QACE,KAAM,CAAE5D,QAAS,2BAAF,OAA6BzG,IAGhD,OAAO/C,IAzYX,mCA4YeX,EAA4B6O,EAAoB8B,GAC3D,IAAIhQ,EAAa,CACf3B,KAAM,EACN2B,MAAO,CACLsO,KAAM,CACJjI,OAAQ,CAAC,CAAEsI,MAAOpK,KAAK0K,sBAkB7B,OAbA1K,KAAK2K,gBAAgBlP,EAAOkO,GAExB7O,EAAOW,OACTA,EAAMA,MAAMsO,KAAKjI,OAAOhG,KAAK,CAC3BwN,aAAc,CACZC,kBAAkB,EAClB9N,MAAOgQ,K,gWAOb,IAFAhQ,EAAQuE,KAAK4K,cAAcnP,EAAO,KAElC,CAEEuG,KAAMhC,KAAK0L,MAAM5Q,EAAQ,KAAM2Q,GAAazJ,Y,6BAralD,K,gXCLO,IAAM2J,GAAgD,CAC3DhD,MAAO,CACL5Q,MAAO,QACPR,eAAe,EACfqU,gBAAiB,CACf7C,cAAe,IACfjP,KAAM,KACN+O,MAAO,OACPrK,QAAS,UAGb6K,QAAS,CACPtR,MAAO,UACPR,eAAe,EACfqU,gBAAiB,CACfvC,QAAS,CCxB6B,CAAEtR,MAAO,GAAI0D,MAAO,QD2B9DoQ,aAAc,CACZ9T,MAAO,gBACPR,eAAe,EACfqU,gBAAiB,CACfX,UAAW,MAGfa,eAAgB,CACd/T,MAAO,iBACPR,eAAe,EACfqU,gBAAiB,CACfnR,SAAU,OACVsO,cAAe,IACfvE,UAAW,MAGfD,UAAW,CACTxM,MAAO,YACPR,eAAe,EACfqU,gBAAiB,CACfnR,SAAU,OACVsO,cAAe,OAORgD,GAAgC,CAC3C,CAAEhU,MAAO,MAAOqC,MAAO,QACvB,CAAErC,MAAO,SAAUqC,MAAO,QAGf4R,GAAc,CACzB,CAAEjU,MAAO,WAAYqC,MAAO,KAC5B,CAAErC,MAAO,IAAKqC,MAAO,KACrB,CAAErC,MAAO,IAAKqC,MAAO,KACrB,CAAErC,MAAO,IAAKqC,MAAO,KACrB,CAAErC,MAAO,IAAKqC,MAAO,KACrB,CAAErC,MAAO,KAAMqC,MAAO,MACtB,CAAErC,MAAO,KAAMqC,MAAO,MACtB,CAAErC,MAAO,KAAMqC,MAAO,OAGX6R,GAAiB,CAC5B,CAAElU,MAAO,aAAcqC,MAAO,SAC9B,CAAErC,MAAO,YAAaqC,MAAO,WAGlB8R,GAAkB,CAC7B,CAAEnU,MAAO,OAAQqC,MAAO,QACxB,CAAErC,MAAO,MAAOqC,MAAO,OACvB,CAAErC,MAAO,KAAMqC,MAAO,MACtB,CAAErC,MAAO,KAAMqC,MAAO,MACtB,CAAErC,MAAO,MAAOqC,MAAO,OACvB,CAAErC,MAAO,MAAOqC,MAAO,OACvB,CAAErC,MAAO,KAAMqC,MAAO,MACtB,CAAErC,MAAO,KAAMqC,MAAO,OAMxB,SAAS+R,GAAqC/U,GAC5C,OAAKA,EAAOqB,KAGK2C,OAAOkD,KAAKlH,EAAOqB,MAEjCqJ,QAAO,SAAC5D,GAAD,uBAAS9G,EAAOqB,YAAhB,aAAS,EAAcyF,MAC9B1C,KAAI,SAAC0C,GACJ,IAAIkO,EAASlO,EASb,MANY,+BAARA,IACFkO,EAAS,aAEC,+BAARlO,IACFkO,EAAS,aAEJ,CAAErU,MAAO,GAAF,OAAK6F,EAAexG,GAApB,aAAgCgV,EAAhC,KAA2ChS,MAAO,GAAF,OAAKhD,EAAOmD,GAAZ,YAAkB6R,EAAlB,SAfzD,GAsBX,SAASC,GAAmCjV,GAAsC,MAChF,OAAI,UAACA,EAAOyB,gBAAR,aAAC,EAAiBC,UAGf1B,EAAOyB,SAASC,SAAS0C,KAAI,SAAC8Q,GAGnC,IAAMC,EAAgB,YAAYlB,KAAZ,UAAoBiB,IAAaA,EAAjC,UAA8CA,EAA9C,MACtB,MAAO,CAAEvU,MAAO,GAAF,OAAK6F,EAAexG,GAApB,aAAgCkV,EAAhC,KAA4ClS,MAAO,GAAF,OAAKhD,EAAOmD,GAAZ,YAAkBgS,EAAlB,SANxD,GAaJ,IElEMC,GAA+B,SAC1CC,GAD0C,OAEEd,GAAwBc,EAAUnV,MAAMC,e,41EC1BtF,IAAMmV,GAAsB,CAC1B,SACA,QACA,MACA,UACA,QACA,eACA,WACA,WACA,SAGWC,GAAb,YAiBE,WACEC,GAEA,QADiBC,EACjB,uDAD4CC,eAC5C,YACA,0BAAMF,KAFWC,cACjB,EAuYFE,iBAvYE,6CAuYiB,WAAOC,EAAkB1E,GAAzB,6HACX2E,EAAYD,EAAIxH,UAAUlB,OAAO1J,MAAK,SAACsS,GAAD,MAAkB,SAAXA,EAAExT,QAC/CyT,GAAcF,aAAA,EAAAA,EAAWxM,OAAO2M,IAAIJ,EAAIK,YAAa,CAACL,EAAIM,aAC1DlJ,EAA8B,aAAvBkE,aAAA,EAAAA,EAASiF,WAA0B,MAAQ,OAElDC,EACmB,aAAvBlF,aAAA,EAAAA,EAASiF,WACL,EAAKE,eAAe,mBAAoBzF,mBAASgF,EAAIM,cACrD,EAAKG,eAAe,wBAAoBxM,EAAW+G,mBAASgF,EAAIM,cAEhEI,EAVW,UAUHpF,aAVG,EAUHA,EAASoF,aAVN,QAUe,GAC1BC,EAAU9I,KAAKC,UAAU,CAC7BhL,KAAM4T,EACNjS,MAAO,CACLsO,KAAM,CACJjI,OAAQ,CACN,CACEsI,MAAO,MACJ,EAAK3M,WADH,UAEuB,aAAvB6K,aAAA,EAAAA,EAASiF,WAA0B,MAAQ,MAAQP,EAAIM,aAFvD,cAGO,gBAHP,QAUblJ,KAAM,CAAC,MAAG,EAAK3G,UAAY2G,GAAQ,CAAEqF,KAAMrF,IAC3CwJ,aAAcT,IAEVU,EAAU,CAACL,EAAQG,GAAS1R,KAAK,MAAQ,KACzC6R,EAAM,EAAKC,oBA/BA,UAgCM,EAAKC,KAAKF,EAAKD,GAASI,YAhC9B,WAgCXpP,EAhCW,OAiCXD,EAAgC,CAAC,CAAElB,MAAO,GAAF,OAAKsP,EAAIxH,UAAU9H,OAAS/C,QAAS,GAAI2C,aAAa,IAC9F4Q,EAAkB,IAAIvP,EAAgBC,EAASuP,GAA8BtP,EAAUuF,IACvFgK,EAAcF,EAAgBG,QAAQ,EAAKhJ,gBAAiB,EAAKC,eACjEE,EAAYnE,IAAEiN,MAAMF,EAAYrO,MApCrB,0CAsCR,CAAEA,KAAM,KAtCA,WA+CXwO,EAAiB/I,EAAUlB,OAAO1J,MAAK,SAACsS,GAAD,OAAcA,EAAExT,OAAS,EAAK+D,aACrE+Q,EAAYhJ,EAAUlB,OAAO1J,MAAK,SAACsS,GAAD,OAAcA,EAAExT,OAAS,EAAK2L,oBAClEkJ,IAAkBC,EAjDL,0CAkDR,CACLzO,KAAM,CAAC,MAEAyF,EAFD,CAGFlB,OAAQ,GAAF,UAAMkB,EAAUlB,QAAhB,OAA6BiK,EAA7B,CAA6C7U,KAAM,OAAnD,MAAgE8U,EAAhE,CAA2E9U,KAAM,gBAtD9E,iCA2DV0U,GA3DU,4CAvYjB,wDAEA,EAAKK,UAAY7B,EAAiB6B,UAClC,EAAKC,gBAAkB9B,EAAiB8B,gBACxC,EAAKZ,IAAMlB,EAAiBkB,IAC5B,EAAKpU,KAAOkT,EAAiBlT,KAC7B,EAAKiV,MAAL,UAAa/B,EAAiBgC,gBAA9B,QAA0C,GAC1C,IAAMC,EAAejC,EAAiBkC,UAAa,GAPnD,OASA,EAAKrR,UAAYoR,EAAapR,UAC9B,EAAK8K,UAAYsG,EAAatG,UAC9B,EAAKwG,aAAe,IAAIzH,EAAa,EAAKqH,MAAOE,EAAapU,UAC9D,EAAKA,SAAWoU,EAAaG,aAC7B,EAAKC,2BAA6BJ,EAAaI,2BAC/C,EAAKC,aAAe,IAAI7G,GAAoB,CAC1C5K,UAAW,EAAKA,UAChB8K,UAAW,EAAKA,YAElB,EAAKlD,gBAAkBwJ,EAAaxJ,iBAAmB,GACvD,EAAKC,cAAgBuJ,EAAavJ,eAAiB,GACnD,EAAK6J,UAAYN,EAAaM,WAAa,GAEd,KAAzB,EAAK9J,kBACP,EAAKA,qBAAkBpE,GAGE,KAAvB,EAAKqE,gBACP,EAAKA,mBAAgBrE,GAEvB,EAAKmO,iBAAmB,IAAIzR,EAAJ,OA7BxB,E,UApBJ,S,mOAAA,M,EAAA,G,EAAA,+BAoDkByO,EAAgB0B,EAAa/N,GAC3C,IAAMuI,EAAe,CACnBwF,IAAK9N,KAAK8N,IAAM,IAAMA,EACtB1B,OAAQA,EACRrM,KAAMA,GAYR,OATIC,KAAKyO,WAAazO,KAAK0O,mBACzBpG,EAAQoG,iBAAkB,GAExB1O,KAAKyO,YACPnG,EAAQ+G,QAAU,CAChBC,cAAetP,KAAKyO,YAIjBc,2BACJC,MAAWlH,GACXmH,KACCjU,cAAI,SAACkU,GAEH,OADAA,EAAQ3P,KAAKmF,SAAWwK,EAAQvK,OACzBuK,EAAQ3P,QAEjB4P,cAAW,SAAChL,GACV,OAAIA,EAAI5E,MAAQ4E,EAAI5E,KAAKb,MAChB0Q,aAAW,CAChB3K,QAAS,wBAA0BN,EAAI5E,KAAKb,MAAM8F,OAClD9F,MAAOyF,EAAI5E,KAAKb,QAIb0Q,aAAWjL,SAnF5B,qEAwFsBrJ,EAAsBuU,GAxF5C,yGAyFW7P,KAAKoP,iBAAiBU,cAAcxU,EAASuU,EAAWtV,KAzFnE,0HAoGcuT,GAA6D,IAAhD1D,EAAgD,uDAAxC2F,gCAC3B3H,EAAYpI,KAAK+O,aAAaiB,aAAa5F,EAAMxC,KAAMwC,EAAMvC,IAC5D1J,MAAMC,QAAQgK,KACjBA,EAAY,CAACpI,KAAK+O,aAAakB,qBAGjC,IAAMC,EAAe9H,EAAU5M,KAAI,SAACmT,GAAD,OAAWA,EAAQb,KAEtD,OAAO9N,KAAKmQ,kBAAkBD,KA5GlC,wCA+G4B9H,GAAsC,WAExDgI,EAAUhI,EAAUpM,OAE1B,OAAOqU,aACL,GACA,SAACrR,GAAD,OAAOA,EAAIsR,KAAK/X,IAAI6X,EALA,MAMpB,SAACpR,GAAD,OAAOA,EAAI,KACXyQ,KACAc,cAAS,SAAC5B,GAER,OAAO,EAAK6B,QAAQ,MAAOpI,EAAUgI,EAAUzB,EAAQ,IAAIc,KAAKE,cAAW,SAAChL,GAAD,OAAS8L,aAAG,CAAE9L,eAE3F+L,cAAU,SAACC,GAAD,OAAUA,EAAKhM,KAA2B,MAApBgM,EAAKhM,IAAIiM,UACzCC,cAAa,iBAAM,4DACnBvC,eACA9S,cAAI,SAACmV,GACH,GAAIA,EAAKhM,IACP,MAAMgM,EAAKhM,IAGb,OAAOgM,QApIf,2BAyIe7C,EAAa/N,GACxB,OAAOC,KAAKwQ,QAAQ,OAAQ1C,EAAK/N,KA1IrC,sCA6IkBuI,GACd,IAAMwI,EAAaxI,EAAQwI,WACrBrT,EAAYqT,EAAWrT,WAAa,aACpCsT,EAAeD,EAAWC,cAAgB,KAC1CxG,EAAcuG,EAAWrV,OAAS,IAClCuV,EAAYF,EAAWE,WAAa,OACpCC,EAAYH,EAAWG,WAAa,KAEpCC,EAAa,GACbC,EAAkB,GAQxB,GAPAA,EAAW1T,GAAa,CACtBmK,KAAMU,EAAQ8B,MAAMxC,KAAKO,UACzBN,GAAIS,EAAQ8B,MAAMvC,GAAGM,UACrBR,OAAQ,gBAEVuJ,EAAWpV,KAAK,CAAEsO,MAAO+G,IAErBJ,EAAc,CAChB,IAAMK,EAAgB,GACtBA,EAASL,GAAgB,CACvBnJ,KAAMU,EAAQ8B,MAAMxC,KAAKO,UACzBN,GAAIS,EAAQ8B,MAAMvC,GAAGM,UACrBR,OAAQ,gBAEVuJ,EAAWpV,KAAK,CAAEsO,MAAOgH,IAG3B,IAmBMrR,EAAY,CAChBtE,MAnBY,CACZsO,KAAM,CACJjI,OAAQ,CACN,CACEiI,KAAM,CACJsH,OAAQH,EACRI,qBAAsB,IAG1B,CACEhI,aAAc,CACZ7N,MAZgBuE,KAAK6M,YAAY7J,QAAQuH,EAAa,GAAI,eAqBlEzQ,KAAM,KAIJkG,KAAKuI,UAAY,IACnBxI,EAAI,OAAa,CAACtC,EAAW,YAG/B,IAAM+P,EAAc,CAClB+D,YAAa,mBACbC,oBAAoB,GAIlBV,EAAWnC,MACbnB,EAAOmB,MAAQmC,EAAWnC,MAE1BnB,EAAOmB,MAAQ3O,KAAK+O,aAAaiB,aAAa1H,EAAQ8B,MAAMxC,KAAMU,EAAQ8B,MAAMvC,IAGlF,IAAMgG,EAAUhJ,KAAKC,UAAU0I,GAAU,KAAO3I,KAAKC,UAAU/E,GAAQ,KAEvE,OAAOC,KAAKgO,KAAK,WAAYH,GAC1B4B,KACCjU,cAAI,SAACiW,GAuBH,IAtBA,IAAMC,EAAO,GACPtS,EAAOqS,EAAIxS,UAAU,GAAGG,KAAKA,KAE7BuS,EAAqB,SAACC,EAAaC,GACvC,GAAKA,EAAL,CAOA,IAHA,IAAMnL,EAAamL,EAAUC,MAAM,KAC/BC,EAAaH,EAER5S,EAAI,EAAGA,EAAI0H,EAAW1K,OAAQgD,IAErC,KADA+S,EAAaA,EAAWrL,EAAW1H,KAGjC,OADAgT,QAAQC,IAAI,uCAAwCJ,GAC7C,GAIX,OAAOE,IAGA/S,EAAI,EAAGA,EAAII,EAAKpD,OAAQgD,IAAK,CACpC,IAAM4S,EAASxS,EAAKJ,GAAGqF,QACnBiC,EAAOqL,EAAmBC,EAAQnU,GACtC,QAA8B,IAAnB2B,EAAKJ,GAAGsF,OAAwB,CACzC,IAAMA,EAASlF,EAAKJ,GAAGsF,QACnBjD,IAAE6Q,SAAS5N,EAAO7G,KAAe4D,IAAE8Q,SAAS7N,EAAO7G,OACrD6I,EAAOhC,EAAO7G,IAIlB,IAAM2U,EAMF,CACFtB,WAAYA,EACZxK,KAAMmB,gBAAMnB,GAAM6B,UAClB3G,KAAMmQ,EAAmBC,EAAQX,GACjCoB,KAAMV,EAAmBC,EAAQZ,IAGnC,GAAID,EAAc,CAChB,IAAMuB,EAAUX,EAAmBC,EAAQb,GACvCuB,IACFF,EAAME,QAAU7K,gBAAM6K,GAASnK,WAKnC,GAAI2I,EAAWyB,WAAY,CACzB,IAAMC,EAAQb,EAAmBC,EAAQd,EAAWyB,YAChDC,IACFJ,EAAM5Q,KAAOgR,EAAQ,KAAOJ,EAAM5Q,MAIZ,iBAAf4Q,EAAMC,OACfD,EAAMC,KAAOD,EAAMC,KAAKP,MAAM,MAGhCJ,EAAK5V,KAAKsW,GAEZ,OAAOV,MAGVzD,cA3RP,6CA8RiC1D,EAAqBkI,GAElD,OAAOzS,KAAK6M,YAAY7J,QAAQuH,EAAakI,EAAY,WAAa,MAhS1E,oDAmSgCnX,EAA+BmX,GAA8C,WACrGC,EAAkBpX,EAmBtB,OAlBIA,GAAWA,EAAQU,OAAS,IAC9B0W,EAAkBpX,EAAQE,KAAI,SAACC,GAC7B,IAAMkX,EAAgB,MACjBlX,EADc,CAEjBP,WAAY,EAAKxB,KACjB+B,MAAO,EAAKmX,uBAAuBnX,EAAMA,OAAS,GAAIgX,KAJjB,uBAOvC,aAAsBhX,EAAM8B,YAAc,IAA1C,+CAA8C,KAArCkP,EAAqC,QAC5C,GAAuB,YAAnBA,EAAUnV,KAAoB,4BAChC,cAAmB,UAAAmV,EAAU5T,gBAAV,eAAoBwQ,UAAW,IAAlD,+CAAsD,OAA7CvH,EAA6C,QACpDA,EAAOrG,MAAQ,EAAKmX,uBAAuB9Q,EAAOrG,MAAOgX,IAF3B,qFARG,kFAcvC,OAAOE,MAGJD,IAvTX,uCA0TmB,WAEf,OAAO1S,KAAK6S,UAAU,QACnBpD,KACCc,cAAS,SAACuC,GAER,OADuBzR,IAAEzG,KAAKkY,EAAY,CAAEtR,KAAM,EAAK/D,YAIhDgT,aAAG,CAAEG,OAAQ,UAAW3L,QAAS,kCAF/BwL,aAAG,CAAEG,OAAQ,QAAS3L,QAAS,uBAAyB,EAAKxH,UAAY,cAIpFkS,cAAW,SAAChL,GAEV,OADAqN,QAAQ9S,MAAMyF,GACVA,EAAIM,QACCwL,aAAG,CAAEG,OAAQ,QAAS3L,QAASN,EAAIM,UAEnCwL,aAAG,CAAEG,OAAQ,QAAS3L,QAASN,EAAIiM,aAI/C3C,cA9UP,qCAiViB8E,EAAiBC,EAAqBC,GACnD,IAAMC,EAAmB,CACvB3B,YAAawB,EACbvB,oBAAoB,EACpB7C,MAAO3O,KAAK+O,aAAaiB,aAAagD,EAAUC,IAOlD,OAJIjT,KAAKuI,WAAa,IAAMvI,KAAKuI,UAAY,KAC3C2K,EAAW,8BAAoClT,KAAKiP,4BAG/CpK,KAAKC,UAAUoO,KA5V1B,0CA+VsBzX,GAElB,IAAM0X,EAAa1X,EAAMd,QACnB4C,EAAa9B,EAAM8B,WACrBiE,EAAO,GA4CX,OA1CI/F,EAAMA,QACR+F,GAAQ,UAAY/F,EAAMA,MAAQ,MAGpC+F,GAAQ,YAERA,GAAQ2R,aAAJ,EAAIA,EAAYnV,QAAO,SAACC,EAAK7G,GAC/B,IAO0D,IALtDoK,EAFiBnK,EAAwBD,EAAOE,MAE5BS,MAAQ,IAUhC,OARIZ,EAA6BC,KAC/BoK,GAAQpK,EAAOoG,OAEb9F,EAA6CN,KAC/CoK,GAAI,UAAIpK,EAAOyB,gBAAX,iBAAI,EAAiBkJ,cAArB,aAAI,EAAyBiB,QAAQ,IAAIoQ,OAAO,UAAW,KAAM,KAEvE5R,GAAQ,MAER,UAAUvD,EAAV,YAAiBuD,KAChB,IAEHA,GAAQjE,aAAJ,EAAIA,EAAYS,QAAO,SAACC,EAAKwO,EAAWkC,GAC1C,IAEInN,EAAO,GAUX,OATc,IAAVmN,IACFnN,GAAQ,eAGVA,GAPqBmK,GAAwBc,EAAUnV,MAOlCS,MAAQ,IACzByU,GAA6BC,KAC/BjL,GAAQiL,EAAUjP,OAGpB,UAAUS,EAAV,YAAiBuD,EAAjB,SACC,IAEC/F,EAAMsH,QACRvB,GAAQ,UAAY/F,EAAMsH,OAGrBvB,IA/YX,0CAwZI,OAAOxB,KAAKuI,UAAY,IAxZ5B,4BAydQD,GAA8E,WAC9EuF,EAAU,GACRjP,EAAUoB,KAAKqT,8BAA8BhS,IAAEiS,UAAUhL,EAAQ1J,SAAU0J,EAAQmK,YACnFc,EAAoC,GAGpC5J,EAAe3J,KAAK6M,YAAY2G,gBAAgBxT,KAAKtG,MANuB,uBAQlF,YAAqBkF,EAArB,+CAA8B,KAAnB9D,EAAmB,QAC5B,IAAIA,EAAOsF,KAAX,CAIA,IAAIqT,OAAQ,EACR3Y,EAAOwC,aAAezC,EAAgBC,EAAQ,SAChDA,EAAOyC,WAAa,CAAC/C,KACrBM,EAAOH,QAAU,GAEjBG,EAAOwC,aAAc,EACrBmW,EAAWzT,KAAKkP,aAAawE,aAAa5Y,EAAQ6O,EAAc7O,EAAOW,SAEnEX,EAAOiI,QACTjI,EAAOiI,MAAQ/C,KAAK6M,YAAY7J,QAAQlI,EAAOiI,MAAOuF,EAAQmK,WAAY,WAG5EgB,EAAWzT,KAAKkP,aAAaxD,MAAM5Q,EAAQ6O,EAAc7O,EAAOW,QAGlE,IAAMkS,EAAU9I,KAAKC,UAAU2O,GAEzBV,EAA+B,IAAlBU,EAAS3Z,MAAckG,KAAKuI,UAAY,EAAI,QAAU,mBAEzEsF,GADe7N,KAAKyN,eAAesF,EAAYzK,EAAQ8B,MAAMxC,KAAMU,EAAQ8B,MAAMvC,IAC7D,KAEpBgG,GAAWF,EAAU,KAErB4F,EAAYzX,KAAKhB,KApC+D,kFAuClF,GAA2B,IAAvByY,EAAYvX,OACd,OAAOyU,aAAG,CAAE1Q,KAAM,KAQpB8N,GADAA,EAAUA,EAAQ7K,QAAQ,gBAAiBsF,EAAQ8B,MAAMxC,KAAKO,UAAUwL,aACtD3Q,QAAQ,cAAesF,EAAQ8B,MAAMvC,GAAGM,UAAUwL,YACpE9F,EAAU7N,KAAK6M,YAAY7J,QAAQ6K,EAASvF,EAAQmK,YAEpD,IAAM3E,EAAM9N,KAAK+N,oBAEjB,OAAO/N,KAAKgO,KAAKF,EAAKD,GAAS4B,KAC7BjU,cAAI,SAACiW,GACH,IAAMmC,EAAK,IAAIjV,EAAgB4U,EAAa9B,GAE5C,GAAI8B,EAAYxY,MAAK,SAACD,GAAD,OAAYA,EAAOwC,eAAc,CACpD,IAAMuB,EAAW+U,EAAGvF,QAAQ,EAAKhJ,gBAAiB,EAAKC,eADH,uBAEpD,YAAwBzG,EAASkB,KAAjC,+CACE8T,GADqC,QACT,EAAK1E,WAHiB,kFAKpD,OAAOtQ,EAGT,OAAO+U,EAAGE,sBA1hBlB,sCA+hBkBjC,GACd,OAAOnF,GAAoB/F,SAASkL,KAhiBxC,gCAoiBYva,EAAe8S,GAAkD,WACnE2J,EAAsB/T,KAAKuI,UACjC,OAAOvI,KAAKoN,IAAI,YAAahD,GAAOqF,KAClCjU,cAAI,SAACoJ,GACH,IAAMoP,EAAe,CACnBC,MAAO,SACPC,OAAQ,SACRC,QAAS,SACTC,KAAM,SACNC,KAAM,OACNC,WAAY,OACZ/N,OAAQ,SACR/E,KAAM,SACN+S,aAAc,SACdC,OAAQ,UAGJC,EAAiB,SAAC3W,EAAUI,GAChC,QAAI,EAAKwW,gBAAgBxW,IAIpB5G,GAKEA,IAASwG,EAAIxG,MAAQA,IAAS0c,EAAQlW,EAAIxG,QAI7Cqd,EAAsB,GACtBrQ,EAAc,GAEpB,SAASsQ,EAAqB9W,GAC5B,IAAK,IAAMI,KAAOJ,EAAK,CACrB,IAAM+W,EAAS/W,EAAII,GAanB,GAVImD,IAAEyT,SAASD,EAAOE,cACpBJ,EAAe7Y,KAAKoC,GACpB0W,EAAqBC,EAAOE,aAG1B1T,IAAEyT,SAASD,EAAOvQ,UACpBqQ,EAAe7Y,KAAKoC,GACpB0W,EAAqBC,EAAOvQ,SAG1BjD,IAAE6Q,SAAS2C,EAAOvd,MAAO,CAC3B,IAAMua,EAAY8C,EAAeK,OAAO9W,GAAKjC,KAAK,KAG9CwY,EAAeI,EAAQ3W,KACzBoG,EAAOuN,GAAa,CAClBrQ,KAAMqQ,EACNva,KAAMud,EAAOvd,QAKrBqd,EAAeM,MAGjB,IAAK,IAAMC,KAAatQ,EAAQ,CAC9B,IAAM+J,EAAQ/J,EAAOsQ,GACrB,GAAIvG,GAASA,EAAMwG,SAAU,CAC3B,IAAMA,EAAWxG,EAAMwG,SAEvB,GAAIpB,EAAsB,GACxB,IAAK,IAAMqB,KAAYD,EAErBP,EADmBO,EAASC,GAAUL,iBAKxCH,EADmBO,EAASJ,aAOlC,OAAO1T,IAAE7F,IAAI8I,GAAQ,SAAClK,GACpB,OAAOA,WAvnBjB,+BA6nBWuI,GAA6E,IAA9DyH,EAA8D,uDAAtD2F,gCACxBgD,EAAa/S,KAAKuI,WAAa,EAAI,mBAAqB,QACxDiF,EAASxN,KAAKyN,eAAesF,EAAY3I,EAAMxC,KAAMwC,EAAMvC,IAC7D8F,EAAU9I,KAAKC,UAAU9E,KAAKkP,aAAamG,cAAc1S,IAI7DgL,EAAUH,EAAS,MADnBG,GADAA,EAAUA,EAAQ3K,QAAQ,cAAeoH,EAAMxC,KAAKO,UAAUwL,aAC5C3Q,QAAQ,YAAaoH,EAAMvC,GAAGM,UAAUwL,aACtB,KAEpC,IAAM7F,EAAM9N,KAAK+N,oBAEjB,OAAO/N,KAAKgO,KAAKF,EAAKH,GAAS8B,KAC7BjU,cAAI,SAACiW,GACH,IAAKA,EAAIxS,UAAU,GAAGK,aACpB,MAAO,GAGT,IAAMgB,EAAUmR,EAAIxS,UAAU,GAAGK,aAAa,GAAKgB,QACnD,OAAOe,IAAE7F,IAAI8E,GAAS,SAACC,GACrB,MAAO,CACLiB,KAAMjB,EAAOiC,eAAiBjC,EAAOrC,IACrC9D,MAAOmG,EAAOrC,cAlpB1B,0CA0pBI,OAAI8B,KAAKuI,WAAa,IAAMvI,KAAKiP,2BAC/B,iDAAiDjP,KAAKiP,4BAGjD,aA9pBX,sCAiqBkBxT,EAAe6M,GAC7B,IAAM8B,EAAQ9B,aAAH,EAAGA,EAAS8B,MACjBkL,EAAczQ,KAAK2B,MAAM/K,GAC/B,GAAIA,EAAO,CACT,GAAyB,WAArB6Z,EAAY1a,KAEd,OADA0a,EAAYhe,KAAO0I,KAAK6M,YAAY7J,QAAQsS,EAAYhe,KAAM,GAAI,UAC3D0I,KAAK6S,UAAUyC,EAAYhe,KAAM8S,GAAO6D,YAGjD,GAAyB,UAArBqH,EAAY1a,KAGd,OAFA0a,EAAY9X,MAAQwC,KAAK6M,YAAY7J,QAAQsS,EAAY9X,MAAO,GAAI,UACpE8X,EAAY7Z,MAAQuE,KAAK6M,YAAY7J,QAAQsS,EAAY7Z,OAAS,IAAK,GAAI,UACpEuE,KAAKuV,SAASD,EAAalL,GAAO6D,YAI7C,OAAOuH,QAAQC,QAAQ,MAjrB3B,mCAqrBI,OAAOzV,KAAK6S,YAAY5E,cArrB5B,mCAwrBe3F,GACX,OAAOtI,KAAKuV,SAAS,CAAE/X,MAAO8K,EAAQpK,IAAKzC,MAAO,MAAOwS,cAzrB7D,6CA4rByBnT,GACrB,GAAIkF,KAAK6M,YAAY6I,eAAe5a,EAAOW,QAAUuE,KAAK6M,YAAY6I,eAAe5a,EAAOiI,OAC1F,OAAO,EAFyB,2BAKlC,YAAwBjI,EAAOyC,WAA/B,+CAA2C,KAAhCkP,EAAgC,QACzC,GAAIzM,KAAK6M,YAAY6I,eAAejJ,EAAUjP,QAAUwC,KAAK2V,uBAAuBlJ,EAAU5T,UAC5F,OAAO,GAPuB,6GAWlC,YAAqBiC,EAAOH,QAA5B,+CAAqC,KAA1BvD,EAA0B,QACnC,GACE4I,KAAK6M,YAAY6I,eAAete,EAAOoG,QACvCwC,KAAK2V,uBAAuBve,EAAOyB,WACnCmH,KAAK2V,uBAAuBve,EAAOqB,MAEnC,OAAO,GAjBuB,kFAqBlC,OAAO,IAjtBX,kCAotBsBqF,GAClB,OAAIA,WAGA,CAAC,SAAU,SAAU,WAAW/C,MAAK,SAACzD,GAAD,OAAUA,IAAS,IAAO,QAxtBvE,6CA+tBiCwG,GAC7B,IAAKA,EACH,OAAO,EAGT,cAAkB1C,OAAOkD,KAAKR,GAA9B,eAAoC,CAA/B,IAAMI,EAAG,KACZ,GAAI8B,KAAK4V,YAAY9X,EAAII,KACvB,GAAI8B,KAAK6M,YAAY6I,eAAe5X,EAAII,IACtC,OAAO,OAEJ,GAAIC,MAAMC,QAAQN,EAAII,IAAO,4BAClC,YAAmBJ,EAAII,GAAvB,+CAA6B,KAAlB2X,EAAkB,QAC3B,GAAI7V,KAAK2V,uBAAuBE,GAC9B,OAAO,GAHuB,wFAOlC,GAAI7V,KAAK2V,uBAAuB7X,EAAII,IAClC,OAAO,EAKb,OAAO,O,6BAtvBX,GAAuC4X,iBA8vBhC,SAASjC,GAAiBrO,EAAsB2J,GACrD,IAAM4G,EAAgBC,8BAEtB,GAAK7G,EAAUnT,OAAf,CAHkF,2BAOlF,IAPkF,IAOlF,EAPkF,iBAOvEwB,EAPuE,QAQ1EyY,EAAiB9G,EAAUvU,MAAK,SAACsb,GAAD,OAAc1Y,EAAM9D,MAAQ8D,EAAM9D,KAAKgF,MAAMwX,EAAS1Y,UAE5F,IAAKyY,EACH,iBAGF,IAAIE,OAAc,EAElB,GAAIF,EAAeG,cAAe,OAC1BC,EAAaN,EAAcO,oBAAoBL,EAAeG,eAEpED,EAAO,CACL3D,MAAO,GACP1E,IAAK,GACLyI,SAAU,CACR9a,MAAO,CAAEA,MAAOwa,EAAenI,KAC/BsI,cAAeH,EAAeG,cAC9BI,eAAc,UAAEH,aAAF,EAAEA,EAAY3c,YAAd,QAAsB,+BAIxCyc,EAAO,CACL3D,MAAO,GACP1E,IAAKmI,EAAenI,KAIxBtQ,EAAM2H,OAAS3H,EAAM2H,QAAU,GAC/B3H,EAAM2H,OAAOsR,MAAb,aAA0BjZ,EAAM2H,OAAOsR,OAAS,IAAhD,CAAqDN,KA7BvD,EAAoB3Q,EAAUlB,OAA9B,+CAAsC,IAP4C,oFAwCpF,SAAS6J,GAA8BtP,EAAe0O,GACpD,GAAkB,SAAdA,EACF,OAAO1O,EAET,IAAM6X,EAAiB7X,EAASI,UAAU,GAC1C,aACKJ,EADL,CAEEI,UAAW,CAAC,MAELyX,EAFI,CAGPtX,KAAM,MACDsX,EAAetX,KADhB,CAEFA,KAAMsX,EAAetX,KAAKA,KAAKuX,iB,0uBCr2BjCC,GAA6BC,eAA7BD,OAAQE,GAAqBD,eAArBC,MAAOC,GAAcF,eAAdE,UAIjBC,GAAoB,CACxB,CAAEjf,MAAO,aAAcqC,MAAO,QAC9B,CAAErC,MAAO,SAAUqC,MAAO,SAAU6c,QAAS,4BAC7C,CAAElf,MAAO,QAASqC,MAAO,QAAS6c,QAAS,yBAC3C,CAAElf,MAAO,SAAUqC,MAAO,SAAU6c,QAAS,sBAC7C,CAAElf,MAAO,UAAWqC,MAAO,UAAW6c,QAAS,sBAC/C,CAAElf,MAAO,SAAUqC,MAAO,SAAU6c,QAAS,oBAGzCC,GAAa,CACjB,CAAEnf,MAAO,MAAOqC,MAAO,GACvB,CAAErC,MAAO,MAAOqC,MAAO,GACvB,CAAErC,MAAO,OAAQqC,MAAO,IACxB,CAAErC,MAAO,OAAQqC,MAAO,IACxB,CAAErC,MAAO,OAAQqC,MAAO,KAOb+c,GAAiB,SAACjX,GAAiB,IACtC9F,EAAoB8F,EAApB9F,MAAOgd,EAAalX,EAAbkX,SAEf,OACE,sCACE,yBAAIC,UAAU,gBAAd,yBAEA,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,kBACb,0BAAKA,UAAU,WACb,mBAACN,GAAD,CACEO,WAAY,GACZC,WAAY,GACZxf,MAAM,aACNqC,MAAOA,EAAMwU,UAAY,GACzBwI,SAAUI,GAAc,WAAYpd,EAAOgd,GAC3CK,YAAa,gBACbC,UAAQ,KAIZ,0BAAKL,UAAU,WACb,mBAACN,GAAD,CACEO,WAAY,GACZvf,MAAM,UACN4f,QACE,mBAACf,GAAD,CACEtO,QAAS0O,GACTI,SAAUQ,GAAgBxd,EAAOgd,GACjChd,MAAO4c,GAAkBpc,MACvB,SAAC2M,GAAD,OACEA,EAAQnN,cAAuC6G,IAA5B7G,EAAM0U,SAASrU,SAAyB,OAASL,EAAM0U,SAASrU,mBAQjG,0BAAK4c,UAAU,wBACb,mBAACN,GAAD,CACEO,WAAY,GACZC,WAAY,GACZxf,MAAM,kBACNqC,MAAOA,EAAM0U,SAASrR,WAAa,GACnC2Z,SAAUS,GAAsB,YAAazd,EAAOgd,GACpDM,UAAQ,KAIZ,0BAAKL,UAAU,WACb,mBAACN,GAAD,CACEO,WAAY,GACZvf,MAAM,UACN4f,QACE,mBAACf,GAAD,CACEtO,QAAS4O,GACTE,SAAU,SAACU,GACT,IAAM7I,EA4HxB,SAA8CA,EAAgD8I,GAC5F,GAAmC,IAA/B9I,GAAoC8I,EAAU,GAChD,OAAO,IAGT,GAAmC,MAA/B9I,GAAsC8I,GAAW,GACnD,OAAO,EAGT,OAAO9I,GAA8B+I,GAAkCD,GArIpBE,CACjC7d,EAAM0U,SAASG,2BACf6I,EAAO1d,OAETgd,EAAS,MACJhd,EADG,CAEN0U,SAAU,MACL1U,EAAM0U,SADH,CAENvG,UAAWuP,EAAO1d,MAClB6U,mCAIN7U,MAAO8c,GAAWtc,MAAK,SAACmd,GAAD,OAAaA,EAAQ3d,QAAUA,EAAM0U,SAASvG,kBAK5EnO,EAAM0U,SAASvG,WAAa,IAC3B,0BAAK8O,UAAU,wBACb,mBAACN,GAAD,CACEmB,aAAY,sCACZZ,WAAY,GACZvf,MAAM,gCACNqC,MAAOA,EAAM0U,SAASG,4BAA8B,GACpDmI,SAAUS,GAAsB,6BAA8Bzd,EAAOgd,MAI3E,0BAAKC,UAAU,kBACb,0BAAKA,UAAU,WACb,mBAACN,GAAD,CACEO,WAAY,GACZvf,MAAM,oBACN4f,QACE,mBAACb,GAAD,CACEO,UAAW,UACXjd,MAAOA,EAAM0U,SAASE,cAAgB,GACtCoI,SAAUS,GAAsB,eAAgBzd,EAAOgd,GACvDK,YAAY,MACZU,iBAAgB,MACbC,wBAAqBC,OAAS,CAC7BC,2BACE,sBACA,4FAMVC,QACE,kJAEU,qCAFV,iDAaVf,GAAgB,SACpBtZ,EACA9D,EACAgd,GAHoB,OAIjB,SAAChF,GACJgF,EAAS,MACJhd,EADG,MAEL8D,EAAMkU,EAAMoG,cAAcpe,WAIzByd,GAAwB,SAAC3Z,EAAiC9D,EAAuBgd,GAAzD,OAAyF,SACrHhF,GAEAgF,EAAS,MACJhd,EADG,CAEN0U,SAAU,MACL1U,EAAM0U,SADH,MAEL5Q,EAAMkU,EAAMoG,cAAcpe,aAK3Bwd,GAAkB,SAACxd,EAAuBgd,GAAxB,OAAwD,SAC9EU,GACG,IACKlJ,EAAaxU,EAAbwU,SAEF6J,EAA+B,SAAjBX,EAAO1d,WAAmB6G,EAAY6W,EAAO1d,MAEjE,IAAKwU,GAAgC,IAApBA,EAAS5S,QAAgB4S,EAAS8J,WAAW,eAAgB,CAC5E,IAAIC,EAAc,GAElB,QAAoB1X,IAAhBwX,EAA2B,CAC7B,IAEa,EAFPlR,EAAUyP,GAAkBpc,MAAK,SAAC2M,GAAD,OAAaA,EAAQnN,QAAUqe,KAEtE,GAAIlR,EACFoR,EAAW,UAAGpR,EAAQ0P,eAAX,QAAsB,GAIrCG,EAAS,MACJhd,EADG,CAENwU,SAAU+J,EACV7J,SAAU,MACL1U,EAAM0U,SADH,CAENrU,SAAUge,YAIdrB,EAAS,MACJhd,EADG,CAEN0U,SAAU,MACL1U,EAAM0U,SADH,CAENrU,SAAUge,SAkBX,SAAST,GAAkCD,GAChD,OAAOA,GAAW,GAAK,EAAI,I,4VC5NrBhB,GAAcF,eAAdE,UAOK6B,GAAa,SAAC1Y,GAAiB,IAClC9F,EAAoB8F,EAApB9F,MAAOgd,EAAalX,EAAbkX,SACTI,EAAgB,SAACtZ,GAAD,OAAqC,SACzDkU,GAEAgF,E,kWAAS,IACJhd,EADG,MAEL8D,EAAMkU,EAAMoG,cAAcpe,WAI/B,OACE,sCACE,yBAAIid,UAAU,gBAAd,QAEA,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,wBACb,mBAAC,GAAD,CACEC,WAAY,GACZvf,MAAM,qBACNqC,MAAOA,EAAMiL,gBACb+R,SAAUI,EAAc,mBACxBC,YAAY,aAGhB,0BAAKJ,UAAU,wBACb,mBAAC,GAAD,CACEC,WAAY,GACZvf,MAAM,mBACNqC,MAAOA,EAAMkL,cACb8R,SAAUI,EAAc,uB,8xDCnC5BT,GAAsBF,eAAtBE,UAAW8B,GAAWhC,eAAXgC,OAKbC,GAAYC,0BAAc,iBAAO,CACrCC,SAAUC,eAAF,MAGRC,UAAWD,eAAF,MAGTE,WAAYF,eAAF,MAGVjM,IAAKiM,eAAF,UAaQG,GAAW,SAAClZ,GAAiB,IAKlB1C,EAJdpD,EAAsD8F,EAAtD9F,MAAOgd,EAA+ClX,EAA/CkX,SAAUiC,EAAqCnZ,EAArCmZ,SAAUC,EAA2BpZ,EAA3BoZ,YAAajC,EAAcnX,EAAdmX,UAC1CkC,EAAST,KAFyB,EA6F1C,SAAyB1C,GAAsE,SAC7CoD,sBAAoBpD,GADyB,GACtFqD,EADsF,KACpEC,EADoE,KAEvFC,EAAcC,aAAYxD,GAYhC,OATAyD,sBAAU,WACHF,IAAevD,GAAkBqD,GACpCC,GAAoB,GAElBC,IAAgBvD,GAAiBqD,GACnCC,GAAoB,KAErB,CAACC,EAAavD,EAAeqD,IAEzB,CAACA,EAAkBC,GAxGsBI,CAAgB1f,EAAMgc,eAH9B,UAGjCqD,EAHiC,KAGfC,EAHe,KAYxC,OACE,0BAAKrC,UAAWA,GACd,0BAAKA,UAAWkC,EAAOP,SAAW,YAChC,mBAAC,GAAD,CACE3B,UAAWkC,EAAOL,UAClB5B,WAAY,EAEZC,WAAY,KACZxf,MAAM,QACNT,KAAK,OACL8C,MAAOA,EAAMoD,MACb+a,QAAS,gFACTnB,UAnBc5Z,EAmBS,QAnBqB,SAAC4U,GACnDgF,EAAS,MACJhd,EADG,MAELoD,EAAQ4U,EAAMoG,cAAcpe,aAkB3B,mBAAC,UAAD,CACE2f,QAAS,cACTvH,MAAM,eACNwH,KAAK,QACLC,QAAS,SAAC7H,GACRA,EAAM8H,iBACNb,QAIN,0BAAKhC,UAAU,WACb,mBAAC,GAAD,CACEtf,MAAO0hB,EAAmB,QAAU,MACpCnC,WAAY,EACZK,QACE,mBAAC,iBAAD,CACEF,YAAagC,EAAmB,iBAAmB,oCACnDrf,MAAOA,EAAM0T,KAAO,GACpBsJ,SAAU,SAAC+C,GAAD,OACR/C,EAAS,MACJhd,EADG,CAEN0T,IAAKqM,MAGTb,YAAaA,IAGjBjC,UAAW4B,eAAF,SAMb,0BAAK5B,UAAWkC,EAAOvM,KACrB,mBAAC6L,GAAD,CACEuB,WAAY,UACZriB,MAAM,gBACNsiB,QAASZ,EACTrC,SAAU,WACJqC,GACFrC,EAAS,MACJhd,EADG,CAENgc,mBAAenV,KAGnByY,GAAqBD,MAIxBA,GACC,mBAACa,GAAA,EAAD,CACEC,SAAS,EAETnD,SAAU,SAACoD,GACTpD,EAAS,MACJhd,EADG,CAENgc,cAAeoE,EAAGC,QAGtBC,QAAStgB,EAAMgc,mB,wvBC9G3B,IAAM0C,GAAYC,0BAAc,SAAC4B,GAAD,MAA0B,CACxDC,SAAU3B,eAAF,KACY0B,EAAME,QAAQC,GACvBH,EAAMI,OAAOC,UAExB9E,SAAU+C,eAAF,KACW0B,EAAME,QAAQI,QAQtBC,GAAY,SAAChb,GAAiB,IACjC9F,EAAoB8F,EAApB9F,MAAOgd,EAAalX,EAAbkX,SACTuD,EAAQQ,sBACR5B,EAAST,GAAU6B,GAEzB,OACE,sCACE,yBAAItD,UAAU,gBAAd,cAEA,0BAAKA,UAAWkC,EAAOqB,UAAvB,iGAICxgB,GAASA,EAAM4B,OAAS,GACvB,0BAAKqb,UAAU,iBACZjd,EAAMoB,KAAI,SAACgC,EAAOmR,GACjB,OACE,mBAAC,GAAD,CACE0I,UAAWkC,EAAOrD,SAClBhY,IAAKyQ,EACLvU,MAAOoD,EACP4Z,SAAU,SAACgE,GACT,IAAMC,EAAe,GAAIjhB,GACzBihB,EAAaC,OAAO3M,EAAO,EAAGyM,GAC9BhE,EAASiE,IAEXhC,SAAU,WACR,IAAMgC,EAAe,GAAIjhB,GACzBihB,EAAaC,OAAO3M,EAAO,GAC3ByI,EAASiE,IAEX/B,YAAa,CACX,CACElf,MAAOmhB,sBAAoBC,SAC3BzjB,MAAO,YACP0jB,cAAe,yBACfC,OAAQC,iBAAeC,cASrC,mBAAC,UAAD,CACE7B,QAAS,YACT1C,UAAW4B,eAAF,MAGTe,KAAK,OACLC,QAAS,SAAC7H,GACRA,EAAM8H,iBACN,IAAMmB,EAAe,GAAH,UAAQjhB,GAAS,IAAjB,CAAsB,CAAEoD,MAAO,GAAIsQ,IAAK,MAC1DsJ,EAASiE,KATb,S,0sBCxDC,ICSMQ,GAAsB,SACjCzE,EACA0E,EACAC,GASA,OAPiBC,wBACf,SAACC,GACC7E,EAAS2E,EAAQD,EAAOG,MAE1B,CAAC7E,EAAU0E,EAAOC,KAMTG,GAAkBC,8BAAsDlb,GAExEmb,GAAc,WACzB,IAAMC,EAAWC,sBAAWJ,IAE5B,IAAKG,EACH,MAAM,IAAIE,MAAM,8BAGlB,OAAOF,GCFIG,GAAe,SAACC,EAAwCR,GACnE,OAAQA,EAAO3kB,MACb,IAvCiB,eAwCf,OAAO2kB,EAAOpO,QAAQpS,MAExB,IA3CgB,OA4Cd,OAAOghB,GAAa,GAEtB,QACE,OAAOA,IAIAC,GAAsB,SACjCC,EACAV,GAEA,OAAQA,EAAO3kB,MACb,IAtDyB,uBAuDvB,OAAO2kB,EAAOpO,QAAQ+O,aAExB,IA3DgB,OA4Dd,OAAOD,GAAoB,GAE7B,QACE,OAAOA,I,mhCC3CN,IAAMZ,GAAU,SACrBD,EACAG,GAEA,OAAQA,EAAO3kB,MACb,ICnBsB,eDoBpB,mBAAWwkB,GAAX,CAAmBxhB,EAAiB2hB,EAAOpO,QAAQtT,MAErD,ICrByB,kBDsBvB,IAAMsiB,EAAiBf,EAAOlhB,MAAK,SAACI,GAAD,OAAOA,EAAET,KAAO0hB,EAAOpO,QAAQtT,MAC5DuiB,EAAkB,CAACD,GAAJ,UnBqOA,SAAdE,EAAe3lB,EAA2BuD,GACrD,IAAMqiB,EAAWriB,EAAQmH,QAAO,SAAC9G,GAEsB,MAArD,OAAItD,EAA6CsD,GAC/C,UAAOA,EAAEvB,yBAAT,aAAO,EAAqBsB,MAAK,SAACwI,GAAD,OAAQA,EAAG5J,cAAgBvC,EAAOmD,MAG9DpD,EAA6B6D,IAAM5D,EAAOmD,KAAOS,EAAEwC,SAG5D,kBAAWwf,GAAX,EAAwBA,EAASC,SAAQ,SAACC,GAAD,OAAWH,EAAYG,EAAOviB,QmB/OvBoiB,CAAYF,EAAgBf,KAClEqB,EAAmBrB,EAAOha,QAC9B,SAAC1K,GAAD,OAAa0lB,EAAgB/hB,MAAK,SAACqiB,GAAD,OAAcA,EAAS7iB,KAAOnD,EAAOmD,SAEzE,OAAgC,IAA5B4iB,EAAiBnhB,OACZ,CAAC1B,EAAiB,MAEpB6iB,EAET,IC/B8B,uBDgC5B,OAAOrB,EACJha,QAAO,SAAC1K,GAAD,OAGJC,EAAwB4kB,EAAOpO,QAAQvW,MAAMuC,gBAAiBzC,EAAOmD,KAAO0hB,EAAOpO,QAAQtT,MAE9FiB,KAAI,SAACpE,GACJ,OAAIA,EAAOmD,KAAO0hB,EAAOpO,QAAQtT,GACxBnD,EAST,IACEmD,GAAInD,EAAOmD,GACXjD,KAAM2kB,EAAOpO,QAAQvW,MAClBD,EAAwB4kB,EAAOpO,QAAQvW,MAAMa,aAIxD,ICvD+B,wBDwD7B,OAAO2jB,EAAOtgB,KAAI,SAACpE,GACjB,GAAIA,EAAOmD,KAAO0hB,EAAOpO,QAAQtT,GAC/B,OAAOnD,EAGT,IAAMimB,EAAY,MACbjmB,EADU,CAEboG,MAAOye,EAAOpO,QAAQrQ,QAGxB,OAAIhG,EAAsBJ,GACxB,MAAYimB,EAAZ,CAAuB1jB,YAAasiB,EAAOpO,QAAQrQ,QAG9C6f,KAGX,ICrEoC,6BDsElC,OAAOvB,EAAOtgB,KAAI,SAACpE,GACjB,OAAIA,EAAOmD,KAAO0hB,EAAOpO,QAAQtT,GACxBnD,EAGT,MACKA,EADL,CAEEgJ,MAAOhJ,EAAOgJ,UAIpB,ICpFiC,0BDqF/B,OAAO0b,EAAOtgB,KAAI,SAACpE,GACjB,GAAIA,EAAOmD,KAAO0hB,EAAOpO,QAAQzW,OAAOmD,GACtC,OAAOnD,EAIT,GAAIQ,EAAgCR,GAAS,CAC3C,IAAMkmB,EAAczf,EAAY,MAC3BzG,EAAOyB,SADmB,MAE5BojB,EAAOpO,QAAQ0P,YAActB,EAAOpO,QAAQsM,YAG/C,aACK/iB,EADL,CAEEyB,SAAU,MACLykB,KAMT,OAAOlmB,KAGX,IC5G8B,uBD6G5B,OAAO0kB,EAAOtgB,KAAI,SAACpE,GACjB,OAAIA,EAAOmD,KAAO0hB,EAAOpO,QAAQzW,OAAOmD,GAC/BnD,EpBuM0B,SACzCA,GADyC,OAEDC,EAAwBD,EAAOE,MAAMW,QoBrMnEulB,CAA4BpmB,GAC9B,MACKA,EADL,CAEEqB,KAAM,MACDrB,EAAOqB,KADR,MAEDwjB,EAAOpO,QAAQpV,KAAOwjB,EAAOpO,QAAQsM,aAMrC/iB,KAGX,IChImC,uBDiIjC,OAAO0kB,EAAOtgB,KAAI,SAACpE,GACjB,OAAIA,EAAOmD,KAAO0hB,EAAOpO,QAAQzW,OAAOmD,GAC/BnD,EAGT,MACKA,EADL,MAEG6kB,EAAOpO,QAAQ4P,UAAYxB,EAAOpO,QAAQsM,cAIjD,IDxJgB,OCyJd,OAAI2B,aAAA,EAAAA,EAAO9f,QACF8f,EAEF,CAACxhB,EAAiB,MAE3B,QACE,OAAOwhB,I,mhCEjJN,IAAMC,GAAU,SACrBD,EACAG,GAEA,OAAQA,EAAO3kB,MACb,IClB0B,kBDmBxB,IAAMomB,EAAgB,CACpBnjB,GAAI0hB,EAAOpO,QAAQtT,GACnBjD,KAAM,QACNuB,SAAU8S,GAAuB,MAAUC,iBAIvC+R,EAAU7B,EAAOA,EAAO9f,OAAS,GACvC,MAAsB,oBAAlB2hB,aAAA,EAAAA,EAASrmB,MACX,aAAWwkB,EAAOpX,MAAM,EAAGoX,EAAO9f,OAAS,IAA3C,CAA+C0hB,EAAQC,IAGzD,aAAW7B,GAAX,CAAmB4B,IAErB,IChC6B,qBDiC3B,OAAO5B,EAAOha,QAAO,SAAC2K,GAAD,OAAeA,EAAUlS,KAAO0hB,EAAOpO,QAAQtT,MAEtE,IClCkC,0BDmChC,OAAOuhB,EAAOtgB,KAAI,SAACiR,GACjB,OAAIA,EAAUlS,KAAO0hB,EAAOpO,QAAQtT,GAC3BkS,EASF,CACLlS,GAAIkS,EAAUlS,GACdjD,KAAM2kB,EAAOpO,QAAQ+P,QACrB/kB,SAAU8S,GAAwBsQ,EAAOpO,QAAQ+P,SAAShS,oBAIhE,ICpDmC,2BDqDjC,OAAOkQ,EAAOtgB,KAAI,SAACiR,GACjB,OAAIA,EAAUlS,KAAO0hB,EAAOpO,QAAQtT,GAC3BkS,EAGT,MACKA,EADL,CAEEjP,MAAOye,EAAOpO,QAAQuN,cAI5B,ID5D8B,uBC+D5B,OAAI/jB,EAAwB4kB,EAAOpO,QAAQvW,MAAMuC,eACxC,GACoB,IAAlBiiB,EAAO9f,OAIT,CAACxB,KAEHshB,EAET,IC5EqC,6BD6EnC,OAAOA,EAAOtgB,KAAI,SAACiR,GACjB,GAAIA,EAAUlS,KAAO0hB,EAAOpO,QAAQpB,UAAUlS,GAC5C,OAAOkS,EAGT,IAAM6Q,EAAczf,EAAY,MAC3B4O,EAAU5T,SADgB,MAE5BojB,EAAOpO,QAAQ0P,YAActB,EAAOpO,QAAQsM,YAG/C,aACK1N,EADL,CAEE5T,SAAU,MACLykB,QAKX,IHpGgB,OGqGd,OAAIxB,aAAA,EAAAA,EAAO9f,QACF8f,EAEF,CAACthB,EAAiB,MAE3B,QACE,OAAOshB,I,wVErGb,IAAM+B,GAAoB1B,8BAA6Clb,GACjE6c,GAAe3B,8BAA8Clb,GAStD8c,GAAkD,SAAC,GAM1D,INjBwDC,EMY5DhB,EAKI,EALJA,SACA5F,EAII,EAJJA,SACA6G,EAGI,EAHJA,WACAxiB,EAEI,EAFJA,MACAP,EACI,EADJA,WAEMgjB,EAAgBlC,wBACpB,SAACvgB,GACC2b,EAAS3b,GACTwiB,MAEF,CAAC7G,EAAU6G,IAGPlC,GN1BsDiC,EM0B5B,CAC9BviB,MAAO+gB,GACPzZ,MAAO2Z,GACP/hB,QAASwjB,GACT5gB,WAAY6gB,IN9BiG,SAC/GtC,EACAG,GAEA,IAAMoC,EAAW,GACjB,IAAK,IAAMngB,KAAO8f,EAChBK,EAASngB,GAAO8f,EAAS9f,GAAK4d,EAAM5d,GAAM+d,GAE5C,OAAOoC,IMyBDhC,EAAWR,IAEf,SAACwC,GAAD,OAAcH,E,kWAAc,IAAKziB,EAAN,GAAgB4iB,EAAhB,CAA0B5gB,UAAWvC,EAAWuC,eAC3EhC,EACAsgB,GAKF,OAAKtgB,EAAMd,SAAYc,EAAM8B,iBAA8B0D,IAAhBxF,EAAMA,MAO/C,mBAACoiB,GAAkBS,SAAnB,CAA4BlkB,MAAOc,GACjC,mBAAC4iB,GAAaQ,SAAd,CAAuBlkB,MAAOqB,GAC5B,mBAACygB,GAAgBoC,SAAjB,CAA0BlkB,MAAOiiB,GAAWW,MARhDX,EL1BwC,CAAE/kB,KAtB1B,SKkDT,OAYEinB,GAAW,WACtB,IAAM9iB,EAAQ6gB,sBAAWwB,IAEzB,IAAKriB,EACH,MAAM,IAAI8gB,MAAM,oCAGlB,OAAO9gB,GAGI+iB,GAAgB,WAC3B,IAAMtjB,EAAaohB,sBAAWuB,IAC9B,IAAK3iB,EACH,MAAM,IAAIqhB,MAAM,oCAGlB,OAAOrhB,G,mQC7EF,IAAM4d,GAAYC,0BAAc,SAAC4B,EAAqB8D,GAAtB,MAA2C,CAChFC,MACED,GACAxF,eADM,KAMOwF,EAAS9D,EAAMI,OAAO4D,UAAYhE,EAAMI,OAAOvZ,UC8BnDod,GAAoB,SAACrkB,EAA6BiD,GAA9B,MAA0E,CACzGlG,KL/BiC,wBKgCjCuW,QAAS,CACPtT,KACAiD,WAwBSqhB,GAAsB,SACjCznB,EACAmmB,EAEApD,GAJiC,MAKC,CAClC7iB,KL/DmC,0BKgEnCuW,QAAS,CACPzW,SACAmmB,cACApD,c,y4BC5EJ,IAAM2E,GAAS7F,eAAH,MAiBC8F,GAAiF,SAAC,GAAD,IAC5FC,EAD4F,EAC5FA,SACA/E,EAF4F,EAE5FA,QACA5C,EAH4F,EAG5FA,UACAtf,EAJ4F,EAI5FA,MACGknB,EALyF,wDAO5F,gCAAQ5H,UAAW6H,cAAG,8CAA+C7H,GAAY4C,QAASA,GAAagF,GACrG,2BAAM5H,UAAWyH,IAAS/mB,GAC1B,mBAAC,QAAD,CAAM2B,KAAMslB,EAAUG,cAAY,W,4MCf/B,IAAMC,GAAsC,SAAC,GAAyC,IAAvCzQ,EAAuC,EAAvCA,MAAO0Q,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC5E,OACE,0BACElI,UAAW4B,eAAF,OAIE,IAAVtK,GAAe,mBAAC,GAAD,CAAYqQ,SAAS,OAAO/E,QAASoF,EAAOtnB,MAAM,QAEjEwnB,EAASvjB,QAAU,GAAK,mBAAC,GAAD,CAAYgjB,SAAS,QAAQ/E,QAASqF,EAAUvnB,MAAM,a,sMCjBrF,IAAMynB,GAASvG,eAAH,MAINwG,GAAW,SAACroB,GAAD,MAAgC,CAC/CW,MAAO6F,EAAexG,GACtBgD,MAAOhD,IAYIsoB,GAAyC,SAAC,GAAD,IATnC/kB,EASsC2N,EAAH,EAAGA,QAAS8O,EAAZ,EAAYA,SAAUC,EAAtB,EAAsBA,UAAWjd,EAAjC,EAAiCA,MAAjC,OACpD,mBAAC,WAAD,CACEid,UAAW6H,cAAG7H,EAAWmI,IACzBlX,SAZe3N,EAYI2N,EAZwE3N,EAAQa,IAAIikB,KAavGrI,SAAUA,EACVK,YAAY,gBACZrd,MAASA,EAAQqlB,GAASnX,EAAQ1N,MAAK,SAACkd,GAAD,OAAYA,EAAOvd,KAAOH,MAAW,Q,mhCCrBzE,IAAM2hB,GAAU,WAAqE,IAApED,EAAoE,uDAAxC,GAAIG,EAAoC,uCAC1F,OAAQA,EAAO3kB,MACb,ICViC,yBDW/B,mBAAWwkB,GAAX,C5BX0D,CAAEpiB,KAAM,OAAQC,YAAa,M4BazF,ICZoC,4BDalC,OAAOmiB,EAAMpX,MAAM,EAAGuX,EAAOpO,QAAQc,OAAOqG,OAAO8G,EAAMpX,MAAMuX,EAAOpO,QAAQc,MAAQ,IAExF,ICdoC,4BDelC,OAAOmN,EAAMtgB,KAAI,SAACmkB,EAAkBhR,GAClC,OAAIA,IAAUsN,EAAOpO,QAAQc,MACpBgR,EAGT,MACKA,EADL,CAEEjmB,KAAMuiB,EAAOpO,QAAQ+R,aAI3B,ICzB2C,mCD0BzC,OAAO9D,EAAMtgB,KAAI,SAACmkB,EAAkBhR,GAClC,OAAIA,IAAUsN,EAAOpO,QAAQc,MACpBgR,EAGT,MACKA,EADL,CAEEhmB,YAAasiB,EAAOpO,QAAQwP,eAIlC,QACE,OAAOvB,I,ufE1BN,SAAS+D,GAAT,GAMS,IALd9nB,EAKc,EALdA,MACAwlB,EAIc,EAJdA,YACAnmB,EAGc,EAHdA,OACAqgB,EAEc,EAFdA,YACAc,EACc,EADdA,QAEM8D,EAAWD,KACV7hB,EAFO,GAEDif,oBAASsG,mBAAS,iBAFjB,MAGRjnB,EAAWzB,EAAOyB,SAExB,OACE,mBAAC,eAAD,CAAad,MAAOA,EAAOuf,WAAY,GAAIiB,QAASA,GAClD,mBAAC,SAAD,CACEhe,GAAIA,EACJkd,YAAaA,EACbY,OAAQ,SAACzV,GAAD,OAAOyZ,EAASwC,GAAoBznB,EAAQmmB,EAAa3a,EAAE9H,OAAOV,SAC1E2lB,aAAclnB,aAAF,EAAEA,EAAW0kB,M,gnBCX1B,IAAMyC,GAAuD,SAAC,GAA+B,IAA7B5lB,EAA6B,EAA7BA,MAAO6lB,EAAsB,EAAtBA,gBACtEC,EAAqB9D,KAErBC,EAAWR,IACf,SAACwC,GAAD,OAAc6B,EPkCoB,CACpC5oB,KL/CqC,uBKgDrCuW,QAAS,CACPzW,OOrCuDgD,EPsCvDqjB,UOtC8D,oBPuC9DtD,SOvCmFkE,OACnFjkB,EAAMX,kBACNsiB,IAWF,OANAlC,sBAAU,WAAM,OACV,UAACzf,EAAMX,yBAAP,aAAC,EAAyBuC,SAC5BqgB,EC5B6D,CACjE/kB,KHPmC,6BEoChC,IAGD,sCACE,0BACE+f,UAAW4B,eAAF,OAIT,mBAAC,eAAD,CAAakH,MAAO,IAApB,aACA,0BACE9I,UAAW4B,eAAF,OAOR7e,EAAMX,kBAAmB+B,KAAI,SAAC4kB,EAAazR,GAAd,OAC5B,mBAAC,YAAD,CAAUzQ,IAAKkiB,EAAY1mB,MACzB,0BACE2d,UAAW4B,eAAF,OAMT,mBAAC,SAAD,CACE8G,aAAcK,EAAY1mB,KAC1B+d,YAAY,gBACZY,OAAQ,SAACzV,GAAD,OAAOyZ,ECjDK,SAACuD,EAAiBjR,GAAlB,MAA8D,CAClGrX,KHhBsC,4BGiBtCuW,QAAS,CACPc,QACAiR,YD6CsCS,CAAuBzd,EAAE9H,OAAOV,MAAOuU,OAEjE,mBAAC,GAAD,CACEyI,SAAU,SAACxU,GAAD,OAAOyZ,EC5CS,SAACgB,EAAmB1O,GAApB,MAAgE,CAC1GrX,KHvB6C,mCGwB7CuW,QAAS,CACPc,QACA0O,cDwCwCiD,CAA6B1d,EAAExI,MAAOG,GAAIoU,KACpErG,QAAS2X,EACT7lB,MAAOgmB,EAAYzmB,eAIvB,mBAAC,GAAD,CACEgV,MAAOA,EACP4Q,SAAUnlB,EAAMX,mBAAqB,GACrC4lB,MAAO,kBAAMhD,ECxEsC,CACjE/kB,KHPmC,4BE+ErBgoB,SAAU,kBAAMjD,ECrEM,SAAC1N,GAAD,MAA6C,CACjFrX,KHVsC,4BGWtCuW,QAAS,CACPc,UDkEqC4R,CAAuB5R,aAO1D,mBAACkR,GAAD,CACE9nB,MAAM,SACNX,OAAQgD,EACRmjB,YAAY,SACZhF,QAAQ,yOACRd,YAAY,gC,mME3Fb,IAAM+I,GAAgBvH,eAAH,M,umCCI1B,IAAMH,GAAYC,0BAAc,SAAC4B,EAAqB8D,GACpD,MAAO,CACLgC,QAASxH,eAAF,MAIPyH,gBAAiBzH,eAAF,KACE0B,EAAME,QAAQ8F,IAE/B3G,KAAMf,eAAF,KACc0B,EAAME,QAAQ8F,IAEhCC,OAAQ3H,eAAF,KAEFwF,GACFxF,eADQ,KAEG0B,EAAMI,OAAO4D,gBAUjBkC,GAAoD,SAAC,GAAwC,IAAtC9oB,EAAsC,EAAtCA,MAAOilB,EAA+B,EAA/BA,SAA+B,IAArByB,cAAqB,cAChFjF,qBAAS,GADuE,GACjGsH,EADiG,KAC3FC,EAD2F,KAElGxH,EAAST,GAAUqC,sBAAYsD,GAErC,OACE,mBAAC,sBAAD,KACE,0BAAKpH,UAAW6H,cAAG3F,EAAOkH,UACxB,6BACEpJ,UAAW6H,cAAG,2BAA4B3F,EAAOqH,OAAQJ,IACzDvG,QAAS,kBAAM8G,GAASD,IACxBE,gBAAeF,GAEf,mBAAC,QAAD,CAAMpnB,KAAMonB,EAAO,aAAe,cAAe3B,cAAY,OAAO9H,UAAWkC,EAAOS,OACrFjiB,GAGF+oB,GAAQ,0BAAKzJ,UAAWkC,EAAOmH,iBAAkB1D,M,orCCpCnD,IAAMiE,GAAwD,SAAC,GAAe,8CAAb7pB,EAAa,EAAbA,OAChEilB,EAAWD,KAEjB,OACE,sCACE,mBAAC,eAAD,CAAarkB,MAAM,SACjB,mBAAC,UAAD,CACEqf,SAAU,SAAChd,GAAD,OAAWiiB,EAASwC,GAAoBznB,EAAQ,QAASgD,EAAMA,SACzEkO,QAASjO,EACTD,MAAK,UAAEhD,EAAOyB,gBAAT,aAAE,EAAiBK,SAI5B,mBAAC,eAAD,CAAanB,MAAM,UACjB,mBAAC,SAAD,CACEsgB,OAAQ,SAACzV,GAAD,OAAOyZ,EAASwC,GAAoBznB,EAAQ,SAAUwR,SAAShG,EAAE9H,OAAOV,MAAQ,OACxF2lB,aAAY,UAAE3oB,EAAOyB,gBAAT,aAAE,EAAiBM,UAInC,mBAAC,eAAD,CAAapB,MAAM,WACjB,mBAAC,SAAD,CACEsgB,OAAQ,SAACzV,GAAD,OAAOyZ,EAASwC,GAAoBznB,EAAQ,UAAWwR,SAAShG,EAAE9H,OAAOV,MAAQ,OACzF2lB,aAAY,UAAE3oB,EAAOyB,gBAAT,aAAE,EAAiBqoB,WrC6LN,SAAC9pB,GAAD,YACN,UAA3B,UAAAA,EAAOyB,gBAAP,eAAiBK,OqC1LZioB,CAAoB/pB,IACnB,sCACE,mBAAC,eAAD,CAAaW,MAAM,SACjB,mBAAC,SAAD,CACEsgB,OAAQ,SAACzV,GAAD,OAAOyZ,EAASwC,GAAoBznB,EAAQ,QAASwR,SAAShG,EAAE9H,OAAOV,MAAQ,OACvF2lB,aAAY,UAAE3oB,EAAOyB,gBAAT,aAAE,EAAiBuoB,SAInC,mBAAC,eAAD,CAAarpB,MAAM,YACjB,mBAAC,UAAD,CACEqf,SAAU,SAACxU,GAAD,OACRyZ,EAASwC,GAAoBznB,EAAQ,WAAYwL,EAAE9H,OAAOuf,WAE5DA,WAAU,UAACjjB,EAAOyB,gBAAR,aAAC,EAAiBwoB,crC8KP,SAACjqB,GAAD,YACN,UAA3B,UAAAA,EAAOyB,gBAAP,eAAiBK,OqCzKZooB,CAAoBlqB,IACnB,sCACE,mBAAC,eAAD,CAAaW,MAAM,SACjB,mBAAC,SAAD,CACEsgB,OAAQ,SAACzV,GAAD,aACNyZ,EACEwC,GAAoBznB,EAAQ,WAAT,gBACdA,EAAOyB,gBADO,aACd,EAAiBA,SADH,CAEjBuoB,MAAOxY,SAAShG,EAAE9H,OAAOV,MAAQ,SAIvC2lB,aAAY,UAAE3oB,EAAOyB,gBAAT,iBAAE,EAAiBA,gBAAnB,aAAE,EAA2BuoB,SAG7C,mBAAC,eAAD,CAAarpB,MAAM,QACjB,mBAAC,SAAD,CACEsgB,OAAQ,SAACzV,GAAD,aACNyZ,EACEwC,GAAoBznB,EAAQ,WAAT,gBACdA,EAAOyB,gBADO,aACd,EAAiBA,SADH,CAEjB0oB,KAAM3Y,SAAShG,EAAE9H,OAAOV,MAAQ,SAItC2lB,aAAY,UAAE3oB,EAAOyB,gBAAT,iBAAE,EAAiBA,gBAAnB,aAAE,EAA2B0oB,QAI7C,mBAAC,eAAD,CAAaxpB,MAAM,YACjB,mBAAC,UAAD,CACEqf,SAAU,SAACxU,GAAD,OACRyZ,EAASwC,GAAoBznB,EAAQ,WAAYwL,EAAE9H,OAAOuf,WAE5DA,WAAU,UAACjjB,EAAOyB,gBAAR,aAAC,EAAiBwoB,crCyIA,SACxCjqB,GADwC,YAE+B,kBAA3B,UAAAA,EAAOyB,gBAAP,eAAiBK,OqCrIxDsoB,CAA2BpqB,IAC1B,sCACE,mBAAC,eAAD,CAAaW,MAAM,SACjB,mBAAC,SAAD,CACEsgB,OAAQ,SAACzV,GAAD,aACNyZ,EACEwC,GAAoBznB,EAAQ,WAAT,gBACdA,EAAOyB,gBADO,aACd,EAAiBA,SADH,CAEjBuoB,MAAOxY,SAAShG,EAAE9H,OAAOV,MAAQ,SAIvC2lB,aAAY,UAAE3oB,EAAOyB,gBAAT,iBAAE,EAAiBA,gBAAnB,aAAE,EAA2BuoB,SAG7C,mBAAC,eAAD,CAAarpB,MAAM,QACjB,mBAAC,SAAD,CACEsgB,OAAQ,SAACzV,GAAD,aACNyZ,EACEwC,GAAoBznB,EAAQ,WAAT,gBACdA,EAAOyB,gBADO,aACd,EAAiBA,SADH,CAEjB0oB,KAAM3Y,SAAShG,EAAE9H,OAAOV,MAAQ,SAItC2lB,aAAY,UAAE3oB,EAAOyB,gBAAT,iBAAE,EAAiBA,gBAAnB,aAAE,EAA2B0oB,QAG7C,mBAAC,eAAD,CAAaxpB,MAAM,SACjB,mBAAC,SAAD,CACEsgB,OAAQ,SAACzV,GAAD,aACNyZ,EACEwC,GAAoBznB,EAAQ,WAAT,gBACdA,EAAOyB,gBADO,aACd,EAAiBA,SADH,CAEjB4oB,MAAO7Y,SAAShG,EAAE9H,OAAOV,MAAQ,SAIvC2lB,aAAY,UAAE3oB,EAAOyB,gBAAT,iBAAE,EAAiBA,gBAAnB,aAAE,EAA2B4oB,SAG7C,mBAAC,eAAD,CAAa1pB,MAAM,UACjB,mBAAC,SAAD,CACEsgB,OAAQ,SAACzV,GAAD,aACNyZ,EACEwC,GAAoBznB,EAAQ,WAAT,gBACdA,EAAOyB,gBADO,aACd,EAAiBA,SADH,CAEjB6oB,OAAQ9Y,SAAShG,EAAE9H,OAAOV,MAAQ,SAIxC2lB,aAAY,UAAE3oB,EAAOyB,gBAAT,iBAAE,EAAiBA,gBAAnB,aAAE,EAA2B6oB,UAI7C,mBAAC,eAAD,CAAa3pB,MAAM,OACjB,mBAAC,UAAD,CACEqf,SAAU,SAACxU,GAAD,aACRyZ,EACEwC,GAAoBznB,EAAQ,WAAT,gBAA0BA,EAAOyB,gBAAjC,aAA0B,EAAiBA,SAA3C,CAAqD8oB,IAAK/e,EAAE9H,OAAOuf,aAG1FA,WAAU,UAACjjB,EAAOyB,gBAAR,iBAAC,EAAiBA,gBAAlB,aAAC,EAA2B8oB,QAI1C,mBAAC,eAAD,CAAa5pB,MAAM,YACjB,mBAAC,UAAD,CACEqf,SAAU,SAACxU,GAAD,OACRyZ,EAASwC,GAAoBznB,EAAQ,WAAYwL,EAAE9H,OAAOuf,WAE5DA,WAAU,UAACjjB,EAAOyB,gBAAR,aAAC,EAAiBwoB,gB,wsBCrJ1C,IAAMO,GAAgE,CACpEtK,WAAY,IAQDuK,GAA2C,SAAC,GAAgC,gBAA9BzqB,EAA8B,EAA9BA,OAAQ6oB,EAAsB,EAAtBA,gBAC3D5D,EAAWD,KACX0F,ECxBsB,SAAC1qB,GAAsC,UACnE,OAAQA,EAAOE,MACb,IAAK,cAAe,MACZyqB,GAAqB,UAAA3qB,EAAOyB,gBAAP,eAAiBmpB,sBAAuB,GACnE,qCAA+BD,GAGjC,IAAK,cACsE,MAAzE,OAAI,UAAA3qB,EAAOyB,gBAAP,eAAiBC,YAAY,UAAA1B,EAAOyB,gBAAP,mBAAiBC,gBAAjB,eAA2BkD,SAAU,EACpE,4BAAkB5E,EAAOyB,gBAAzB,aAAkB,EAAiBC,UAG9B,oBAET,IAAK,iBACH,IAAMmpB,EAAgB7mB,OAAO2C,QAAQ3G,EAAOqB,MAAQ,IACjD+C,KAAI,4BAAE0C,EAAF,mBAAuB,UAAI/D,EAAcS,KArBrC,SAACR,GAAD,OAAmB,SAAC8nB,GAAD,OAA+BA,EAAO9nB,QAAUA,GAqBzB+nB,CAASjkB,WAAhC,aAAI,EAAmCnG,UAClE+J,OAAOsgB,SAEV,uBAAiBH,EAAcjmB,OAAS,EAAIimB,EAAchmB,KAAK,MAAQ,iBAGzE,IAAK,eACL,IAAK,WAAY,MACTnC,GAAO,UAAA1C,EAAOyB,gBAAP,eAAiBiB,OAAQ,IACtC,sBAAgBA,GAGlB,QACE,MAAO,WDLSuoB,CAAejrB,GAC7BqE,EAAQ8iB,KAEd,OACE,mBAAC,GAAD,CAAyBxmB,MAAO+pB,EAAarD,OAAQrnB,EAAOgJ,MACzC,eAAhBhJ,EAAOE,MAAyB,mBAACuoB,GAAD,CAAc9nB,MAAM,OAAOX,OAAQA,EAAQmmB,YAAY,SAEvE,gBAAhBnmB,EAAOE,MACN,mBAAC,eAAD,CAAaS,MAAM,OACjB,mBAAC,SAAD,CACEsgB,OAAQ,SAACzV,GAAD,OAAOyZ,EAASwC,GAAoBznB,EAAQ,MAAOwR,SAAShG,EAAE9H,OAAOV,MAAO,OACpF2lB,aAAY,UAAE3oB,EAAOyB,gBAAT,aAAE,EAAiBypB,OAKpB,mBAAhBlrB,EAAOE,MAA6B,mBAACuoB,GAAD,CAAc9nB,MAAM,SAASX,OAAQA,EAAQmmB,YAAY,WAE7E,eAAhBnmB,EAAOE,MAAyB,mBAAC,GAAD,CAA6BF,OAAQA,IAErD,cAAhBA,EAAOE,MACN,sCACE,mBAACuoB,GAAD,CAAc9nB,MAAM,SAASX,OAAQA,EAAQmmB,YAAY,WACzD,mBAACsC,GAAD,CAAc9nB,MAAM,SAASX,OAAQA,EAAQmmB,YAAY,WACzD,mBAACsC,GAAD,CAAc9nB,MAAM,QAAQX,OAAQA,EAAQmmB,YAAY,WAI3C,kBAAhBnmB,EAAOE,MACN,mBAAC,GAAD,CAA4B8C,MAAOhD,EAAQ6oB,gBAAiBA,KAG5C,aAAhB7oB,EAAOE,MAAuC,iBAAhBF,EAAOE,OACrC,mBAAC,eAAD,IAAaS,MAAM,QAAW6pB,IAC5B,mBAAC,SAAD,CACErnB,GAAE,mBAAckB,EAAMiC,MAApB,mBAAoCtG,EAAOmD,GAA3C,SACF8d,OAAQ,SAACzV,GAAD,OAAOyZ,EAASwC,GAAoBznB,EAAQ,OAAQwL,EAAE9H,OAAOV,SACrE2lB,aAAY,oBAAE3oB,EAAOyB,gBAAT,aAAE,EAAiBiB,YAAnB,kBAA2BzC,EAAuB,SAAac,SAASU,gBAAxE,aAA2B,EAAuDiB,QAKnF,gBAAhB1C,EAAOE,MACN,mBAACuoB,GAAD,CAAc9nB,MAAM,sBAAsBX,OAAQA,EAAQmmB,YAAY,wBAGvD,mBAAhBnmB,EAAOE,MACN,sCACG6C,EAAcqB,KAAI,SAAC+mB,GAAD,iBACjB,mBAAC,GAAD,CACErkB,IAAKqkB,EAAKnoB,MACVmoB,KAAMA,EACNnL,SAAU,SAACiD,GAAD,OAAagC,EZAL,SAC9BjlB,EACAqB,EACA0hB,GAH8B,MAIC,CAC/B7iB,KL3EgC,uBK4EhCuW,QAAS,CACPzW,SACAqB,OACA0hB,aYT0CqI,CAAiBprB,EAAQmrB,EAAKnoB,MAAOigB,KACrEjgB,WACgC6G,KAA9B,UAAA7J,EAAOqB,YAAP,eAAc8pB,EAAKnoB,WACd,UAAChD,EAAOqB,YAAR,aAAC,EAAc8pB,EAAKnoB,WACpB,UAAC/C,EAAuB,eAAmBc,SAASM,YAApD,aAAC,EAA0D8pB,EAAKnoB,aAK3E,mBAACylB,GAAD,CAAc9nB,MAAM,QAAQX,OAAQA,EAAQmmB,YAAY,QAAQ9F,YAAY,OAI/D,gBAAhBrgB,EAAOE,MACN,mBAAC,eAAD,IAAaS,MAAM,eAAkB6pB,IACnC,mBAAC,SAAD,CACEvJ,OAAQ,SAACzV,GAAD,OAAOyZ,EAASwC,GAAoBznB,EAAQ,WAAYwL,EAAE9H,OAAOV,MAAM0X,MAAM,KAAKhQ,OAAOsgB,YACjGrC,cACE,UAAA3oB,EAAOyB,gBAAP,eAAiBC,YAAjB,UAA6BzB,EAAuB,YAAgBc,SAASU,gBAA7E,aAA6B,EAA0DC,UAEzF2e,YAAY,wBtCgO2B,SACjDrgB,GADiD,OAEDC,EAAwBD,EAAOE,MAAMY,qBsC7NhFuqB,CAAoCrrB,IACnC,mBAACyoB,GAAD,CAAc9nB,MAAM,SAASX,OAAQA,EAAQmmB,YAAY,SAAS9F,YAAY,etC8MjC,SACnDrgB,GADmD,OAEDC,EAAwBD,EAAOE,MAAMU,gBsC7MlF0qB,CAAsCtrB,IACrC,mBAACyoB,GAAD,CACE9nB,MAAM,UACNX,OAAQA,EACRmmB,YAAY,UACZhF,QAAQ,2LAaZoK,GAAmE,SAAC,GAA8B,IAA5BJ,EAA4B,EAA5BA,KAAMnL,EAAsB,EAAtBA,SAAUhd,EAAY,EAAZA,MAEnFG,EAF+F,GAEzFif,oBAASsG,mBAAS,iBAFuE,MAItG,OACE,mBAAC,eAAD,IAAa/nB,MAAOwqB,EAAKxqB,OAAW6pB,GAApC,CAAsD1jB,IAAKqkB,EAAKnoB,QAC9D,mBAAC,gBAAD,CACEG,GAAIA,EACJ6c,SAAU,SAACxU,GAAD,OAA4CwU,EAASxU,EAAE9H,OAAOuf,UACxEjgB,MAAOA,M,inBEtHf,IAKMwoB,GAAoB,SAAC,GAAD,IAAGxoB,EAAH,EAAGA,MAAOoH,EAAV,EAAUA,KAAV,MAAgE,CACxFzJ,MAAOyJ,EACPpH,MAAO,GAAF,OAAKA,GAASoH,KAWfqhB,GAAqB,SAACzrB,GAAD,OAAgCC,EAAwBD,EAAOE,MAAMG,eAE1FqrB,GAAiB,SACrB7C,EACA1X,GAGA,IAAMwa,EAA8B9C,EAAgBllB,KAAK8nB,IAEzD,OACEznB,OAAO2C,QAAQ1G,GAEZyK,QAAO,YAAqD,gCAA9C7I,kBAA8C,MAAjC,EAAiC,MAA9B+pB,WAE7B,OAAOza,GAAatP,GAAcsP,SAFyB,MAAjBA,EAAiB,MAK5DzG,QAAO,0BAAKqD,GAAL,kBAAiB4d,IAAgC5d,EAAO1N,iBAC/D+D,KAAI,0BAAE0C,EAAF,WAAuB,CAC1BnG,MADG,KAASA,MAEZqC,MAAO8D,OAKF+kB,GAAyC,SAAC,GAAc,IA3CnD7rB,EA2CuCgD,EAAY,EAAZA,MACjDmf,EAAST,GAAUqC,wBAAc/gB,EAAMgG,MACvClF,EAAasjB,KACb/iB,EAAQ8iB,KACRlC,EAAWD,KAEX6D,EAAkBxkB,EAAMd,QAAS+J,MACrC,EACAjJ,EAAMd,QAASuoB,WAAU,SAACloB,GAAD,OAAOA,EAAET,KAAOH,EAAMG,OAI3CsY,EAAS,e,EAAA,G,EAAA,yBAAG,0GACVzF,EAAM,WACV,MAAmB,gBAAfhT,EAAM9C,KACD4D,EAAW2X,YAEb3X,EAAW2X,UAAU,WALd,SAQFzF,IAAMa,YARJ,mBAQqB2U,GARrB,yBAQiBpnB,IARjB,iD,iLAAH,qDAWf,OACE,sCACE,mBAAC,sBAAD,KACE,mBAAC,WAAD,CACE6b,UAAW6H,cAAG3F,EAAOmF,MAAO8B,IAC5BlY,QAASwa,GAAe7C,EAAiB/kB,EAAWqN,WACpD6O,SAAU,SAACxU,GAAD,OAAOyZ,Gd9DzB9hB,Ec8DmDH,EAAMG,Gd7DzDjD,Ec6D6DsL,EAAExI,Md5DlC,CAC7B9C,KLxBgC,uBKyBhCuW,QAAS,CACPtT,KACAjD,WAP4B,IAC9BiD,EACAjD,Gc8DQ8C,OAzEQhD,EAyEQgD,EAzEuB,CAC/CrC,MAAOV,EAAwBD,EAAOE,MAAMS,MAC5CqC,MAAOhD,EAAOE,SA0EPH,EAA6BiD,KAAW5C,EAAsB4C,IAC7D,mBAAC,gBAAD,CACEid,UAAW6H,cAAG3F,EAAOmF,MAAO8B,IAC5B2C,YAAatQ,EACbuE,SAAU,SAACxU,GAAD,OAAOyZ,EAASuC,GAAkBxkB,EAAMG,GAAIqI,EAAExI,SACxDqd,YAAY,eACZrd,MAAOA,EAAMoD,QAIhBhG,EAAsB4C,KAAW1C,EAA6C0C,IAC7E,mBAAC,GAAD,CACEid,UAAW6H,cAAG3F,EAAOmF,MAAO8B,IAC5BpJ,SAAU,SAACxU,GAAD,aAAOyZ,EAASuC,GAAkBxkB,EAAMG,GAAP,UAAWqI,EAAExI,aAAb,aAAW,EAASG,MAC/D+N,QAAS2X,EACT7lB,MAAOA,EAAMoD,SAKlB5F,EAAgCwC,IAAU,mBAAC,GAAD,CAAgBhD,OAAQgD,EAAO6lB,gBAAiBA,M,6TCzG1F,IAAMmD,GAA2C,SAAC,GAMnD,IALJpG,EAKI,EALJA,SACAjlB,EAII,EAJJA,MACAsrB,EAGI,EAHJA,cACAC,EAEI,EAFJA,YAEI,IADJ7E,cACI,SACE9D,EAAQQ,sBACR5B,EAAST,GAAU6B,GAEzB,OACE,mBAAC,kBAAD,KACE,mBAAC,sBAAD,KACE,mBAAC,eAAD,CAAawF,MAAO,GAAIoD,GAAG,OACzB,+BAAOxrB,GACP,2BAAMsf,UAAWkC,EAAOiK,aACrBF,GACC,mBAAC,cAAD,CACE5pB,KAAM+kB,EAAS,YAAc,MAC7BxE,QAASqJ,EACTG,QAAQ,SACR3pB,KAAK,KACL4pB,eAAcjF,EACdvG,aAAW,cACXb,UAAWkC,EAAOS,OAGtB,mBAAC,cAAD,CACEtgB,KAAK,YACL+pB,QAAQ,SACR3pB,KAAK,KACLud,UAAWkC,EAAOS,KAClBC,QAASoJ,GAAiBM,OAC1BC,UAAWP,EACXnL,aAAW,qBAKlB8E,IAKDlE,GAAYC,0BAAc,SAAC4B,GAC/B,MAAO,CACL6I,YAAavK,eAAF,MAGXe,KAAMf,eAAF,KACO0B,EAAMI,OAAOC,SACPL,EAAME,QAAQgJ,SCjDtBC,GAAqD,SAAC,GAAe,IAAbC,EAAa,EAAbA,OAC7D1H,EAAWD,KACTzhB,EAAY4jB,KAAZ5jB,QACFqpB,GAAerpB,aAAA,EAAAA,EAASqB,SAAU,EAExC,OACE,sCACGrB,aADH,EACGA,EAASa,KAAI,SAACpE,EAAQuX,GAAT,OACZ,mBAAC,GAAD,CACEzQ,IAAK9G,EAAOmD,GACZxC,MAAK,kBAAaX,EAAOmD,GAApB,KACLkkB,OAAQrnB,EAAOgJ,KACfkjB,YAAa,kBAAMjH,EhBuBoE,CAC/F/kB,KLnCsC,6BKoCtCuW,QAAS,CACPtT,GgB1ByDnD,EAAOmD,OAC1D8oB,cAAeW,EAAe,GAAM,kBAAM3H,EhBJmC,CACrF/kB,KLf2B,kBKgB3BuW,QAAS,CACPtT,GgBCsEnD,EAAOmD,QAEvE,mBAAC,GAAD,CAAcH,MAAOhD,KAEnBC,EAAwBD,EAAOE,MAAMuC,gBAA4B,IAAV8U,GACvD,mBAAC,GAAD,CAAYqQ,SAAS,OAAO/E,QAAS,kBAAMoC,EhBhB6B,CAClF/kB,KLTwB,eKUxBuW,QAAS,CACPtT,GgBasEwpB,MAAUhsB,MAAM,cCe7EksB,GAAiC,SAC5CxX,EACA8Q,EAEApD,GAJ4C,MAKC,CAC7C7iB,KpB9CuC,6BoB+CvCuW,QAAS,CACPpB,YACA8Q,cACApD,cCvDS+J,GAAa,iCACbC,GAAgB,oCAChBC,GAAgB,oCCFhBC,GAAY,iBAAqB,CAC5C/sB,KAAM4sB,KAQKI,GAAe,SAAC3V,EAAe7M,GAAhB,MAAkD,CAC5ExK,KAAM8sB,GACNvW,QAAS,CAAEc,QAAO7M,Y,sVCVb,IAAMia,GAAU,WAAgD,IAA/CD,EAA+C,uDAA7B,GAAIG,EAAyB,uCACrE,OAAQA,EAAO3kB,MACb,KAAK4sB,GACH,mBAAWpI,GAAX,CpCLsC,CAAE/jB,MAAO,GAAI0D,MAAO,OoCM5D,KAAK0oB,GACH,OAAOrI,EAAMpX,MAAM,EAAGuX,EAAOpO,QAAQc,OAAOqG,OAAO8G,EAAMpX,MAAMuX,EAAOpO,QAAQc,MAAQ,IAExF,KAAKyV,GACH,OAAOtI,EAAMtgB,KAAI,SAACsG,EAAQ6M,GACxB,OAAIA,IAAUsN,EAAOpO,QAAQc,MACpB7M,EAGFma,EAAOpO,QAAQ/L,Y,4oCCFvB,IAAMyiB,GAAkD,SAAC,GAAc,QAAZnqB,EAAY,EAAZA,MAC1D8lB,EAAqB9D,KAErBC,EAAWR,IACf,SAACwC,GAAD,OAAc6B,EAAmB+D,GAA+B7pB,EAAO,UAAWikB,MADhD,UAElCjkB,EAAMvB,gBAF4B,aAElC,EAAgBwQ,QAChBmb,IAWF,OANA3K,sBAAU,WAAM,SACV,UAACzf,EAAMvB,gBAAP,iBAAC,EAAgBwQ,eAAjB,aAAC,EAAyBrN,SAC5BqgB,EAASgI,QAEV,IAGD,sCACE,0BACEhN,UAAW4B,eAAF,QAKR,UAAA7e,EAAMvB,gBAAN,eAAgBwQ,SAAS7N,KAAI,SAACsG,EAAQ6M,GAAT,aAC5B,0BACEzQ,IAAKyQ,EACL0I,UAAW4B,eAAF,OAIT,0BACE5B,UAAW4B,eAAF,OAIT,mBAAC,eAAD,CAAalhB,MAAM,QAAQuf,WAAY,IACrC,mBAAC,cAAD,CACEG,YAAY,eACZgN,aAAa,gBACbpM,OAAQ,aACRjB,SAAU,SAAC3b,GAAD,OAAW4gB,EAASiI,GAAa3V,EAAD,MAAa7M,EAAb,CAAqBrG,aAC/DA,MAAOqG,EAAOrG,UAIpB,mBAAC,eAAD,CAAa1D,MAAM,QAAQuf,WAAY,IACrC,mBAAC,SAAD,CACEG,YAAY,QACZY,OAAQ,SAACzV,GAAD,OAAOyZ,EAASiI,GAAa3V,EAAD,MAAa7M,EAAb,CAAqB/J,MAAO6K,EAAE9H,OAAOV,WACzE2lB,aAAcje,EAAO/J,SAGzB,mBAAC,GAAD,CACE4W,MAAOA,EACP4Q,UAAU,UAAAnlB,EAAMvB,gBAAN,eAAgBwQ,UAAW,GACrCgW,MAAO,kBAAMhD,EAASgI,OACtB/E,SAAU,kBAAMjD,EFlEF,SAAC1N,GAAD,MAAkC,CAC5DrX,KAAM6sB,GACNtW,QAAS,CAAEc,UEgE0B+V,CAAa/V,cCpE9CwT,GAAW,SAAC/nB,GAAD,OAAmB,SAAC8nB,GAAD,OAA+BA,EAAO9nB,QAAUA,I,iNCYpF,IAAMwnB,GAAgE,CACpEtK,WAAY,IAODuK,GAA2C,SAAC,GAAkB,oDAAhBpV,EAAgB,EAAhBA,UACnD4P,EAAWD,KACTzhB,EAAY4jB,KAAZ5jB,QACFgqB,EDjBsB,SAAClY,GAAyC,IAC9D9R,EAAY4jB,KAAZ5jB,QAER,OAAQ8R,EAAUnV,MAChB,IAAK,QAAS,YACNuR,GAAQ,UAAA4D,EAAU5T,gBAAV,eAAoBgQ,QAAS,OACrC/O,GAAO,UAAA2S,EAAU5T,gBAAV,eAAoBiB,OAAQ,KACnC8qB,EAAchc,UAAS,UAAA6D,EAAU5T,gBAAV,eAAoBkQ,gBAAiB,IAAK,IACjEvK,GAAU,UAAAiO,EAAU5T,gBAAV,eAAoB2F,UAAW,QAC3CsjB,EAAc,GAElB,GAAa,MAAThoB,EAAc,OACV+qB,EAAU,UAAG9Y,GAAanR,KAAKunB,GAAStZ,WAA9B,aAAG,EAAoC9Q,MACvD+pB,EAAc,GAAH,OAAM+C,EAAN,YAAoB/qB,EAApB,MAGT8qB,EAAc,IAChB9C,GAAe,kBAAJ,OAAsB8C,EAAtB,OAGb9C,GAAe,aACf,IAAMgD,EAAgB7Y,GAAerR,KAAKunB,GAAS3jB,IACnD,GAAIsmB,EACFhD,GAAegD,EAAc/sB,UACxB,CACL,IAAMX,EAASuD,aAAH,EAAGA,EAASC,MAAK,SAACI,GAAD,OAAOA,EAAET,KAAOgE,EAAyBC,MAEpEsjB,GADE1qB,EACawG,EAAexG,GAEf,mBAOnB,MAHa,MAAT0C,IACFgoB,GAAe,KAAJ,OAASjZ,EAAT,MAENiZ,EAGT,IAAK,YAAa,QACVrnB,GAAW,UAAAgS,EAAU5T,gBAAV,eAAoB4B,WAAY,IAC3CmqB,GAAc,UAAAnY,EAAU5T,gBAAV,eAAoBkQ,gBAAiB,EAEzD,0BAAoBtO,GAApB,OAA+BmqB,EAAc,EAAd,2BAAsCA,GAAgB,IAGvF,IAAK,UAAW,QACRvb,GAAU,UAAAoD,EAAU5T,gBAAV,eAAoBwQ,WAApB,UAA+BsC,GAAuB,QAAYC,uBAAlE,aAA+B,EAAoDvC,SACnG,gCAA0BA,EAASrN,OAAnC,KAGF,IAAK,eAAgB,MACbiP,EAAYqF,KAAKhY,IAAIgY,KAAK/X,IAAIqQ,UAAS,UAAA6D,EAAU5T,gBAAV,eAAoBoS,YAAa,IAAK,IAAK,IAAK,GAC7F,2BAAqBA,GAGvB,IAAK,iBAAkB,UACfxQ,GAAW,UAAAgS,EAAU5T,gBAAV,eAAoB4B,WAAY,OAC3CmqB,GAAc,UAAAnY,EAAU5T,gBAAV,eAAoBkQ,gBAAiB,EACnDvE,GAAY,UAAAiI,EAAU5T,gBAAV,eAAoB2L,YAAa,EAE/Csd,EAAc,aAAH,OAAgBrnB,GAU/B,OARImqB,EAAc,IAChB9C,GAAe,oBAAJ,OAAwB8C,IAGjCpgB,EAAY,IACdsd,GAAe,iBAAJ,OAAqBtd,IAG3Bsd,EAGT,QACE,MAAO,YC1DiBO,CAAe5V,GACrCjO,ExCsGuC,WAAwD,IAAvD7D,EAAuD,uDAAxB,GACvEoqB,EAAgBpqB,EAAQsiB,SAAQ,SAAC7lB,GACrC,MAAoB,mBAAhBA,EAAOE,KACF6U,GAAqC/U,GACnB,gBAAhBA,EAAOE,KACT+U,GAAmCjV,GAEnC,CAAEW,MAAO6F,EAAexG,GAASgD,MAAOhD,EAAOmD,OAG1D,gBAAW0R,GAAX,GAA8B8Y,IwChHdC,CAAgCrqB,GAEhD,OACE,mBAAC,GAAD,CAAyB5C,MAAO4sB,GACV,UAAnBlY,EAAUnV,MACT,sCACE,mBAAC,eAAD,IAAaS,MAAM,SAAY6pB,IAC7B,mBAAC,UAAD,CACExK,SAAU,SAACxU,GAAD,OAAOyZ,EAAS4H,GAA+BxX,EAAW,QAAS7J,EAAExI,SAC/EkO,QAASyD,GACT3R,OAAO,UAAAqS,EAAU5T,gBAAV,eAAoBgQ,SAApB,UAA6B8C,GAAwBc,EAAUnV,MAAMsU,uBAArE,aAA6B,EAAyD/C,UAIjG,mBAAC,eAAD,IAAa9Q,MAAM,QAAW6pB,IAC5B,mBAAC,UAAD,CACExK,SAAU,SAACxU,GAAD,OAAOyZ,EAAS4H,GAA+BxX,EAAW,OAAQ7J,EAAExI,SAC9EkO,QAAS0D,GACT5R,OAAO,UAAAqS,EAAU5T,gBAAV,eAAoBiB,QAApB,UAA4B6R,GAAwBc,EAAUnV,MAAMsU,uBAApE,aAA4B,EAAyD9R,MAC5FmrB,kBAAgB,KAIpB,mBAAC,eAAD,IAAaltB,MAAM,iBAAoB6pB,IACrC,mBAAC,SAAD,CACEvJ,OAAQ,SAACzV,GAAD,OAAOyZ,EAAS4H,GAA+BxX,EAAW,gBAAiB7J,EAAE9H,OAAOV,SAC5F2lB,cACE,UAAAtT,EAAU5T,gBAAV,eAAoBkQ,iBAApB,UACA4C,GAAwBc,EAAUnV,MAAMsU,uBADxC,aACA,EAAyD7C,kBAK/D,mBAAC,eAAD,IAAahR,MAAM,YAAe6pB,IAChC,mBAAC,UAAD,CACExK,SAAU,SAACxU,GAAD,OAAOyZ,EAAS4H,GAA+BxX,EAAW,UAAW7J,EAAExI,SACjFkO,QAAS9J,EACTpE,OAAO,UAAAqS,EAAU5T,gBAAV,eAAoB2F,WAApB,UAA+BmN,GAAwBc,EAAUnV,MAAMsU,uBAAvE,aAA+B,EAAyDpN,YAInG,mBAAC,eAAD,IAAazG,MAAM,WAAc6pB,IAC/B,mBAAC,SAAD,CACEvJ,OAAQ,SAACzV,GAAD,OAAOyZ,EAAS4H,GAA+BxX,EAAW,UAAW7J,EAAE9H,OAAOV,SACtF2lB,cACE,UAAAtT,EAAU5T,gBAAV,eAAoBoQ,WAApB,UAA+B0C,GAAwBc,EAAUnV,MAAMsU,uBAAvE,aAA+B,EAAyD3C,aAO9E,iBAAnBwD,EAAUnV,MACT,mBAAC,eAAD,IAAaS,MAAM,aAAgB6pB,IACjC,mBAAC,SAAD,CACEvJ,OAAQ,SAACzV,GAAD,OAAOyZ,EAAS4H,GAA+BxX,EAAW,YAAa7J,EAAE9H,OAAOV,SACxF2lB,cACE,UAAAtT,EAAU5T,gBAAV,eAAoBoS,aAApB,UAAiCU,GAAwBc,EAAUnV,MAAMsU,uBAAzE,aAAiC,EAAyDX,cAM9E,mBAAnBwB,EAAUnV,MACT,sCACE,mBAAC,eAAD,IAAaS,MAAM,YAAe6pB,IAChC,mBAAC,UAAD,CACExK,SAAU,SAACxU,GAAD,OAAOyZ,EAAS4H,GAA+BxX,EAAW,WAAY7J,EAAExI,SAClFkO,QAAS4D,GACT9R,OAAO,UAAAqS,EAAU5T,gBAAV,eAAoB4B,YAApB,UAAgCkR,GAAwBc,EAAUnV,MAAMsU,uBAAxE,aAAgC,EAAyDnR,UAChGwqB,kBAAgB,KAIpB,mBAAC,eAAD,IAAaltB,MAAM,iBAAoB6pB,IACrC,mBAAC,SAAD,CACEvJ,OAAQ,SAACzV,GAAD,OAAOyZ,EAAS4H,GAA+BxX,EAAW,gBAAiB7J,EAAE9H,OAAOV,SAC5F2lB,cACE,UAAAtT,EAAU5T,gBAAV,eAAoBkQ,iBAApB,UACA4C,GAAwBc,EAAUnV,MAAMsU,uBADxC,aACA,EAAyD7C,kBAK/D,mBAAC,eAAD,IAAahR,MAAM,cAAiB6pB,GAApC,CAAsDrJ,QAAQ,gDAC5D,mBAAC,SAAD,CACEF,OAAQ,SAACzV,GAAD,OAAOyZ,EAAS4H,GAA+BxX,EAAW,YAAa7J,EAAE9H,OAAOV,SACxF2lB,cACE,UAAAtT,EAAU5T,gBAAV,eAAoB2L,aAApB,UAAiCmH,GAAwBc,EAAUnV,MAAMsU,uBAAzE,aAAiC,EAAyDpH,cAKhG,mBAAC,eAAD,IACEzM,MAAM,UACF6pB,GAFN,CAGErJ,QAAQ,iJAER,mBAAC,SAAD,CACEF,OAAQ,SAACzV,GAAD,OAAOyZ,EAAS4H,GAA+BxX,EAAW,SAAU7J,EAAE9H,OAAOV,SACrF2lB,cACE,UAAAtT,EAAU5T,gBAAV,eAAoBsQ,UAApB,UAA8BwC,GAAwBc,EAAUnV,MAAMsU,uBAAtE,aAA8B,EAAyDzC,YAO7E,cAAnBsD,EAAUnV,MACT,sCACE,mBAAC,eAAD,IAAaS,MAAM,YAAe6pB,IAChC,mBAAC,SAAD,CACEvJ,OAAQ,SAACzV,GAAD,OAAOyZ,EAAS4H,GAA+BxX,EAAW,WAAY7J,EAAE9H,OAAOV,SACvF2lB,cACE,UAAAtT,EAAU5T,gBAAV,eAAoB4B,YAApB,UAAgCkR,GAAwBc,EAAUnV,MAAMsU,uBAAxE,aAAgC,EAAyDnR,aAK/F,mBAAC,eAAD,IAAa1C,MAAM,iBAAoB6pB,IACrC,mBAAC,SAAD,CACEvJ,OAAQ,SAACzV,GAAD,OAAOyZ,EAAS4H,GAA+BxX,EAAW,gBAAiB7J,EAAE9H,OAAOV,SAC5F2lB,cACE,UAAAtT,EAAU5T,gBAAV,eAAoBkQ,iBAApB,UACA4C,GAAwBc,EAAUnV,MAAMsU,uBADxC,aACA,EAAyD7C,mBAO/C,YAAnB0D,EAAUnV,MAAsB,mBAAC,GAAD,CAAuB8C,MAAOqS,M,inBCpJrE,IAAMyY,GAAkE9pB,OAAO2C,QAAQ4N,IAAyBnQ,KAC9G,0BAAE0C,EAAF,WAAuB,CACrBnG,MADF,KAASA,MAEPqC,MAAO8D,MAIL0kB,GAAoB,SAAC,GAAD,IAAGxoB,EAAH,EAAGA,MAAOoH,EAAV,EAAUA,KAAV,MAAgE,CACxFzJ,MAAOyJ,EACPpH,MAAO,GAAF,OAAKA,GAASoH,KAYR2jB,GAAqE,SAAC,GAAc,IAT/E1Y,EASmErS,EAAY,EAAZA,MAC7Ec,EAAasjB,KACbnC,EAAWD,KAGXvJ,EAAS,e,EAAA,G,EAAA,yBAAG,0GACVzF,EAAM,WACV,OAAQhT,EAAM9C,MACZ,IAAK,iBACH,OAAO4D,EAAW2X,UAAU,QAC9B,IAAK,eACH,OAAO3X,EAAW2X,UAAU,aAC9B,QACE,OAAO3X,EAAW2X,cARR,SAYFzF,IAAMa,YAZJ,mBAYqB2U,GAZrB,yBAYiBpnB,IAZjB,iD,iLAAH,qDAef,OACE,sCACE,mBAAC,sBAAD,KACE,mBAAC,WAAD,CACE6b,UAAWmJ,GACXlY,QAAS4c,GACT9N,SAAU,SAACxU,GAAD,OAAOyZ,GPhCzB9hB,EOgC8DH,EAAMG,GP/BpEqjB,EO+BwEhb,EAAExI,MP9B7C,CAC7B9C,KpBxBoC,0BoByBpCuW,QAAS,CACPtT,KACAqjB,cAPuC,IACzCrjB,EACAqjB,GOgCQxjB,OApCQqS,EAoCQrS,EApC0B,CAClDrC,MAAO4T,GAAwBc,EAAUnV,MAAMS,MAC/CqC,MAAOqS,EAAUnV,SAqCVkV,GAA6BpS,IAC5B,mBAAC,gBAAD,CACEid,UAAWmJ,GACX2C,YAAatQ,EACbuE,SAAU,SAACxU,GAAD,OAAOyZ,GP7B3B9hB,EO6BiEH,EAAMG,GP5BvE6gB,EO4B2ExY,EAAExI,MP3BhD,CAC7B9C,KpBlCqC,2BoBmCrCuW,QAAS,CACPtT,KACA6gB,eAPwC,IAC1C7gB,EACA6gB,GO6BU3D,YAAY,eACZrd,MAAOA,EAAMoD,SAKnB,mBAAC,GAAD,CAAgBiP,UAAWrS,MC5DpBgrB,GAAqD,SAAC,GAAe,IAAbrB,EAAa,EAAbA,OAC7D1H,EAAWD,KACT7e,EAAeghB,KAAfhhB,WACF8nB,GAAkB9nB,aAAA,EAAAA,EAAYvB,SAAU,EAE9C,OACE,sCACGuB,EAAY/B,KAAI,SAACiR,EAAWkC,GAAZ,OACf,mBAAC,GAAD,CACEzQ,IAAKuO,EAAUlS,GACfxC,MAAiB,IAAV4W,EAAc,WAAa,UAClC0U,cAAegC,EAAkB,GAAM,kBAAMhJ,ERN2C,CAChG/kB,KpBf+B,qBoBgB/BuW,QAAS,CACPtT,GQGoFkS,EAAUlS,QAExF,mBAAC,GAAD,CAAyBH,MAAOqS,IAErB,IAAVkC,GACC,mBAAC,GAAD,CAAYqQ,SAAS,OAAO/E,QAAS,kBAAMoC,ERlBuB,CAC5E/kB,KpBT4B,kBoBU5BuW,QAAS,CACPtT,GQeiFwpB,MAAUhsB,MAAM,c,sVCzBrG,IAAMutB,GAAO,SAA4B1iB,GAA5B,OAA8CA,EAAErI,IAEvDgrB,GAAQ,SAACC,GAAD,OAAsB5c,SAAS4c,EAAU,KCsBjDC,GAA4C,SAAC,GAAc,IDpBiB,EACxE9qB,EAAS4C,ECmBkCnD,EAAY,EAAZA,MAC7CiiB,EAAWD,KACX2H,GDtB0E,EAChDxF,KAAxB5jB,EADwE,EACxEA,QAAS4C,EAD+D,EAC/DA,WAEVmoB,oBACL,kBACGpV,KAAKhY,IAAL,MAAAgY,KAAI,GAAQ,cAAK3V,aAAA,EAAAA,EAASa,IAAI8pB,MAAS,CAAC,MAA5B,IAAuC/nB,aAAA,EAAAA,EAAY/B,IAAI8pB,MAAS,CAAC,OAAO9pB,IAAI+pB,MAAU,GAAG5R,aACxG,CAAChZ,EAAS4C,KCkBZ,OACE,sCACE,mBAAC,kBAAD,KACE,mBAAC,eAAD,CAAaxF,MAAM,QAAQuf,WAAY,GAAIqO,MAAI,GAC7C,mBAAC,cAAD,CACElqB,MAAOrB,EAAMqB,MAGb4c,OAAQ,aACRjB,SAAU,SAAC3b,GAAD,OAAW4gB,ElCfN,SAAC5gB,GAAD,MAAuC,CAChEnE,KAxBmB,eAyBnBuW,QAAS,CACPpS,UkCYsCmqB,CAAYnqB,KAC1Cgc,YAAY,eACZgN,aAAa,mBAGjB,mBAAC,eAAD,CAAa1sB,MAAM,QAAQuf,WAAY,IACrC,mBAAC,SAAD,CACE/c,GAAE,mBAAcH,EAAMsD,MAApB,UACF+Z,YAAY,gBACZY,OAAQ,SAACzV,GAAD,OAAOyZ,ElCjB4D,CACrF/kB,KA9B2B,uBA+B3BuW,QAAS,CACP+O,akCcmDha,EAAE4V,cAAcpe,UAC3D2lB,aAAc3lB,EAAM2I,UAK1B,mBAAC,GAAD,CAA0BghB,OAAQA,IAClC,mBAAC,GAAD,CAA0BA,OAAQA,M,4CCrDlC8B,G,oHAAAA,GACGC,YAAc,mCAGhB,IAAMC,GAAS,IAAIC,mBAAiBrZ,IACxCsZ,gBDIoE,SAAC,GAAD,IACrExqB,EADqE,EACrEA,MACA2b,EAFqE,EAErEA,SACA6G,EAHqE,EAGrEA,WACA/iB,EAJqE,EAIrEA,WAJqE,OAMrE,mBAAC,GAAD,CAAuBA,WAAYA,EAAYkc,SAAUA,EAAU6G,WAAYA,EAAYxiB,MAAOA,GAChG,mBAAC,GAAD,CAAiBrB,MAAOqB,QCVzByqB,iBrCDyB,SAAChmB,GAAiB,IACpCoI,EAA6BpI,EAA7BoI,QAAS6d,EAAoBjmB,EAApBimB,gBAmBjB,OAhBAtM,sBAAU,WACR,IAAMtR,EAAYD,EAAQwG,SAASvG,WAAa,EAChD4d,EAAgB,MACX7d,EADU,CAEbwG,SAAU,MACLxG,EAAQwG,SADL,CAENrR,UAAW6K,EAAQwG,SAASrR,WAAa,aACzC8K,YACA0G,2BACE3G,EAAQwG,SAASG,4BAA8B+I,GAAkCzP,GACnFlD,gBAAiBiD,EAAQwG,SAASzJ,iBAAmB,GACrDC,cAAegD,EAAQwG,SAASxJ,eAAiB,UAGpD,IAGD,sCACsB,WAAnBgD,EAAQ8d,QACP,mBAAC,SAAD,CAAO5T,MAAM,qBAAqB6T,SAAS,WAA3C,8GAKF,mBAAC,0BAAD,CACEC,WAAY,wBACZC,iBAAkBje,EAClBke,mBAAmB,EACnBpP,SAAU+O,EACVM,uBAAwBthB,KAAOuhB,mBAGjC,mBAAC,GAAD,CAAgBtsB,MAAOkO,EAAS8O,SAAU+O,IAE1C,mBAAC,GAAD,CACE/rB,MAAOkO,EAAQwG,SACfsI,SAAU,SAAC+C,GAAD,OACRgM,EAAgB,MACX7d,EADU,CAEbwG,SAAUqL,QAKhB,mBAAC,GAAD,CACE/f,MAAOkO,EAAQwG,SAASK,UACxBiI,SAAU,SAAC+C,GACTgM,EAAgB,MACX7d,EADU,CAEbwG,SAAU,MACLxG,EAAQwG,SADL,CAENK,UAAWgL,cqCrDtBwM,uBAAuBd,K,kCCT1B,oEAAO,IAAMe,EAAgC,CAC3C,CAAE7uB,MAAO,cAAe8uB,SAAU,eAClC,CAAE9uB,MAAO,mBAAoB8uB,SAAU,oBACvC,CAAE9uB,MAAO,KAAM8uB,SAAU,YACzB,CAAE9uB,MAAO,KAAM8uB,SAAU,YACzB,CAAE9uB,MAAO,MAAO8uB,SAAU,YAC1B,CAAE9uB,MAAO,MAAO8uB,SAAU,YAC1B,CAAE9uB,MAAO,KAAM8uB,SAAU,YACzB,CAAE9uB,MAAO,KAAM8uB,SAAU,aA+DdC,EAAY,GAAH,OA1D0B,CAC9C,CACE/uB,MAAO,MACPgvB,WAAY,MACZtL,cAAe,iCAEjB,CACE1jB,MAAO,MACPgvB,WAAY,MACZtL,cAAe,kCAEjB,CACE1jB,MAAO,MACPgvB,WAAY,MACZtL,cAAe,kCAEjB,CACE1jB,MAAO,MACPgvB,WAAY,MACZtL,cAAe,yCAEjB,CACE1jB,MAAO,SACPgvB,WAAY,SACZtL,cAAe,2DAEjB,CACE1jB,MAAO,SACPgvB,WAAY,SACZtL,cAAe,0DAEjB,CACE1jB,MAAO,QACPgvB,WAAY,QACZtL,cAAe,0CAEjB,CACE1jB,MAAO,eACPgvB,WAAY,eACZtL,cAAe,gDAEjB,CACE1jB,MAAO,UACPgvB,WAAY,UACZtL,cAAe,uCAEjB,CACE1jB,MAAO,OACPgvB,WAAY,OACZtL,cAAe,sCAEjB,CACE1jB,MAAO,WACPgvB,WAAY,WACZtL,cAAe,qDAIG,CAEpB,CACEsL,WAAY,MACZhvB,MAAO,MACPivB,OAAQ,wBACRvL,cAAe,sFAEjB,CACEsL,WAAY,SACZhvB,MAAO,SACPivB,OAAQ,2BACRvL,cACE,mQAEJ,CACEsL,WAAY,OACZhvB,MAAO,OACPivB,OAAQ,yBACRvL,cAAe,8EAEjB,CACEsL,WAAY,UACZhvB,MAAO,UACPivB,OAAQ,0BACRvL,cACE,gKAEJ,CACEsL,WAAY,YACZhvB,MAAO,YACPivB,OAAQ,0CACRvL,cAAe,oFAEjB,CACEsL,WAAY,YACZhvB,MAAO,YACPivB,OAAQ,0CACRvL,cAAe,mFAEjB,CACEsL,WAAY,eACZhvB,MAAO,eACPivB,OAAQ,iCACRvL,cACE,6PAEJ,CACEsL,WAAY,eACZhvB,MAAO,eACPivB,OAAQ,gDACRvL,cAAe,sGAEjB,CACEsL,WAAY,cACZhvB,MAAO,cACPivB,OAAQ,+CACRvL,cACE,8HAEJ,CACEsL,WAAY,gBACZhvB,MAAO,gBACPivB,OAAQ,iDACRvL,cACE,8GAEJ,CACEsL,WAAY,QACZhvB,MAAO,QACPivB,OAAQ,wBACRvL,cACE,2XAEJ,CACEsL,WAAY,QACZhvB,MAAO,QACPivB,OAAQ,wBACRvL,cACE,kHAEJ,CACEsL,WAAY,qBACZhvB,MAAO,qBACPivB,OAAQ,qCACRvL,cAAe,6FAEjB,CACEsL,WAAY,MACZhvB,MAAO,MACPivB,OAAQ,wBACRvL,cACE,+HAEJ,CACEsL,WAAY,QACZhvB,MAAO,QACPivB,OAAQ,0BACRvL,cAAe,gFAEjB,CACEsL,WAAY,qBACZhvB,MAAO,qBACPivB,OAAQ,gDACRvL,cACE,kaAEJ,CACEsL,WAAY,eACZhvB,MAAO,eACPivB,OAAQ,qDACRvL,cACE,gRAEJ,CACEsL,WAAY,OACZhvB,MAAO,OACPivB,OAAQ,wCACRvL,cAAe,qGAEjB,CACEsL,WAAY,SACZhvB,MAAO,SACPivB,OAAQ,yBACRvL,cACE,4JAEJ,CACEsL,WAAY,WACZhvB,MAAO,WACPivB,OAAQ,2BACRvL,cACE,0XAEJ,CACEsL,WAAY,QACZhvB,MAAO,QACPivB,OAAQ,wBACRvL,cACE,gPAEJ,CACEsL,WAAY,gBACZhvB,MAAO,gBACPivB,OAAQ,wGACRvL,cACE,qeAEJ,CACEsL,WAAY,KACZhvB,MAAO,KACPivB,OAAQ,uBACRvL,cACE,oKAEJ,CACEsL,WAAY,OACZhvB,MAAO,OACPivB,OAAQ,yBACRvL,cACE,+GAEJ,CACEsL,WAAY,QACZhvB,MAAO,QACPivB,OAAQ,0BACRvL,cACE,gHAEJ,CACEsL,WAAY,SACZhvB,MAAO,SACPivB,OAAQ,0CACRvL,cACE,wGAEJ,CACEsL,WAAY,QACZhvB,MAAO,QACPivB,OAAQ,yCACRvL,cACE,kIAEJ,CACEsL,WAAY,iBACZhvB,MAAO,iBACPivB,OAAQ,2CACRvL,cACE,0HAEJ,CACEsL,WAAY,OACZhvB,MAAO,OACPivB,OAAQ,uBACRvL,cACE,yWAEJ,CACEsL,WAAY,SACZhvB,MAAO,SACPivB,OAAQ,yBACRvL,cACE,+OAEJ,CACEsL,WAAY,QACZhvB,MAAO,QACPivB,OAAQ,+CACRvL,cACE,2QAEJ,CACEsL,WAAY,SACZhvB,MAAO,SACPivB,OAAQ,2BACRvL,cACE,mNAEJ,CACEsL,WAAY,OACZhvB,MAAO,OACPivB,OAAQ,yBACRvL,cAAe,8EAEjB,CACEsL,WAAY,YACZhvB,MAAO,YACPivB,OAAQ,8BACRvL,cAAe,+EAEjB,CACEsL,WAAY,OACZhvB,MAAO,OACPivB,OAAQ,yBACRvL,cAAe,sDAEjB,CACEsL,WAAY,OACZhvB,MAAO,OACPivB,OAAQ,SACRvL,cACE,+KAEJ,CACEsL,WAAY,SACZhvB,MAAO,SACPivB,OAAQ,mBACRvL,cAAe,sDAEjB,CACEsL,WAAY,OACZhvB,MAAO,OACPivB,OAAQ,wCACRvL,cAAe,wDAEjB,CACEsL,WAAY,gBACZhvB,MAAO,gBACPivB,OAAQ,8BACRvL,cAAe,8DAEjB,CACEsL,WAAY,gBACZhvB,MAAO,gBACPivB,OAAQ,8BACRvL,cAAe,8DAEjB,CACEsL,WAAY,gBACZhvB,MAAO,gBACPivB,OAAQ,8BACRvL,cAAe,8DAEjB,CACEsL,WAAY,gBACZhvB,MAAO,gBACPivB,OAAQ,8BACRvL,cAAe,oDAEjB,CACEsL,WAAY,kBACZhvB,MAAO,kBACPivB,OAAQ,gCACRvL,cAAe,sDAEjB,CACEsL,WAAY,qBACZhvB,MAAO,qBACPivB,OAAQ,2CACRvL,cAAe,uEAEjB,CACEsL,WAAY,mBACZhvB,MAAO,mBACPivB,OAAQ,iCACRvL,cAAe,8EAEjB,CACEsL,WAAY,mBACZhvB,MAAO,mBACPivB,OAAQ,iCACRvL,cAAe,+EAIbwL,EAAqB,CACzBC,QAAS,CACP3f,QAAS,OAEX,sBAAuB,CACrBA,QAAS,6BACT4f,YAAY,EACZC,OAAQ,CACN,YAAa,CACX7f,QAAS,yBACTxE,MAAO,aAETskB,YAAa,SAGjB,iBAAkB,CAChB9f,QAAS,gBACT+f,QAAQ,EACRF,OAAQ,CACNF,QAAS,CACP3f,QAAS,OAEX,YAAa,CACXA,QAAS,+BACTxE,MAAO,YACPukB,QAAQ,GAEV,cAAe,CACb/f,QAAS,oBACT+f,QAAQ,EACRvkB,MAAO,cAETskB,YAAa,QAGjBE,SAAU,IAAInU,OAAJ,gBAAoB0T,EAAUtrB,KAAI,SAAC0R,GAAD,OAAOA,EAAEnV,SAAOkE,KAAK,KAAvD,gBAA2E,KACrF,gBAAiB,CACf,CACEsL,QAAS,gBACT6f,OAAQ,CACN,iBAAkB,CAChB7f,QAAS,mBACTxE,MAAO,YAIb,CACEwE,QAAS,iBACT4f,YAAY,EACZC,OAAQ,CACN,iBAAkB,CAChB7f,QAAS,mBACTxE,MAAO,aAKfykB,OAAQ,sCACR1d,SAAU,IAAIsJ,OAAJ,iEAvaa,CAAC,KAAM,aAAc,cAAe,WAAY,KAAM,SAAU,WAuaEnX,KAAK,KAApF,QAAgG,KAC1GorB,YAAa,cAGAJ,O,kCCzbf,gBAQe,IAPG,SAAUnL,GACxB,IAAI2L,EAAM,mBAIV,OAHA,qBAAU,WACNA,EAAI/M,QAAUoB,KAEX2L,EAAI/M","file":"elasticsearchPlugin.63a9c1d648180e457252.js","sourcesContent":["import { metricAggregationConfig } from './utils';\n\nexport type PipelineMetricAggregationType =\n  | 'moving_avg'\n  | 'moving_fn'\n  | 'derivative'\n  | 'serial_diff'\n  | 'cumulative_sum'\n  | 'bucket_script';\n\nexport type MetricAggregationType =\n  | 'count'\n  | 'avg'\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'extended_stats'\n  | 'percentiles'\n  | 'cardinality'\n  | 'raw_document'\n  | 'raw_data'\n  | 'logs'\n  | PipelineMetricAggregationType;\n\ninterface BaseMetricAggregation {\n  id: string;\n  type: MetricAggregationType;\n  hide?: boolean;\n}\n\nexport interface PipelineVariable {\n  name: string;\n  pipelineAgg: string;\n}\n\nexport interface MetricAggregationWithField extends BaseMetricAggregation {\n  field?: string;\n}\n\nexport interface MetricAggregationWithMissingSupport extends BaseMetricAggregation {\n  settings?: {\n    missing?: string;\n  };\n}\n\nexport interface MetricAggregationWithInlineScript extends BaseMetricAggregation {\n  settings?: {\n    script?: string;\n  };\n}\n\ninterface Count extends BaseMetricAggregation {\n  type: 'count';\n}\n\ninterface Average\n  extends MetricAggregationWithField,\n    MetricAggregationWithMissingSupport,\n    MetricAggregationWithInlineScript {\n  type: 'avg';\n  settings?: {\n    script?: string;\n    missing?: string;\n  };\n}\n\ninterface Sum extends MetricAggregationWithField, MetricAggregationWithInlineScript {\n  type: 'sum';\n  settings?: {\n    script?: string;\n    missing?: string;\n  };\n}\n\ninterface Max extends MetricAggregationWithField, MetricAggregationWithInlineScript {\n  type: 'max';\n  settings?: {\n    script?: string;\n    missing?: string;\n  };\n}\n\ninterface Min extends MetricAggregationWithField, MetricAggregationWithInlineScript {\n  type: 'min';\n  settings?: {\n    script?: string;\n    missing?: string;\n  };\n}\n\nexport type ExtendedStatMetaType =\n  | 'avg'\n  | 'min'\n  | 'max'\n  | 'sum'\n  | 'count'\n  | 'std_deviation'\n  | 'std_deviation_bounds_upper'\n  | 'std_deviation_bounds_lower';\nexport interface ExtendedStat {\n  label: string;\n  value: ExtendedStatMetaType;\n}\n\nexport interface ExtendedStats extends MetricAggregationWithField, MetricAggregationWithInlineScript {\n  type: 'extended_stats';\n  settings?: {\n    script?: string;\n    missing?: string;\n    sigma?: string;\n  };\n  meta?: {\n    [P in ExtendedStatMetaType]?: boolean;\n  };\n}\n\nexport interface Percentiles extends MetricAggregationWithField, MetricAggregationWithInlineScript {\n  type: 'percentiles';\n  settings?: {\n    percents?: string[];\n    script?: string;\n    missing?: string;\n  };\n}\n\nexport interface UniqueCount extends MetricAggregationWithField {\n  type: 'cardinality';\n  settings?: {\n    precision_threshold?: string;\n    missing?: string;\n  };\n}\n\ninterface RawDocument extends BaseMetricAggregation {\n  type: 'raw_document';\n  settings?: {\n    size?: string;\n  };\n}\n\ninterface RawData extends BaseMetricAggregation {\n  type: 'raw_data';\n  settings?: {\n    size?: string;\n  };\n}\n\ninterface Logs extends BaseMetricAggregation {\n  type: 'logs';\n}\n\nexport interface BasePipelineMetricAggregation extends MetricAggregationWithField {\n  type: PipelineMetricAggregationType;\n  pipelineAgg?: string;\n}\n\ninterface PipelineMetricAggregationWithMultipleBucketPaths extends BaseMetricAggregation {\n  type: PipelineMetricAggregationType;\n  pipelineVariables?: PipelineVariable[];\n}\n\nexport type MovingAverageModel = 'simple' | 'linear' | 'ewma' | 'holt' | 'holt_winters';\n\nexport interface MovingAverageModelOption {\n  label: string;\n  value: MovingAverageModel;\n}\n\ninterface BaseMovingAverageModelSettings {\n  model: MovingAverageModel;\n  window: number;\n  predict: number;\n}\n\ninterface MovingAverageSimpleModelSettings extends BaseMovingAverageModelSettings {\n  model: 'simple';\n}\n\ninterface MovingAverageLinearModelSettings extends BaseMovingAverageModelSettings {\n  model: 'linear';\n}\n\ninterface MovingAverageEWMAModelSettings extends BaseMovingAverageModelSettings {\n  model: 'ewma';\n  alpha: number;\n  minimize: boolean;\n}\ninterface MovingAverageHoltModelSettings extends BaseMovingAverageModelSettings {\n  model: 'holt';\n  settings: {\n    alpha?: number;\n    beta?: number;\n  };\n  minimize: boolean;\n}\ninterface MovingAverageHoltWintersModelSettings extends BaseMovingAverageModelSettings {\n  model: 'holt_winters';\n  settings: {\n    alpha?: number;\n    beta?: number;\n    gamma?: number;\n    period?: number;\n    pad?: boolean;\n  };\n  minimize: boolean;\n}\n\nexport type MovingAverageModelSettings<T extends MovingAverageModel = MovingAverageModel> = Partial<\n  Extract<\n    | MovingAverageSimpleModelSettings\n    | MovingAverageLinearModelSettings\n    | MovingAverageEWMAModelSettings\n    | MovingAverageHoltModelSettings\n    | MovingAverageHoltWintersModelSettings,\n    { model: T }\n  >\n>;\n\nexport interface MovingAverage<T extends MovingAverageModel = MovingAverageModel>\n  extends BasePipelineMetricAggregation {\n  type: 'moving_avg';\n  settings?: MovingAverageModelSettings<T>;\n}\n\nexport const isEWMAMovingAverage = (metric: MovingAverage | MovingAverage<'ewma'>): metric is MovingAverage<'ewma'> =>\n  metric.settings?.model === 'ewma';\n\nexport const isHoltMovingAverage = (metric: MovingAverage | MovingAverage<'holt'>): metric is MovingAverage<'holt'> =>\n  metric.settings?.model === 'holt';\n\nexport const isHoltWintersMovingAverage = (\n  metric: MovingAverage | MovingAverage<'holt_winters'>\n): metric is MovingAverage<'holt_winters'> => metric.settings?.model === 'holt_winters';\n\ninterface MovingFunction extends BasePipelineMetricAggregation {\n  type: 'moving_fn';\n  settings?: {\n    window?: string;\n    script?: string;\n    shift?: string;\n  };\n}\n\nexport interface Derivative extends BasePipelineMetricAggregation {\n  type: 'derivative';\n  settings?: {\n    unit?: string;\n  };\n}\n\nexport interface SerialDiff extends BasePipelineMetricAggregation {\n  type: 'serial_diff';\n  settings?: {\n    lag?: number;\n  };\n}\n\ninterface CumulativeSum extends BasePipelineMetricAggregation {\n  type: 'cumulative_sum';\n  settings?: {\n    format?: string;\n  };\n}\n\nexport interface BucketScript extends PipelineMetricAggregationWithMultipleBucketPaths {\n  type: 'bucket_script';\n  settings?: {\n    script?: string;\n  };\n}\n\ntype PipelineMetricAggregation = MovingAverage | Derivative | CumulativeSum | BucketScript;\n\nexport type MetricAggregationWithSettings =\n  | BucketScript\n  | CumulativeSum\n  | Derivative\n  | SerialDiff\n  | RawData\n  | RawDocument\n  | UniqueCount\n  | Percentiles\n  | ExtendedStats\n  | Min\n  | Max\n  | Sum\n  | Average\n  | MovingAverage\n  | MovingFunction;\n\nexport type MetricAggregationWithMeta = ExtendedStats;\n\nexport type MetricAggregation = Count | Logs | PipelineMetricAggregation | MetricAggregationWithSettings;\n\n// Guards\n// Given the structure of the aggregations (ie. `settings` field being always optional) we cannot\n// determine types based solely on objects' properties, therefore we use `metricAggregationConfig` as the\n// source of truth.\n\n/**\n * Checks if `metric` requires a field (either referring to a document or another aggregation)\n * @param metric\n */\nexport const isMetricAggregationWithField = (\n  metric: BaseMetricAggregation | MetricAggregationWithField\n): metric is MetricAggregationWithField => metricAggregationConfig[metric.type].requiresField;\n\nexport const isPipelineAggregation = (\n  metric: BaseMetricAggregation | PipelineMetricAggregation\n): metric is PipelineMetricAggregation => metricAggregationConfig[metric.type].isPipelineAgg;\n\nexport const isPipelineAggregationWithMultipleBucketPaths = (\n  metric: BaseMetricAggregation | PipelineMetricAggregationWithMultipleBucketPaths\n): metric is PipelineMetricAggregationWithMultipleBucketPaths =>\n  metricAggregationConfig[metric.type].supportsMultipleBucketPaths;\n\nexport const isMetricAggregationWithMissingSupport = (\n  metric: BaseMetricAggregation | MetricAggregationWithMissingSupport\n): metric is MetricAggregationWithMissingSupport => metricAggregationConfig[metric.type].supportsMissing;\n\nexport const isMetricAggregationWithSettings = (\n  metric: BaseMetricAggregation | MetricAggregationWithSettings\n): metric is MetricAggregationWithSettings => metricAggregationConfig[metric.type].hasSettings;\n\nexport const isMetricAggregationWithMeta = (\n  metric: BaseMetricAggregation | MetricAggregationWithMeta\n): metric is MetricAggregationWithMeta => metricAggregationConfig[metric.type].hasMeta;\n\nexport const isMetricAggregationWithInlineScript = (\n  metric: BaseMetricAggregation | MetricAggregationWithInlineScript\n): metric is MetricAggregationWithInlineScript => metricAggregationConfig[metric.type].supportsInlineScript;\n\nexport const METRIC_AGGREGATION_TYPES = [\n  'count',\n  'avg',\n  'sum',\n  'min',\n  'max',\n  'extended_stats',\n  'percentiles',\n  'cardinality',\n  'raw_document',\n  'raw_data',\n  'logs',\n  'moving_avg',\n  'moving_fn',\n  'derivative',\n  'serial_diff',\n  'cumulative_sum',\n  'bucket_script',\n];\n\nexport const isMetricAggregationType = (s: MetricAggregationType | string): s is MetricAggregationType =>\n  METRIC_AGGREGATION_TYPES.includes(s);\n","import { MetricsConfiguration } from '../../../types';\nimport {\n  isMetricAggregationWithField,\n  isPipelineAggregationWithMultipleBucketPaths,\n  MetricAggregation,\n  PipelineMetricAggregationType,\n} from './aggregations';\nimport { defaultPipelineVariable } from './SettingsEditor/BucketScriptSettingsEditor/utils';\n\nexport const metricAggregationConfig: MetricsConfiguration = {\n  count: {\n    label: 'Count',\n    requiresField: false,\n    isPipelineAgg: false,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: false,\n    hasMeta: false,\n    supportsInlineScript: false,\n    defaults: {},\n  },\n  avg: {\n    label: 'Average',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    hasMeta: false,\n    defaults: {},\n  },\n  sum: {\n    label: 'Sum',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    hasMeta: false,\n    defaults: {},\n  },\n  max: {\n    label: 'Max',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    hasMeta: false,\n    defaults: {},\n  },\n  min: {\n    label: 'Min',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    hasMeta: false,\n    defaults: {},\n  },\n  extended_stats: {\n    label: 'Extended Stats',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    hasMeta: true,\n    defaults: {\n      meta: {\n        std_deviation_bounds_lower: true,\n        std_deviation_bounds_upper: true,\n      },\n    },\n  },\n  percentiles: {\n    label: 'Percentiles',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    hasMeta: false,\n    defaults: {\n      settings: {\n        percents: ['25', '50', '75', '95', '99'],\n      },\n    },\n  },\n  cardinality: {\n    label: 'Unique Count',\n    requiresField: true,\n    supportsMissing: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {},\n  },\n  moving_avg: {\n    label: 'Moving Average',\n    requiresField: true,\n    isPipelineAgg: true,\n    minVersion: 2,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {\n      settings: {\n        model: 'simple',\n        window: 5,\n      },\n    },\n  },\n  moving_fn: {\n    // TODO: Check this\n    label: 'Moving Function',\n    requiresField: true,\n    isPipelineAgg: true,\n    supportsMultipleBucketPaths: false,\n    supportsInlineScript: false,\n    supportsMissing: false,\n    hasMeta: false,\n    hasSettings: true,\n    minVersion: 70,\n    defaults: {},\n  },\n  derivative: {\n    label: 'Derivative',\n    requiresField: true,\n    isPipelineAgg: true,\n    minVersion: 2,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {},\n  },\n  serial_diff: {\n    label: 'Serial Difference',\n    requiresField: true,\n    isPipelineAgg: true,\n    minVersion: 2,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {},\n  },\n  cumulative_sum: {\n    label: 'Cumulative Sum',\n    requiresField: true,\n    isPipelineAgg: true,\n    minVersion: 2,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {},\n  },\n  bucket_script: {\n    label: 'Bucket Script',\n    requiresField: false,\n    isPipelineAgg: true,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: true,\n    minVersion: 2,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {\n      pipelineVariables: [defaultPipelineVariable()],\n    },\n  },\n  raw_document: {\n    label: 'Raw Document (legacy)',\n    requiresField: false,\n    isSingleMetric: true,\n    isPipelineAgg: false,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {\n      settings: {\n        size: '500',\n      },\n    },\n  },\n  raw_data: {\n    label: 'Raw Data',\n    requiresField: false,\n    isSingleMetric: true,\n    isPipelineAgg: false,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {\n      settings: {\n        size: '500',\n      },\n    },\n  },\n  logs: {\n    label: 'Logs',\n    requiresField: false,\n    isPipelineAgg: false,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: false,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {},\n  },\n};\n\ninterface PipelineOption {\n  label: string;\n  default?: string | number | boolean;\n}\n\ntype PipelineOptions = {\n  [K in PipelineMetricAggregationType]: PipelineOption[];\n};\n\nexport const pipelineOptions: PipelineOptions = {\n  moving_avg: [\n    { label: 'window', default: 5 },\n    { label: 'model', default: 'simple' },\n    { label: 'predict' },\n    { label: 'minimize', default: false },\n  ],\n  moving_fn: [{ label: 'window', default: 5 }, { label: 'script' }],\n  derivative: [{ label: 'unit' }],\n  serial_diff: [{ label: 'lag' }],\n  cumulative_sum: [{ label: 'format' }],\n  bucket_script: [],\n};\n\n/**\n * Given a metric `MetricA` and an array of metrics, returns all children of `MetricA`.\n * `MetricB` is considered a child of `MetricA` if `MetricA` is referenced by `MetricB` in it's `field` attribute\n * (`MetricA.id === MetricB.field`) or in it's pipeline aggregation variables (for bucket_scripts).\n * @param metric\n * @param metrics\n */\nexport const getChildren = (metric: MetricAggregation, metrics: MetricAggregation[]): MetricAggregation[] => {\n  const children = metrics.filter((m) => {\n    // TODO: Check this.\n    if (isPipelineAggregationWithMultipleBucketPaths(m)) {\n      return m.pipelineVariables?.some((pv) => pv.pipelineAgg === metric.id);\n    }\n\n    return isMetricAggregationWithField(m) && metric.id === m.field;\n  });\n\n  return [...children, ...children.flatMap((child) => getChildren(child, metrics))];\n};\n","import { PipelineVariable } from '../../aggregations';\n\nexport const defaultPipelineVariable = (): PipelineVariable => ({ name: 'var1', pipelineAgg: '' });\n","import { BucketAggregation } from './components/QueryEditor/BucketAggregationsEditor/aggregations';\nimport {\n  ExtendedStat,\n  MetricAggregation,\n  MovingAverageModelOption,\n  MetricAggregationType,\n} from './components/QueryEditor/MetricAggregationsEditor/aggregations';\nimport { metricAggregationConfig, pipelineOptions } from './components/QueryEditor/MetricAggregationsEditor/utils';\n\nexport const extendedStats: ExtendedStat[] = [\n  { label: 'Avg', value: 'avg' },\n  { label: 'Min', value: 'min' },\n  { label: 'Max', value: 'max' },\n  { label: 'Sum', value: 'sum' },\n  { label: 'Count', value: 'count' },\n  { label: 'Std Dev', value: 'std_deviation' },\n  { label: 'Std Dev Upper', value: 'std_deviation_bounds_upper' },\n  { label: 'Std Dev Lower', value: 'std_deviation_bounds_lower' },\n];\n\nexport const movingAvgModelOptions: MovingAverageModelOption[] = [\n  { label: 'Simple', value: 'simple' },\n  { label: 'Linear', value: 'linear' },\n  { label: 'Exponentially Weighted', value: 'ewma' },\n  { label: 'Holt Linear', value: 'holt' },\n  { label: 'Holt Winters', value: 'holt_winters' },\n];\n\nexport function defaultMetricAgg(id = '1'): MetricAggregation {\n  return { type: 'count', id };\n}\n\nexport function defaultBucketAgg(id = '1'): BucketAggregation {\n  return { type: 'date_histogram', id, settings: { interval: 'auto' } };\n}\n\nexport const findMetricById = (metrics: MetricAggregation[], id: MetricAggregation['id']) =>\n  metrics.find((metric) => metric.id === id);\n\nexport function hasMetricOfType(target: any, type: string): boolean {\n  return target && target.metrics && target.metrics.some((m: any) => m.type === type);\n}\n\n// Even if we have type guards when building a query, we currently have no way of getting this information from the response.\n// We should try to find a better (type safe) way of doing the following 2.\nexport function isPipelineAgg(metricType: MetricAggregationType) {\n  return metricType in pipelineOptions;\n}\n\nexport function isPipelineAggWithMultipleBucketPaths(metricType: MetricAggregationType) {\n  return !!metricAggregationConfig[metricType].supportsMultipleBucketPaths;\n}\n","import { ElasticsearchQuery } from './types';\nimport { DataQuery, LanguageProvider } from '@grafana/data';\n\nimport { ElasticDatasource } from './datasource';\n\nimport { PromQuery } from '../prometheus/types';\n\nimport Prism, { Token } from 'prismjs';\nimport grammar from '../prometheus/promql';\nimport { defaultBucketAgg } from './query_def';\n\nfunction getNameLabelValue(promQuery: string, tokens: any): string {\n  let nameLabelValue = '';\n  for (let prop in tokens) {\n    if (typeof tokens[prop] === 'string') {\n      nameLabelValue = tokens[prop] as string;\n      break;\n    }\n  }\n  return nameLabelValue;\n}\n\nfunction extractPrometheusLabels(promQuery: string): string[][] {\n  const labels: string[][] = [];\n  if (!promQuery || promQuery.length === 0) {\n    return labels;\n  }\n  const tokens = Prism.tokenize(promQuery, grammar);\n  const nameLabelValue = getNameLabelValue(promQuery, tokens);\n  if (nameLabelValue && nameLabelValue.length > 0) {\n    labels.push(['__name__', '=', '\"' + nameLabelValue + '\"']);\n  }\n\n  for (let prop in tokens) {\n    if (tokens[prop] instanceof Token) {\n      let token: Token = tokens[prop] as Token;\n      if (token.type === 'context-labels') {\n        let labelKey = '';\n        let labelValue = '';\n        let labelOperator = '';\n        let contentTokens: any[] = token.content as any[];\n        for (let currentToken in contentTokens) {\n          if (typeof contentTokens[currentToken] === 'string') {\n            let currentStr: string;\n            currentStr = contentTokens[currentToken] as string;\n            if (currentStr === '=' || currentStr === '!=' || currentStr === '=~' || currentStr === '!~') {\n              labelOperator = currentStr;\n            }\n          } else if (contentTokens[currentToken] instanceof Token) {\n            switch (contentTokens[currentToken].type) {\n              case 'label-key':\n                labelKey = contentTokens[currentToken].content as string;\n                break;\n              case 'label-value':\n                labelValue = contentTokens[currentToken].content as string;\n                labels.push([labelKey, labelOperator, labelValue]);\n                break;\n            }\n          }\n        }\n      }\n    }\n  }\n  return labels;\n}\n\nfunction getElasticsearchQuery(prometheusLabels: string[][]): string {\n  let elasticsearchLuceneLabels = [];\n  for (let keyOperatorValue of prometheusLabels) {\n    switch (keyOperatorValue[1]) {\n      case '=': {\n        elasticsearchLuceneLabels.push(keyOperatorValue[0] + ':' + keyOperatorValue[2]);\n        break;\n      }\n      case '!=': {\n        elasticsearchLuceneLabels.push('NOT ' + keyOperatorValue[0] + ':' + keyOperatorValue[2]);\n        break;\n      }\n      case '=~': {\n        elasticsearchLuceneLabels.push(\n          keyOperatorValue[0] + ':/' + keyOperatorValue[2].substring(1, keyOperatorValue[2].length - 1) + '/'\n        );\n        break;\n      }\n      case '!~': {\n        elasticsearchLuceneLabels.push(\n          'NOT ' + keyOperatorValue[0] + ':/' + keyOperatorValue[2].substring(1, keyOperatorValue[2].length - 1) + '/'\n        );\n        break;\n      }\n    }\n  }\n  return elasticsearchLuceneLabels.join(' AND ');\n}\n\nexport default class ElasticsearchLanguageProvider extends LanguageProvider {\n  request: (url: string, params?: any) => Promise<any>;\n  start: () => Promise<any[]>;\n  datasource: ElasticDatasource;\n\n  constructor(datasource: ElasticDatasource, initialValues?: any) {\n    super();\n    this.datasource = datasource;\n\n    Object.assign(this, initialValues);\n  }\n\n  /**\n   * The current implementation only supports switching from Prometheus/Loki queries.\n   * For them we transform the query to an ES Logs query since it's the behaviour most users expect.\n   * For every other datasource we just copy the refId and let the query editor initialize a default query.\n   * */\n  importQueries(queries: DataQuery[], datasourceType: string): ElasticsearchQuery[] {\n    if (datasourceType === 'prometheus' || datasourceType === 'loki') {\n      return queries.map((query) => {\n        let prometheusQuery = query as PromQuery;\n        const expr = getElasticsearchQuery(extractPrometheusLabels(prometheusQuery.expr));\n        return {\n          isLogsQuery: true,\n          metrics: [\n            {\n              id: '1',\n              type: 'logs',\n            },\n          ],\n          bucketAggs: [{ ...defaultBucketAgg('2'), field: this.datasource.timeField }],\n          query: expr,\n          refId: query.refId,\n        };\n      });\n    }\n    return queries.map((query) => {\n      return {\n        refId: query.refId,\n      };\n    });\n  }\n}\n","import {\n  isMetricAggregationWithField,\n  MetricAggregation,\n} from './components/QueryEditor/MetricAggregationsEditor/aggregations';\nimport { metricAggregationConfig } from './components/QueryEditor/MetricAggregationsEditor/utils';\n\nexport const describeMetric = (metric: MetricAggregation) => {\n  if (!isMetricAggregationWithField(metric)) {\n    return metricAggregationConfig[metric.type].label;\n  }\n\n  // TODO: field might be undefined\n  return `${metricAggregationConfig[metric.type].label} ${metric.field}`;\n};\n\n/**\n * Utility function to clean up aggregations settings objects.\n * It removes nullish values and empty strings, array and objects\n * recursing over nested objects (not arrays).\n * @param obj\n */\nexport const removeEmpty = <T>(obj: T): Partial<T> =>\n  Object.entries(obj).reduce((acc, [key, value]) => {\n    // Removing nullish values (null & undefined)\n    if (value == null) {\n      return { ...acc };\n    }\n\n    // Removing empty arrays (This won't recurse the array)\n    if (Array.isArray(value) && value.length === 0) {\n      return { ...acc };\n    }\n\n    // Removing empty strings\n    if (value?.length === 0) {\n      return { ...acc };\n    }\n\n    // Recursing over nested objects\n    if (!Array.isArray(value) && typeof value === 'object') {\n      const cleanObj = removeEmpty(value);\n\n      if (Object.keys(cleanObj).length === 0) {\n        return { ...acc };\n      }\n\n      return { ...acc, [key]: cleanObj };\n    }\n\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n\n/**\n *  This function converts an order by string to the correct metric id For example,\n *  if the user uses the standard deviation extended stat for the order by,\n *  the value would be \"1[std_deviation]\" and this would return \"1\"\n */\nexport const convertOrderByToMetricId = (orderBy: string): string | undefined => {\n  const metricIdMatches = orderBy.match(/^(\\d+)/);\n  return metricIdMatches ? metricIdMatches[1] : void 0;\n};\n","import _ from 'lodash';\nimport flatten from 'app/core/utils/flatten';\nimport * as queryDef from './query_def';\nimport TableModel from 'app/core/table_model';\nimport {\n  DataQueryResponse,\n  DataFrame,\n  toDataFrame,\n  FieldType,\n  MutableDataFrame,\n  PreferredVisualisationType,\n} from '@grafana/data';\nimport { ElasticsearchAggregation, ElasticsearchQuery } from './types';\nimport {\n  ExtendedStatMetaType,\n  isMetricAggregationWithField,\n} from './components/QueryEditor/MetricAggregationsEditor/aggregations';\nimport { describeMetric } from './utils';\nimport { metricAggregationConfig } from './components/QueryEditor/MetricAggregationsEditor/utils';\n\nexport class ElasticResponse {\n  constructor(private targets: ElasticsearchQuery[], private response: any) {\n    this.targets = targets;\n    this.response = response;\n  }\n\n  processMetrics(esAgg: any, target: ElasticsearchQuery, seriesList: any, props: any) {\n    let newSeries: any;\n\n    for (let y = 0; y < target.metrics!.length; y++) {\n      const metric = target.metrics![y];\n      if (metric.hide) {\n        continue;\n      }\n\n      switch (metric.type) {\n        case 'count': {\n          newSeries = { datapoints: [], metric: 'count', props, refId: target.refId };\n          for (let i = 0; i < esAgg.buckets.length; i++) {\n            const bucket = esAgg.buckets[i];\n            const value = bucket.doc_count;\n            newSeries.datapoints.push([value, bucket.key]);\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n        case 'percentiles': {\n          if (esAgg.buckets.length === 0) {\n            break;\n          }\n\n          const firstBucket = esAgg.buckets[0];\n          const percentiles = firstBucket[metric.id].values;\n\n          for (const percentileName in percentiles) {\n            newSeries = {\n              datapoints: [],\n              metric: 'p' + percentileName,\n              props: props,\n              field: metric.field,\n              refId: target.refId,\n            };\n\n            for (let i = 0; i < esAgg.buckets.length; i++) {\n              const bucket = esAgg.buckets[i];\n              const values = bucket[metric.id].values;\n              newSeries.datapoints.push([values[percentileName], bucket.key]);\n            }\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        case 'extended_stats': {\n          for (const statName in metric.meta) {\n            if (!metric.meta[statName as ExtendedStatMetaType]) {\n              continue;\n            }\n\n            newSeries = {\n              datapoints: [],\n              metric: statName,\n              props: props,\n              field: metric.field,\n              refId: target.refId,\n            };\n\n            for (let i = 0; i < esAgg.buckets.length; i++) {\n              const bucket = esAgg.buckets[i];\n              const stats = bucket[metric.id];\n\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              newSeries.datapoints.push([stats[statName], bucket.key]);\n            }\n\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        default: {\n          newSeries = {\n            datapoints: [],\n            metric: metric.type,\n            metricId: metric.id,\n            props: props,\n            refId: target.refId,\n          };\n\n          if (isMetricAggregationWithField(metric)) {\n            newSeries.field = metric.field;\n          }\n\n          for (let i = 0; i < esAgg.buckets.length; i++) {\n            const bucket = esAgg.buckets[i];\n            const value = bucket[metric.id];\n\n            if (value !== undefined) {\n              if (value.normalized_value) {\n                newSeries.datapoints.push([value.normalized_value, bucket.key]);\n              } else {\n                newSeries.datapoints.push([value.value, bucket.key]);\n              }\n            }\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n      }\n    }\n  }\n\n  processAggregationDocs(\n    esAgg: any,\n    aggDef: ElasticsearchAggregation,\n    target: ElasticsearchQuery,\n    table: any,\n    props: any\n  ) {\n    // add columns\n    if (table.columns.length === 0) {\n      for (const propKey of _.keys(props)) {\n        table.addColumn({ text: propKey, filterable: true });\n      }\n      table.addColumn({ text: aggDef.field, filterable: true });\n    }\n\n    // helper func to add values to value array\n    const addMetricValue = (values: any[], metricName: string, value: any) => {\n      table.addColumn({ text: metricName });\n      values.push(value);\n    };\n    const buckets = _.isArray(esAgg.buckets) ? esAgg.buckets : [esAgg.buckets];\n    for (const bucket of buckets) {\n      const values = [];\n\n      for (const propValues of _.values(props)) {\n        values.push(propValues);\n      }\n\n      // add bucket key (value)\n      values.push(bucket.key);\n\n      for (const metric of target.metrics || []) {\n        switch (metric.type) {\n          case 'count': {\n            addMetricValue(values, this.getMetricName(metric.type), bucket.doc_count);\n            break;\n          }\n          case 'extended_stats': {\n            for (const statName in metric.meta) {\n              if (!metric.meta[statName as ExtendedStatMetaType]) {\n                continue;\n              }\n\n              const stats = bucket[metric.id];\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              addMetricValue(values, this.getMetricName(statName as ExtendedStatMetaType), stats[statName]);\n            }\n            break;\n          }\n          case 'percentiles': {\n            const percentiles = bucket[metric.id].values;\n\n            for (const percentileName in percentiles) {\n              addMetricValue(values, `p${percentileName} ${metric.field}`, percentiles[percentileName]);\n            }\n            break;\n          }\n          default: {\n            let metricName = this.getMetricName(metric.type);\n            const otherMetrics = _.filter(target.metrics, { type: metric.type });\n\n            // if more of the same metric type include field field name in property\n            if (otherMetrics.length > 1) {\n              if (isMetricAggregationWithField(metric)) {\n                metricName += ' ' + metric.field;\n              }\n\n              if (metric.type === 'bucket_script') {\n                //Use the formula in the column name\n                metricName = metric.settings?.script || '';\n              }\n            }\n\n            addMetricValue(values, metricName, bucket[metric.id].value);\n            break;\n          }\n        }\n      }\n\n      table.rows.push(values);\n    }\n  }\n\n  // This is quite complex\n  // need to recurse down the nested buckets to build series\n  processBuckets(aggs: any, target: ElasticsearchQuery, seriesList: any, table: TableModel, props: any, depth: number) {\n    let bucket, aggDef: any, esAgg, aggId;\n    const maxDepth = target.bucketAggs!.length - 1;\n\n    for (aggId in aggs) {\n      aggDef = _.find(target.bucketAggs, { id: aggId });\n      esAgg = aggs[aggId];\n\n      if (!aggDef) {\n        continue;\n      }\n\n      if (depth === maxDepth) {\n        if (aggDef.type === 'date_histogram') {\n          this.processMetrics(esAgg, target, seriesList, props);\n        } else {\n          this.processAggregationDocs(esAgg, aggDef, target, table, props);\n        }\n      } else {\n        for (const nameIndex in esAgg.buckets) {\n          bucket = esAgg.buckets[nameIndex];\n          props = _.clone(props);\n          if (bucket.key !== void 0) {\n            props[aggDef.field] = bucket.key;\n          } else {\n            props['filter'] = nameIndex;\n          }\n          if (bucket.key_as_string) {\n            props[aggDef.field] = bucket.key_as_string;\n          }\n          this.processBuckets(bucket, target, seriesList, table, props, depth + 1);\n        }\n      }\n    }\n  }\n\n  private getMetricName(metric: string): string {\n    const metricDef = Object.entries(metricAggregationConfig)\n      .filter(([key]) => key === metric)\n      .map(([_, value]) => value)[0];\n\n    if (metricDef) {\n      return metricDef.label;\n    }\n\n    const extendedStat = queryDef.extendedStats.find((e) => e.value === metric);\n    if (extendedStat) {\n      return extendedStat.label;\n    }\n\n    return metric;\n  }\n\n  private getSeriesName(series: any, target: ElasticsearchQuery, metricTypeCount: any) {\n    let metricName = this.getMetricName(series.metric);\n\n    if (target.alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n\n      return target.alias.replace(regex, (match: any, g1: any, g2: any) => {\n        const group = g1 || g2;\n\n        if (group.indexOf('term ') === 0) {\n          return series.props[group.substring(5)];\n        }\n        if (series.props[group] !== void 0) {\n          return series.props[group];\n        }\n        if (group === 'metric') {\n          return metricName;\n        }\n        if (group === 'field') {\n          return series.field || '';\n        }\n\n        return match;\n      });\n    }\n\n    if (queryDef.isPipelineAgg(series.metric)) {\n      if (series.metric && queryDef.isPipelineAggWithMultipleBucketPaths(series.metric)) {\n        const agg: any = _.find(target.metrics, { id: series.metricId });\n        if (agg && agg.settings.script) {\n          metricName = agg.settings.script;\n\n          for (const pv of agg.pipelineVariables) {\n            const appliedAgg: any = _.find(target.metrics, { id: pv.pipelineAgg });\n            if (appliedAgg) {\n              metricName = metricName.replace('params.' + pv.name, describeMetric(appliedAgg));\n            }\n          }\n        } else {\n          metricName = 'Unset';\n        }\n      } else {\n        const appliedAgg: any = _.find(target.metrics, { id: series.field });\n        if (appliedAgg) {\n          metricName += ' ' + describeMetric(appliedAgg);\n        } else {\n          metricName = 'Unset';\n        }\n      }\n    } else if (series.field) {\n      metricName += ' ' + series.field;\n    }\n\n    const propKeys = _.keys(series.props);\n    if (propKeys.length === 0) {\n      return metricName;\n    }\n\n    let name = '';\n    for (const propName in series.props) {\n      name += series.props[propName] + ' ';\n    }\n\n    if (metricTypeCount === 1) {\n      return name.trim();\n    }\n\n    return name.trim() + ' ' + metricName;\n  }\n\n  nameSeries(seriesList: any, target: ElasticsearchQuery) {\n    const metricTypeCount = _.uniq(_.map(seriesList, 'metric')).length;\n\n    for (let i = 0; i < seriesList.length; i++) {\n      const series = seriesList[i];\n      series.target = this.getSeriesName(series, target, metricTypeCount);\n    }\n  }\n\n  processHits(hits: { total: { value: any }; hits: any[] }, seriesList: any[], target: ElasticsearchQuery) {\n    const hitsTotal = typeof hits.total === 'number' ? hits.total : hits.total.value; // <- Works with Elasticsearch 7.0+\n\n    const series: any = {\n      target: target.refId,\n      type: 'docs',\n      refId: target.refId,\n      datapoints: [],\n      total: hitsTotal,\n      filterable: true,\n    };\n    let propName, hit, doc: any, i;\n\n    for (i = 0; i < hits.hits.length; i++) {\n      hit = hits.hits[i];\n      doc = {\n        _id: hit._id,\n        _type: hit._type,\n        _index: hit._index,\n        sort: hit.sort,\n      };\n\n      if (hit._source) {\n        for (propName in hit._source) {\n          doc[propName] = hit._source[propName];\n        }\n      }\n\n      for (propName in hit.fields) {\n        doc[propName] = hit.fields[propName];\n      }\n      series.datapoints.push(doc);\n    }\n\n    seriesList.push(series);\n  }\n\n  trimDatapoints(aggregations: any, target: ElasticsearchQuery) {\n    const histogram: any = _.find(target.bucketAggs, { type: 'date_histogram' });\n\n    const shouldDropFirstAndLast = histogram && histogram.settings && histogram.settings.trimEdges;\n    if (shouldDropFirstAndLast) {\n      const trim = histogram.settings.trimEdges;\n      for (const prop in aggregations) {\n        const points = aggregations[prop];\n        if (points.datapoints.length > trim * 2) {\n          points.datapoints = points.datapoints.slice(trim, points.datapoints.length - trim);\n        }\n      }\n    }\n  }\n\n  getErrorFromElasticResponse(response: any, err: any) {\n    const result: any = {};\n    result.data = JSON.stringify(err, null, 4);\n    if (err.root_cause && err.root_cause.length > 0 && err.root_cause[0].reason) {\n      result.message = err.root_cause[0].reason;\n    } else {\n      result.message = err.reason || 'Unknown elastic error response';\n    }\n\n    if (response.$$config) {\n      result.config = response.$$config;\n    }\n\n    return result;\n  }\n\n  getTimeSeries() {\n    if (this.targets.some((target) => target.metrics?.some((metric) => metric.type === 'raw_data'))) {\n      return this.processResponseToDataFrames(false);\n    }\n    return this.processResponseToSeries();\n  }\n\n  getLogs(logMessageField?: string, logLevelField?: string): DataQueryResponse {\n    return this.processResponseToDataFrames(true, logMessageField, logLevelField);\n  }\n\n  processResponseToDataFrames(\n    isLogsRequest: boolean,\n    logMessageField?: string,\n    logLevelField?: string\n  ): DataQueryResponse {\n    const dataFrame: DataFrame[] = [];\n\n    for (let n = 0; n < this.response.responses.length; n++) {\n      const response = this.response.responses[n];\n      if (response.error) {\n        throw this.getErrorFromElasticResponse(this.response, response.error);\n      }\n\n      if (response.hits && response.hits.hits.length > 0) {\n        const { propNames, docs } = flattenHits(response.hits.hits);\n        if (docs.length > 0) {\n          let series = createEmptyDataFrame(\n            propNames,\n            this.targets[0].timeField!,\n            isLogsRequest,\n            logMessageField,\n            logLevelField\n          );\n\n          // Add a row for each document\n          for (const doc of docs) {\n            if (logLevelField) {\n              // Remap level field based on the datasource config. This field is then used in explore to figure out the\n              // log level. We may rewrite some actual data in the level field if they are different.\n              doc['level'] = doc[logLevelField];\n            }\n\n            series.add(doc);\n          }\n          if (isLogsRequest) {\n            series = addPreferredVisualisationType(series, 'logs');\n          }\n          const target = this.targets[n];\n          series.refId = target.refId;\n          dataFrame.push(series);\n        }\n      }\n\n      if (response.aggregations) {\n        const aggregations = response.aggregations;\n        const target = this.targets[n];\n        const tmpSeriesList: any[] = [];\n        const table = new TableModel();\n\n        this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);\n        this.trimDatapoints(tmpSeriesList, target);\n        this.nameSeries(tmpSeriesList, target);\n\n        if (table.rows.length > 0) {\n          const series = toDataFrame(table);\n          series.refId = target.refId;\n          dataFrame.push(series);\n        }\n\n        for (let y = 0; y < tmpSeriesList.length; y++) {\n          let series = toDataFrame(tmpSeriesList[y]);\n\n          // When log results, show aggregations only in graph. Log fields are then going to be shown in table.\n          if (isLogsRequest) {\n            series = addPreferredVisualisationType(series, 'graph');\n          }\n\n          series.refId = target.refId;\n          dataFrame.push(series);\n        }\n      }\n    }\n\n    return { data: dataFrame };\n  }\n\n  processResponseToSeries = () => {\n    const seriesList = [];\n\n    for (let i = 0; i < this.response.responses.length; i++) {\n      const response = this.response.responses[i];\n      const target = this.targets[i];\n\n      if (response.error) {\n        throw this.getErrorFromElasticResponse(this.response, response.error);\n      }\n\n      if (response.hits && response.hits.hits.length > 0) {\n        this.processHits(response.hits, seriesList, target);\n      }\n\n      if (response.aggregations) {\n        const aggregations = response.aggregations;\n        const target = this.targets[i];\n        const tmpSeriesList: any[] = [];\n        const table = new TableModel();\n        table.refId = target.refId;\n\n        this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);\n        this.trimDatapoints(tmpSeriesList, target);\n        this.nameSeries(tmpSeriesList, target);\n\n        for (let y = 0; y < tmpSeriesList.length; y++) {\n          seriesList.push(tmpSeriesList[y]);\n        }\n\n        if (table.rows.length > 0) {\n          seriesList.push(table);\n        }\n      }\n    }\n\n    return { data: seriesList };\n  };\n}\n\ntype Doc = {\n  _id: string;\n  _type: string;\n  _index: string;\n  _source?: any;\n  sort?: Array<string | number>;\n};\n\n/**\n * Flatten the docs from response mainly the _source part which can be nested. This flattens it so that it is one level\n * deep and the keys are: `level1Name.level2Name...`. Also returns list of all properties from all the docs (not all\n * docs have to have the same keys).\n * @param hits\n */\nconst flattenHits = (hits: Doc[]): { docs: Array<Record<string, any>>; propNames: string[] } => {\n  const docs: any[] = [];\n  // We keep a list of all props so that we can create all the fields in the dataFrame, this can lead\n  // to wide sparse dataframes in case the scheme is different per document.\n  let propNames: string[] = [];\n\n  for (const hit of hits) {\n    const flattened = hit._source ? flatten(hit._source) : {};\n    const doc = {\n      _id: hit._id,\n      _type: hit._type,\n      _index: hit._index,\n      sort: hit.sort,\n      _source: { ...flattened },\n      ...flattened,\n    };\n\n    for (const propName of Object.keys(doc)) {\n      if (propNames.indexOf(propName) === -1) {\n        propNames.push(propName);\n      }\n    }\n\n    docs.push(doc);\n  }\n\n  propNames.sort();\n  return { docs, propNames };\n};\n\n/**\n * Create empty dataframe but with created fields. Fields are based from propNames (should be from the response) and\n * also from configuration specified fields for message, time, and level.\n * @param propNames\n * @param timeField\n * @param logMessageField\n * @param logLevelField\n */\nconst createEmptyDataFrame = (\n  propNames: string[],\n  timeField: string,\n  isLogsRequest: boolean,\n  logMessageField?: string,\n  logLevelField?: string\n): MutableDataFrame => {\n  const series = new MutableDataFrame({ fields: [] });\n\n  series.addField({\n    config: {\n      filterable: true,\n    },\n    name: timeField,\n    type: FieldType.time,\n  });\n\n  if (logMessageField) {\n    series.addField({\n      name: logMessageField,\n      type: FieldType.string,\n    }).parse = (v: any) => {\n      return v || '';\n    };\n  }\n\n  if (logLevelField) {\n    series.addField({\n      name: 'level',\n      type: FieldType.string,\n    }).parse = (v: any) => {\n      return v || '';\n    };\n  }\n\n  const fieldNames = series.fields.map((field) => field.name);\n\n  for (const propName of propNames) {\n    // Do not duplicate fields. This can mean that we will shadow some fields.\n    if (fieldNames.includes(propName)) {\n      continue;\n    }\n    // Do not add _source field (besides logs) as we are showing each _source field in table instead.\n    if (!isLogsRequest && propName === '_source') {\n      continue;\n    }\n\n    series.addField({\n      config: {\n        filterable: true,\n      },\n      name: propName,\n      type: FieldType.string,\n    }).parse = (v: any) => {\n      return v || '';\n    };\n  }\n\n  return series;\n};\n\nconst addPreferredVisualisationType = (series: any, type: PreferredVisualisationType) => {\n  let s = series;\n  s.meta\n    ? (s.meta.preferredVisualisationType = type)\n    : (s.meta = {\n        preferredVisualisationType: type,\n      });\n\n  return s;\n};\n","import { toUtc, dateTime, DateTime, DurationUnit } from '@grafana/data';\nimport { Interval } from './types';\n\ntype IntervalMap = Record<\n  Interval,\n  {\n    startOf: DurationUnit;\n    amount: DurationUnit;\n  }\n>;\n\nconst intervalMap: IntervalMap = {\n  Hourly: { startOf: 'hour', amount: 'hours' },\n  Daily: { startOf: 'day', amount: 'days' },\n  Weekly: { startOf: 'week', amount: 'weeks' },\n  Monthly: { startOf: 'month', amount: 'months' },\n  Yearly: { startOf: 'year', amount: 'years' },\n};\n\nexport class IndexPattern {\n  private dateLocale = 'en';\n\n  constructor(private pattern: string, private interval?: keyof typeof intervalMap) {}\n\n  getIndexForToday() {\n    if (this.interval) {\n      return toUtc().locale(this.dateLocale).format(this.pattern);\n    } else {\n      return this.pattern;\n    }\n  }\n\n  getIndexList(from?: DateTime, to?: DateTime) {\n    // When no `from` or `to` is provided, we request data from 7 subsequent/previous indices\n    // for the provided index pattern.\n    // This is useful when requesting log context where the only time data we have is the log\n    // timestamp.\n    const indexOffset = 7;\n    if (!this.interval) {\n      return this.pattern;\n    }\n\n    const intervalInfo = intervalMap[this.interval];\n    const start = dateTime(from || dateTime(to).add(-indexOffset, intervalInfo.amount))\n      .utc()\n      .startOf(intervalInfo.startOf);\n    const endEpoch = dateTime(to || dateTime(from).add(indexOffset, intervalInfo.amount))\n      .utc()\n      .startOf(intervalInfo.startOf)\n      .valueOf();\n    const indexList = [];\n\n    while (start.valueOf() <= endEpoch) {\n      indexList.push(start.locale(this.dateLocale).format(this.pattern));\n      start.add(1, intervalInfo.amount);\n    }\n\n    return indexList;\n  }\n}\n","import {\n  Filters,\n  Histogram,\n  DateHistogram,\n  Terms,\n} from './components/QueryEditor/BucketAggregationsEditor/aggregations';\nimport {\n  isMetricAggregationWithField,\n  isMetricAggregationWithSettings,\n  isPipelineAggregation,\n  isPipelineAggregationWithMultipleBucketPaths,\n} from './components/QueryEditor/MetricAggregationsEditor/aggregations';\nimport { defaultBucketAgg, defaultMetricAgg, findMetricById } from './query_def';\nimport { ElasticsearchQuery } from './types';\nimport { convertOrderByToMetricId } from './utils';\n\nexport class ElasticQueryBuilder {\n  timeField: string;\n  esVersion: number;\n\n  constructor(options: { timeField: string; esVersion: number }) {\n    this.timeField = options.timeField;\n    this.esVersion = options.esVersion;\n  }\n\n  getRangeFilter() {\n    const filter: any = {};\n    filter[this.timeField] = {\n      gte: '$timeFrom',\n      lte: '$timeTo',\n      format: 'epoch_millis',\n    };\n\n    return filter;\n  }\n\n  buildTermsAgg(aggDef: Terms, queryNode: { terms?: any; aggs?: any }, target: ElasticsearchQuery) {\n    queryNode.terms = { field: aggDef.field };\n\n    if (!aggDef.settings) {\n      return queryNode;\n    }\n\n    // TODO: This default should be somewhere else together with the one used in the UI\n    const size = aggDef.settings?.size ? parseInt(aggDef.settings.size, 10) : 500;\n    queryNode.terms.size = size === 0 ? 500 : size;\n\n    if (aggDef.settings.orderBy !== void 0) {\n      queryNode.terms.order = {};\n      if (aggDef.settings.orderBy === '_term' && this.esVersion >= 60) {\n        queryNode.terms.order['_key'] = aggDef.settings.order;\n      } else {\n        queryNode.terms.order[aggDef.settings.orderBy] = aggDef.settings.order;\n      }\n\n      // if metric ref, look it up and add it to this agg level\n      const metricId = convertOrderByToMetricId(aggDef.settings.orderBy);\n      if (metricId) {\n        for (let metric of target.metrics || []) {\n          if (metric.id === metricId) {\n            if (metric.type === 'count') {\n              queryNode.terms.order = { _count: aggDef.settings.order };\n            } else if (isMetricAggregationWithField(metric)) {\n              queryNode.aggs = {};\n              queryNode.aggs[metric.id] = {\n                [metric.type]: { field: metric.field },\n              };\n            }\n            break;\n          }\n        }\n      }\n    }\n\n    if (aggDef.settings.min_doc_count !== void 0) {\n      queryNode.terms.min_doc_count = parseInt(aggDef.settings.min_doc_count, 10);\n\n      if (isNaN(queryNode.terms.min_doc_count)) {\n        queryNode.terms.min_doc_count = aggDef.settings.min_doc_count;\n      }\n    }\n\n    if (aggDef.settings.missing) {\n      queryNode.terms.missing = aggDef.settings.missing;\n    }\n\n    return queryNode;\n  }\n\n  getDateHistogramAgg(aggDef: DateHistogram) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = this.timeField;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n    esAgg.extended_bounds = { min: '$timeFrom', max: '$timeTo' };\n    esAgg.format = 'epoch_millis';\n\n    if (settings.offset !== '') {\n      esAgg.offset = settings.offset;\n    }\n\n    if (esAgg.interval === 'auto') {\n      esAgg.interval = '$__interval';\n    }\n\n    return esAgg;\n  }\n\n  getHistogramAgg(aggDef: Histogram) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = aggDef.field;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n\n    return esAgg;\n  }\n\n  getFiltersAgg(aggDef: Filters) {\n    const filterObj: Record<string, { query_string: { query: string; analyze_wildcard: boolean } }> = {};\n\n    for (let { query, label } of aggDef.settings?.filters || []) {\n      filterObj[label || query] = {\n        query_string: {\n          query: query,\n          analyze_wildcard: true,\n        },\n      };\n    }\n\n    return filterObj;\n  }\n\n  documentQuery(query: any, size: number) {\n    query.size = size;\n    query.sort = [\n      {\n        [this.timeField]: { order: 'desc', unmapped_type: 'boolean' },\n      },\n      {\n        _doc: { order: 'desc' },\n      },\n    ];\n\n    // fields field not supported on ES 5.x\n    if (this.esVersion < 5) {\n      query.fields = ['*', '_source'];\n    }\n\n    query.script_fields = {};\n    return query;\n  }\n\n  addAdhocFilters(query: any, adhocFilters: any) {\n    if (!adhocFilters) {\n      return;\n    }\n\n    let i, filter, condition: any, queryCondition: any;\n\n    for (i = 0; i < adhocFilters.length; i++) {\n      filter = adhocFilters[i];\n      condition = {};\n      condition[filter.key] = filter.value;\n      queryCondition = {};\n      queryCondition[filter.key] = { query: filter.value };\n\n      switch (filter.operator) {\n        case '=':\n          if (!query.query.bool.must) {\n            query.query.bool.must = [];\n          }\n          query.query.bool.must.push({ match_phrase: queryCondition });\n          break;\n        case '!=':\n          if (!query.query.bool.must_not) {\n            query.query.bool.must_not = [];\n          }\n          query.query.bool.must_not.push({ match_phrase: queryCondition });\n          break;\n        case '<':\n          condition[filter.key] = { lt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '>':\n          condition[filter.key] = { gt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '=~':\n          query.query.bool.filter.push({ regexp: condition });\n          break;\n        case '!~':\n          query.query.bool.filter.push({\n            bool: { must_not: { regexp: condition } },\n          });\n          break;\n      }\n    }\n  }\n\n  build(target: ElasticsearchQuery, adhocFilters?: any, queryString?: string) {\n    // make sure query has defaults;\n    target.metrics = target.metrics || [defaultMetricAgg()];\n    target.bucketAggs = target.bucketAggs || [defaultBucketAgg()];\n    target.timeField = this.timeField;\n\n    let i, j, pv, nestedAggs, metric;\n    const query = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [\n            { range: this.getRangeFilter() },\n            {\n              query_string: {\n                analyze_wildcard: true,\n                query: queryString,\n              },\n            },\n          ],\n        },\n      },\n    };\n\n    this.addAdhocFilters(query, adhocFilters);\n\n    // If target doesn't have bucketAggs and type is not raw_document, it is invalid query.\n    if (target.bucketAggs.length === 0) {\n      metric = target.metrics[0];\n\n      if (!metric || !(metric.type === 'raw_document' || metric.type === 'raw_data')) {\n        throw { message: 'Invalid query' };\n      }\n    }\n\n    /* Handle document query:\n     * Check if metric type is raw_document. If metric doesn't have size (or size is 0), update size to 500.\n     * Otherwise it will not be a valid query and error will be thrown.\n     */\n    if (target.metrics?.[0]?.type === 'raw_document' || target.metrics?.[0]?.type === 'raw_data') {\n      metric = target.metrics[0];\n\n      // TODO: This default should be somewhere else together with the one used in the UI\n      const size = metric.settings?.size ? parseInt(metric.settings.size, 10) : 500;\n\n      return this.documentQuery(query, size || 500);\n    }\n\n    nestedAggs = query;\n\n    for (i = 0; i < target.bucketAggs.length; i++) {\n      const aggDef = target.bucketAggs[i];\n      const esAgg: any = {};\n\n      switch (aggDef.type) {\n        case 'date_histogram': {\n          esAgg['date_histogram'] = this.getDateHistogramAgg(aggDef);\n          break;\n        }\n        case 'histogram': {\n          esAgg['histogram'] = this.getHistogramAgg(aggDef);\n          break;\n        }\n        case 'filters': {\n          esAgg['filters'] = { filters: this.getFiltersAgg(aggDef) };\n          break;\n        }\n        case 'terms': {\n          this.buildTermsAgg(aggDef, esAgg, target);\n          break;\n        }\n        case 'geohash_grid': {\n          esAgg['geohash_grid'] = {\n            field: aggDef.field,\n            precision: aggDef.settings?.precision,\n          };\n          break;\n        }\n      }\n\n      nestedAggs.aggs = nestedAggs.aggs || {};\n      nestedAggs.aggs[aggDef.id] = esAgg;\n      nestedAggs = esAgg;\n    }\n\n    nestedAggs.aggs = {};\n\n    for (i = 0; i < target.metrics.length; i++) {\n      metric = target.metrics[i];\n      if (metric.type === 'count') {\n        continue;\n      }\n\n      const aggField: any = {};\n      let metricAgg: any = null;\n\n      if (isPipelineAggregation(metric)) {\n        if (isPipelineAggregationWithMultipleBucketPaths(metric)) {\n          if (metric.pipelineVariables) {\n            metricAgg = {\n              buckets_path: {},\n            };\n\n            for (j = 0; j < metric.pipelineVariables.length; j++) {\n              pv = metric.pipelineVariables[j];\n\n              if (pv.name && pv.pipelineAgg && /^\\d*$/.test(pv.pipelineAgg)) {\n                const appliedAgg = findMetricById(target.metrics, pv.pipelineAgg);\n                if (appliedAgg) {\n                  if (appliedAgg.type === 'count') {\n                    metricAgg.buckets_path[pv.name] = '_count';\n                  } else {\n                    metricAgg.buckets_path[pv.name] = pv.pipelineAgg;\n                  }\n                }\n              }\n            }\n          } else {\n            continue;\n          }\n        } else {\n          if (metric.field && /^\\d*$/.test(metric.field)) {\n            const appliedAgg = findMetricById(target.metrics, metric.field);\n            if (appliedAgg) {\n              if (appliedAgg.type === 'count') {\n                metricAgg = { buckets_path: '_count' };\n              } else {\n                metricAgg = { buckets_path: metric.field };\n              }\n            }\n          } else {\n            continue;\n          }\n        }\n      } else if (isMetricAggregationWithField(metric)) {\n        metricAgg = { field: metric.field };\n      }\n\n      if (isMetricAggregationWithSettings(metric)) {\n        Object.entries(metric.settings || {})\n          .filter(([_, v]) => v !== null)\n          .forEach(([k, v]) => (metricAgg[k] = v));\n      }\n\n      aggField[metric.type] = metricAgg;\n      nestedAggs.aggs[metric.id] = aggField;\n    }\n\n    return query;\n  }\n\n  getTermsQuery(queryDef: any) {\n    const query: any = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [{ range: this.getRangeFilter() }],\n        },\n      },\n    };\n\n    if (queryDef.query) {\n      query.query.bool.filter.push({\n        query_string: {\n          analyze_wildcard: true,\n          query: queryDef.query,\n        },\n      });\n    }\n\n    let size = 500;\n    if (queryDef.size) {\n      size = queryDef.size;\n    }\n\n    query.aggs = {\n      '1': {\n        terms: {\n          field: queryDef.field,\n          size: size,\n          order: {},\n        },\n      },\n    };\n\n    // Default behaviour is to order results by { _key: asc }\n    // queryDef.order allows selection of asc/desc\n    // queryDef.orderBy allows selection of doc_count ordering (defaults desc)\n\n    const { orderBy = 'key', order = orderBy === 'doc_count' ? 'desc' : 'asc' } = queryDef;\n\n    if (['asc', 'desc'].indexOf(order) < 0) {\n      throw { message: `Invalid query sort order ${order}` };\n    }\n\n    switch (orderBy) {\n      case 'key':\n      case 'term':\n        const keyname = this.esVersion >= 60 ? '_key' : '_term';\n        query.aggs['1'].terms.order[keyname] = order;\n        break;\n      case 'doc_count':\n        query.aggs['1'].terms.order['_count'] = order;\n        break;\n      default:\n        throw { message: `Invalid query sort type ${orderBy}` };\n    }\n\n    return query;\n  }\n\n  getLogsQuery(target: ElasticsearchQuery, adhocFilters?: any, querystring?: string) {\n    let query: any = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [{ range: this.getRangeFilter() }],\n        },\n      },\n    };\n\n    this.addAdhocFilters(query, adhocFilters);\n\n    if (target.query) {\n      query.query.bool.filter.push({\n        query_string: {\n          analyze_wildcard: true,\n          query: querystring,\n        },\n      });\n    }\n\n    query = this.documentQuery(query, 500);\n\n    return {\n      ...query,\n      aggs: this.build(target, null, querystring).aggs,\n    };\n  }\n}\n","import { BucketsConfiguration } from '../../../types';\nimport { defaultFilter } from './SettingsEditor/FiltersSettingsEditor/utils';\nimport { describeMetric } from '../../../utils';\nimport {\n  ExtendedStatMetaType,\n  ExtendedStats,\n  MetricAggregation,\n  Percentiles,\n} from '../MetricAggregationsEditor/aggregations';\nimport { SelectableValue } from '@grafana/data';\n\nexport const bucketAggregationConfig: BucketsConfiguration = {\n  terms: {\n    label: 'Terms',\n    requiresField: true,\n    defaultSettings: {\n      min_doc_count: '0',\n      size: '10',\n      order: 'desc',\n      orderBy: '_term',\n    },\n  },\n  filters: {\n    label: 'Filters',\n    requiresField: false,\n    defaultSettings: {\n      filters: [defaultFilter()],\n    },\n  },\n  geohash_grid: {\n    label: 'Geo Hash Grid',\n    requiresField: true,\n    defaultSettings: {\n      precision: '3',\n    },\n  },\n  date_histogram: {\n    label: 'Date Histogram',\n    requiresField: true,\n    defaultSettings: {\n      interval: 'auto',\n      min_doc_count: '0',\n      trimEdges: '0',\n    },\n  },\n  histogram: {\n    label: 'Histogram',\n    requiresField: true,\n    defaultSettings: {\n      interval: '1000',\n      min_doc_count: '0',\n    },\n  },\n};\n\n// TODO: Define better types for the following\ntype OrderByOption = SelectableValue<string>;\nexport const orderOptions: OrderByOption[] = [\n  { label: 'Top', value: 'desc' },\n  { label: 'Bottom', value: 'asc' },\n];\n\nexport const sizeOptions = [\n  { label: 'No limit', value: '0' },\n  { label: '1', value: '1' },\n  { label: '2', value: '2' },\n  { label: '3', value: '3' },\n  { label: '5', value: '5' },\n  { label: '10', value: '10' },\n  { label: '15', value: '15' },\n  { label: '20', value: '20' },\n];\n\nexport const orderByOptions = [\n  { label: 'Term value', value: '_term' },\n  { label: 'Doc Count', value: '_count' },\n];\n\nexport const intervalOptions = [\n  { label: 'auto', value: 'auto' },\n  { label: '10s', value: '10s' },\n  { label: '1m', value: '1m' },\n  { label: '5m', value: '5m' },\n  { label: '10m', value: '10m' },\n  { label: '20m', value: '20m' },\n  { label: '1h', value: '1h' },\n  { label: '1d', value: '1d' },\n];\n\n/**\n * This returns the valid options for each of the enabled extended stat\n */\nfunction createOrderByOptionsForExtendedStats(metric: ExtendedStats): OrderByOption[] {\n  if (!metric.meta) {\n    return [];\n  }\n  const metaKeys = Object.keys(metric.meta) as ExtendedStatMetaType[];\n  return metaKeys\n    .filter((key) => metric.meta?.[key])\n    .map((key) => {\n      let method = key as string;\n      // The bucket path for std_deviation_bounds.lower and std_deviation_bounds.upper\n      // is accessed via std_lower and std_upper, respectively.\n      if (key === 'std_deviation_bounds_lower') {\n        method = 'std_lower';\n      }\n      if (key === 'std_deviation_bounds_upper') {\n        method = 'std_upper';\n      }\n      return { label: `${describeMetric(metric)} (${method})`, value: `${metric.id}[${method}]` };\n    });\n}\n\n/**\n * This returns the valid options for each of the percents listed in the percentile settings\n */\nfunction createOrderByOptionsForPercentiles(metric: Percentiles): OrderByOption[] {\n  if (!metric.settings?.percents) {\n    return [];\n  }\n  return metric.settings.percents.map((percent) => {\n    // The bucket path for percentile numbers is appended with a `.0` if the number is whole\n    // otherwise you have to use the actual value.\n    const percentString = /^\\d+\\.\\d+/.test(`${percent}`) ? percent : `${percent}.0`;\n    return { label: `${describeMetric(metric)} (${percent})`, value: `${metric.id}[${percentString}]` };\n  });\n}\n\n/**\n * This creates all the valid order by options based on the metrics\n */\nexport const createOrderByOptionsFromMetrics = (metrics: MetricAggregation[] = []): OrderByOption[] => {\n  const metricOptions = metrics.flatMap((metric) => {\n    if (metric.type === 'extended_stats') {\n      return createOrderByOptionsForExtendedStats(metric);\n    } else if (metric.type === 'percentiles') {\n      return createOrderByOptionsForPercentiles(metric);\n    } else {\n      return { label: describeMetric(metric), value: metric.id };\n    }\n  });\n  return [...orderByOptions, ...metricOptions];\n};\n","import { Filter } from '../../aggregations';\n\nexport const defaultFilter = (): Filter => ({ label: '', query: '*' });\n","import { bucketAggregationConfig } from './utils';\n\nexport type BucketAggregationType = 'terms' | 'filters' | 'geohash_grid' | 'date_histogram' | 'histogram';\n\ninterface BaseBucketAggregation {\n  id: string;\n  type: BucketAggregationType;\n  settings?: Record<string, unknown>;\n}\n\nexport interface BucketAggregationWithField extends BaseBucketAggregation {\n  field?: string;\n}\n\nexport interface DateHistogram extends BucketAggregationWithField {\n  type: 'date_histogram';\n  settings?: {\n    interval?: string;\n    min_doc_count?: string;\n    trimEdges?: string;\n    offset?: string;\n  };\n}\n\nexport interface Histogram extends BucketAggregationWithField {\n  type: 'histogram';\n  settings?: {\n    interval?: string;\n    min_doc_count?: string;\n  };\n}\n\ntype TermsOrder = 'desc' | 'asc';\n\nexport interface Terms extends BucketAggregationWithField {\n  type: 'terms';\n  settings?: {\n    order?: TermsOrder;\n    size?: string;\n    min_doc_count?: string;\n    orderBy?: string;\n    missing?: string;\n  };\n}\n\nexport type Filter = {\n  query: string;\n  label: string;\n};\nexport interface Filters extends BaseBucketAggregation {\n  type: 'filters';\n  settings?: {\n    filters?: Filter[];\n  };\n}\n\ninterface GeoHashGrid extends BucketAggregationWithField {\n  type: 'geohash_grid';\n  settings?: {\n    precision?: string;\n  };\n}\n\nexport type BucketAggregation = DateHistogram | Histogram | Terms | Filters | GeoHashGrid;\n\nexport const isBucketAggregationWithField = (\n  bucketAgg: BucketAggregation | BucketAggregationWithField\n): bucketAgg is BucketAggregationWithField => bucketAggregationConfig[bucketAgg.type].requiresField;\n","import _ from 'lodash';\nimport {\n  DataFrame,\n  DataLink,\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DateTime,\n  dateTime,\n  Field,\n  getDefaultTimeRange,\n  LogRowModel,\n  MetricFindValue,\n  PluginMeta,\n  ScopedVars,\n  TimeRange,\n  toUtc,\n} from '@grafana/data';\nimport LanguageProvider from './language_provider';\nimport { ElasticResponse } from './elastic_response';\nimport { IndexPattern } from './index_pattern';\nimport { ElasticQueryBuilder } from './query_builder';\nimport { defaultBucketAgg, hasMetricOfType } from './query_def';\nimport { getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { DataLinkConfig, ElasticsearchOptions, ElasticsearchQuery } from './types';\nimport { RowContextOptions } from '@grafana/ui/src/components/Logs/LogRowContextProvider';\nimport { metricAggregationConfig } from './components/QueryEditor/MetricAggregationsEditor/utils';\nimport {\n  isMetricAggregationWithField,\n  isPipelineAggregationWithMultipleBucketPaths,\n} from './components/QueryEditor/MetricAggregationsEditor/aggregations';\nimport { bucketAggregationConfig } from './components/QueryEditor/BucketAggregationsEditor/utils';\nimport { isBucketAggregationWithField } from './components/QueryEditor/BucketAggregationsEditor/aggregations';\nimport { generate, Observable, of, throwError } from 'rxjs';\nimport { catchError, first, map, mergeMap, skipWhile, throwIfEmpty } from 'rxjs/operators';\n\n// Those are metadata fields as defined in https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-fields.html#_identity_metadata_fields.\n// custom fields can start with underscores, therefore is not safe to exclude anything that starts with one.\nconst ELASTIC_META_FIELDS = [\n  '_index',\n  '_type',\n  '_id',\n  '_source',\n  '_size',\n  '_field_names',\n  '_ignored',\n  '_routing',\n  '_meta',\n];\n\nexport class ElasticDatasource extends DataSourceApi<ElasticsearchQuery, ElasticsearchOptions> {\n  basicAuth?: string;\n  withCredentials?: boolean;\n  url: string;\n  name: string;\n  index: string;\n  timeField: string;\n  esVersion: number;\n  interval: string;\n  maxConcurrentShardRequests?: number;\n  queryBuilder: ElasticQueryBuilder;\n  indexPattern: IndexPattern;\n  logMessageField?: string;\n  logLevelField?: string;\n  dataLinks: DataLinkConfig[];\n  languageProvider: LanguageProvider;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<ElasticsearchOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.url = instanceSettings.url!;\n    this.name = instanceSettings.name;\n    this.index = instanceSettings.database ?? '';\n    const settingsData = instanceSettings.jsonData || ({} as ElasticsearchOptions);\n\n    this.timeField = settingsData.timeField;\n    this.esVersion = settingsData.esVersion;\n    this.indexPattern = new IndexPattern(this.index, settingsData.interval);\n    this.interval = settingsData.timeInterval;\n    this.maxConcurrentShardRequests = settingsData.maxConcurrentShardRequests;\n    this.queryBuilder = new ElasticQueryBuilder({\n      timeField: this.timeField,\n      esVersion: this.esVersion,\n    });\n    this.logMessageField = settingsData.logMessageField || '';\n    this.logLevelField = settingsData.logLevelField || '';\n    this.dataLinks = settingsData.dataLinks || [];\n\n    if (this.logMessageField === '') {\n      this.logMessageField = undefined;\n    }\n\n    if (this.logLevelField === '') {\n      this.logLevelField = undefined;\n    }\n    this.languageProvider = new LanguageProvider(this);\n  }\n\n  private request(method: string, url: string, data?: undefined): Observable<any> {\n    const options: any = {\n      url: this.url + '/' + url,\n      method: method,\n      data: data,\n    };\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = {\n        Authorization: this.basicAuth,\n      };\n    }\n\n    return getBackendSrv()\n      .fetch<any>(options)\n      .pipe(\n        map((results) => {\n          results.data.$$config = results.config;\n          return results.data;\n        }),\n        catchError((err) => {\n          if (err.data && err.data.error) {\n            return throwError({\n              message: 'Elasticsearch error: ' + err.data.error.reason,\n              error: err.data.error,\n            });\n          }\n\n          return throwError(err);\n        })\n      );\n  }\n\n  async importQueries(queries: DataQuery[], originMeta: PluginMeta): Promise<ElasticsearchQuery[]> {\n    return this.languageProvider.importQueries(queries, originMeta.id);\n  }\n\n  /**\n   * Sends a GET request to the specified url on the newest matching and available index.\n   *\n   * When multiple indices span the provided time range, the request is sent starting from the newest index,\n   * and then going backwards until an index is found.\n   *\n   * @param url the url to query the index on, for example `/_mapping`.\n   */\n  private get(url: string, range = getDefaultTimeRange()): Observable<any> {\n    let indexList = this.indexPattern.getIndexList(range.from, range.to);\n    if (!Array.isArray(indexList)) {\n      indexList = [this.indexPattern.getIndexForToday()];\n    }\n\n    const indexUrlList = indexList.map((index) => index + url);\n\n    return this.requestAllIndices(indexUrlList);\n  }\n\n  private requestAllIndices(indexList: string[]): Observable<any> {\n    const maxTraversals = 7; // do not go beyond one week (for a daily pattern)\n    const listLen = indexList.length;\n\n    return generate(\n      0,\n      (i) => i < Math.min(listLen, maxTraversals),\n      (i) => i + 1\n    ).pipe(\n      mergeMap((index) => {\n        // catch all errors and emit an object with an err property to simplify checks later in the pipeline\n        return this.request('GET', indexList[listLen - index - 1]).pipe(catchError((err) => of({ err })));\n      }),\n      skipWhile((resp) => resp.err && resp.err.status === 404), // skip all requests that fail because missing Elastic index\n      throwIfEmpty(() => 'Could not find an available index for this time range.'), // when i === Math.min(listLen, maxTraversals) generate will complete but without emitting any values which means we didn't find a valid index\n      first(), // take the first value that isn't skipped\n      map((resp) => {\n        if (resp.err) {\n          throw resp.err; // if there is some other error except 404 then we must throw it\n        }\n\n        return resp;\n      })\n    );\n  }\n\n  private post(url: string, data: any): Observable<any> {\n    return this.request('POST', url, data);\n  }\n\n  annotationQuery(options: any): Promise<any> {\n    const annotation = options.annotation;\n    const timeField = annotation.timeField || '@timestamp';\n    const timeEndField = annotation.timeEndField || null;\n    const queryString = annotation.query || '*';\n    const tagsField = annotation.tagsField || 'tags';\n    const textField = annotation.textField || null;\n\n    const dateRanges = [];\n    const rangeStart: any = {};\n    rangeStart[timeField] = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      format: 'epoch_millis',\n    };\n    dateRanges.push({ range: rangeStart });\n\n    if (timeEndField) {\n      const rangeEnd: any = {};\n      rangeEnd[timeEndField] = {\n        from: options.range.from.valueOf(),\n        to: options.range.to.valueOf(),\n        format: 'epoch_millis',\n      };\n      dateRanges.push({ range: rangeEnd });\n    }\n\n    const queryInterpolated = this.templateSrv.replace(queryString, {}, 'lucene');\n    const query = {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: dateRanges,\n              minimum_should_match: 1,\n            },\n          },\n          {\n            query_string: {\n              query: queryInterpolated,\n            },\n          },\n        ],\n      },\n    };\n\n    const data: any = {\n      query,\n      size: 10000,\n    };\n\n    // fields field not supported on ES 5.x\n    if (this.esVersion < 5) {\n      data['fields'] = [timeField, '_source'];\n    }\n\n    const header: any = {\n      search_type: 'query_then_fetch',\n      ignore_unavailable: true,\n    };\n\n    // old elastic annotations had index specified on them\n    if (annotation.index) {\n      header.index = annotation.index;\n    } else {\n      header.index = this.indexPattern.getIndexList(options.range.from, options.range.to);\n    }\n\n    const payload = JSON.stringify(header) + '\\n' + JSON.stringify(data) + '\\n';\n\n    return this.post('_msearch', payload)\n      .pipe(\n        map((res) => {\n          const list = [];\n          const hits = res.responses[0].hits.hits;\n\n          const getFieldFromSource = (source: any, fieldName: any) => {\n            if (!fieldName) {\n              return;\n            }\n\n            const fieldNames = fieldName.split('.');\n            let fieldValue = source;\n\n            for (let i = 0; i < fieldNames.length; i++) {\n              fieldValue = fieldValue[fieldNames[i]];\n              if (!fieldValue) {\n                console.log('could not find field in annotation: ', fieldName);\n                return '';\n              }\n            }\n\n            return fieldValue;\n          };\n\n          for (let i = 0; i < hits.length; i++) {\n            const source = hits[i]._source;\n            let time = getFieldFromSource(source, timeField);\n            if (typeof hits[i].fields !== 'undefined') {\n              const fields = hits[i].fields;\n              if (_.isString(fields[timeField]) || _.isNumber(fields[timeField])) {\n                time = fields[timeField];\n              }\n            }\n\n            const event: {\n              annotation: any;\n              time: number;\n              timeEnd?: number;\n              text: string;\n              tags: string | string[];\n            } = {\n              annotation: annotation,\n              time: toUtc(time).valueOf(),\n              text: getFieldFromSource(source, textField),\n              tags: getFieldFromSource(source, tagsField),\n            };\n\n            if (timeEndField) {\n              const timeEnd = getFieldFromSource(source, timeEndField);\n              if (timeEnd) {\n                event.timeEnd = toUtc(timeEnd).valueOf();\n              }\n            }\n\n            // legacy support for title tield\n            if (annotation.titleField) {\n              const title = getFieldFromSource(source, annotation.titleField);\n              if (title) {\n                event.text = title + '\\n' + event.text;\n              }\n            }\n\n            if (typeof event.tags === 'string') {\n              event.tags = event.tags.split(',');\n            }\n\n            list.push(event);\n          }\n          return list;\n        })\n      )\n      .toPromise();\n  }\n\n  private interpolateLuceneQuery(queryString: string, scopedVars: ScopedVars) {\n    // Elasticsearch queryString should always be '*' if empty string\n    return this.templateSrv.replace(queryString, scopedVars, 'lucene') || '*';\n  }\n\n  interpolateVariablesInQueries(queries: ElasticsearchQuery[], scopedVars: ScopedVars): ElasticsearchQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          query: this.interpolateLuceneQuery(query.query || '', scopedVars),\n        };\n\n        for (let bucketAgg of query.bucketAggs || []) {\n          if (bucketAgg.type === 'filters') {\n            for (let filter of bucketAgg.settings?.filters || []) {\n              filter.query = this.interpolateLuceneQuery(filter.query, scopedVars);\n            }\n          }\n        }\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  testDatasource() {\n    // validate that the index exist and has date field\n    return this.getFields('date')\n      .pipe(\n        mergeMap((dateFields) => {\n          const timeField: any = _.find(dateFields, { text: this.timeField });\n          if (!timeField) {\n            return of({ status: 'error', message: 'No date field named ' + this.timeField + ' found' });\n          }\n          return of({ status: 'success', message: 'Index OK. Time field name OK.' });\n        }),\n        catchError((err) => {\n          console.error(err);\n          if (err.message) {\n            return of({ status: 'error', message: err.message });\n          } else {\n            return of({ status: 'error', message: err.status });\n          }\n        })\n      )\n      .toPromise();\n  }\n\n  getQueryHeader(searchType: any, timeFrom?: DateTime, timeTo?: DateTime): string {\n    const queryHeader: any = {\n      search_type: searchType,\n      ignore_unavailable: true,\n      index: this.indexPattern.getIndexList(timeFrom, timeTo),\n    };\n\n    if (this.esVersion >= 56 && this.esVersion < 70) {\n      queryHeader['max_concurrent_shard_requests'] = this.maxConcurrentShardRequests;\n    }\n\n    return JSON.stringify(queryHeader);\n  }\n\n  getQueryDisplayText(query: ElasticsearchQuery) {\n    // TODO: This might be refactored a bit.\n    const metricAggs = query.metrics;\n    const bucketAggs = query.bucketAggs;\n    let text = '';\n\n    if (query.query) {\n      text += 'Query: ' + query.query + ', ';\n    }\n\n    text += 'Metrics: ';\n\n    text += metricAggs?.reduce((acc, metric) => {\n      const metricConfig = metricAggregationConfig[metric.type];\n\n      let text = metricConfig.label + '(';\n\n      if (isMetricAggregationWithField(metric)) {\n        text += metric.field;\n      }\n      if (isPipelineAggregationWithMultipleBucketPaths(metric)) {\n        text += metric.settings?.script?.replace(new RegExp('params.', 'g'), '');\n      }\n      text += '), ';\n\n      return `${acc} ${text}`;\n    }, '');\n\n    text += bucketAggs?.reduce((acc, bucketAgg, index) => {\n      const bucketConfig = bucketAggregationConfig[bucketAgg.type];\n\n      let text = '';\n      if (index === 0) {\n        text += ' Group by: ';\n      }\n\n      text += bucketConfig.label + '(';\n      if (isBucketAggregationWithField(bucketAgg)) {\n        text += bucketAgg.field;\n      }\n\n      return `${acc} ${text}), `;\n    }, '');\n\n    if (query.alias) {\n      text += 'Alias: ' + query.alias;\n    }\n\n    return text;\n  }\n\n  /**\n   * This method checks to ensure the user is running a 5.0+ cluster. This is\n   * necessary bacause the query being used for the getLogRowContext relies on the\n   * search_after feature.\n   */\n  showContextToggle(): boolean {\n    return this.esVersion > 5;\n  }\n\n  getLogRowContext = async (row: LogRowModel, options?: RowContextOptions): Promise<{ data: DataFrame[] }> => {\n    const sortField = row.dataFrame.fields.find((f) => f.name === 'sort');\n    const searchAfter = sortField?.values.get(row.rowIndex) || [row.timeEpochMs];\n    const sort = options?.direction === 'FORWARD' ? 'asc' : 'desc';\n\n    const header =\n      options?.direction === 'FORWARD'\n        ? this.getQueryHeader('query_then_fetch', dateTime(row.timeEpochMs))\n        : this.getQueryHeader('query_then_fetch', undefined, dateTime(row.timeEpochMs));\n\n    const limit = options?.limit ?? 10;\n    const esQuery = JSON.stringify({\n      size: limit,\n      query: {\n        bool: {\n          filter: [\n            {\n              range: {\n                [this.timeField]: {\n                  [options?.direction === 'FORWARD' ? 'gte' : 'lte']: row.timeEpochMs,\n                  format: 'epoch_millis',\n                },\n              },\n            },\n          ],\n        },\n      },\n      sort: [{ [this.timeField]: sort }, { _doc: sort }],\n      search_after: searchAfter,\n    });\n    const payload = [header, esQuery].join('\\n') + '\\n';\n    const url = this.getMultiSearchUrl();\n    const response = await this.post(url, payload).toPromise();\n    const targets: ElasticsearchQuery[] = [{ refId: `${row.dataFrame.refId}`, metrics: [], isLogsQuery: true }];\n    const elasticResponse = new ElasticResponse(targets, transformHitsBasedOnDirection(response, sort));\n    const logResponse = elasticResponse.getLogs(this.logMessageField, this.logLevelField);\n    const dataFrame = _.first(logResponse.data);\n    if (!dataFrame) {\n      return { data: [] };\n    }\n    /**\n     * The LogRowContextProvider requires there is a field in the dataFrame.fields\n     * named `ts` for timestamp and `line` for the actual log line to display.\n     * Unfortunatly these fields are hardcoded and are required for the lines to\n     * be properly displayed. This code just copies the fields based on this.timeField\n     * and this.logMessageField and recreates the dataFrame so it works.\n     */\n    const timestampField = dataFrame.fields.find((f: Field) => f.name === this.timeField);\n    const lineField = dataFrame.fields.find((f: Field) => f.name === this.logMessageField);\n    if (timestampField && lineField) {\n      return {\n        data: [\n          {\n            ...dataFrame,\n            fields: [...dataFrame.fields, { ...timestampField, name: 'ts' }, { ...lineField, name: 'line' }],\n          },\n        ],\n      };\n    }\n    return logResponse;\n  };\n\n  query(options: DataQueryRequest<ElasticsearchQuery>): Observable<DataQueryResponse> {\n    let payload = '';\n    const targets = this.interpolateVariablesInQueries(_.cloneDeep(options.targets), options.scopedVars);\n    const sentTargets: ElasticsearchQuery[] = [];\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n\n    for (const target of targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      let queryObj;\n      if (target.isLogsQuery || hasMetricOfType(target, 'logs')) {\n        target.bucketAggs = [defaultBucketAgg()];\n        target.metrics = [];\n        // Setting this for metrics queries that are typed as logs\n        target.isLogsQuery = true;\n        queryObj = this.queryBuilder.getLogsQuery(target, adhocFilters, target.query);\n      } else {\n        if (target.alias) {\n          target.alias = this.templateSrv.replace(target.alias, options.scopedVars, 'lucene');\n        }\n\n        queryObj = this.queryBuilder.build(target, adhocFilters, target.query);\n      }\n\n      const esQuery = JSON.stringify(queryObj);\n\n      const searchType = queryObj.size === 0 && this.esVersion < 5 ? 'count' : 'query_then_fetch';\n      const header = this.getQueryHeader(searchType, options.range.from, options.range.to);\n      payload += header + '\\n';\n\n      payload += esQuery + '\\n';\n\n      sentTargets.push(target);\n    }\n\n    if (sentTargets.length === 0) {\n      return of({ data: [] });\n    }\n\n    // We replace the range here for actual values. We need to replace it together with enclosing \"\" so that we replace\n    // it as an integer not as string with digits. This is because elastic will convert the string only if the time\n    // field is specified as type date (which probably should) but can also be specified as integer (millisecond epoch)\n    // and then sending string will error out.\n    payload = payload.replace(/\"\\$timeFrom\"/g, options.range.from.valueOf().toString());\n    payload = payload.replace(/\"\\$timeTo\"/g, options.range.to.valueOf().toString());\n    payload = this.templateSrv.replace(payload, options.scopedVars);\n\n    const url = this.getMultiSearchUrl();\n\n    return this.post(url, payload).pipe(\n      map((res) => {\n        const er = new ElasticResponse(sentTargets, res);\n\n        if (sentTargets.some((target) => target.isLogsQuery)) {\n          const response = er.getLogs(this.logMessageField, this.logLevelField);\n          for (const dataFrame of response.data) {\n            enhanceDataFrame(dataFrame, this.dataLinks);\n          }\n          return response;\n        }\n\n        return er.getTimeSeries();\n      })\n    );\n  }\n\n  isMetadataField(fieldName: string) {\n    return ELASTIC_META_FIELDS.includes(fieldName);\n  }\n\n  // TODO: instead of being a string, this could be a custom type representing all the elastic types\n  getFields(type?: string, range?: TimeRange): Observable<MetricFindValue[]> {\n    const configuredEsVersion = this.esVersion;\n    return this.get('/_mapping', range).pipe(\n      map((result) => {\n        const typeMap: any = {\n          float: 'number',\n          double: 'number',\n          integer: 'number',\n          long: 'number',\n          date: 'date',\n          date_nanos: 'date',\n          string: 'string',\n          text: 'string',\n          scaled_float: 'number',\n          nested: 'nested',\n        };\n\n        const shouldAddField = (obj: any, key: string) => {\n          if (this.isMetadataField(key)) {\n            return false;\n          }\n\n          if (!type) {\n            return true;\n          }\n\n          // equal query type filter, or via typemap translation\n          return type === obj.type || type === typeMap[obj.type];\n        };\n\n        // Store subfield names: [system, process, cpu, total] -> system.process.cpu.total\n        const fieldNameParts: any = [];\n        const fields: any = {};\n\n        function getFieldsRecursively(obj: any) {\n          for (const key in obj) {\n            const subObj = obj[key];\n\n            // Check mapping field for nested fields\n            if (_.isObject(subObj.properties)) {\n              fieldNameParts.push(key);\n              getFieldsRecursively(subObj.properties);\n            }\n\n            if (_.isObject(subObj.fields)) {\n              fieldNameParts.push(key);\n              getFieldsRecursively(subObj.fields);\n            }\n\n            if (_.isString(subObj.type)) {\n              const fieldName = fieldNameParts.concat(key).join('.');\n\n              // Hide meta-fields and check field type\n              if (shouldAddField(subObj, key)) {\n                fields[fieldName] = {\n                  text: fieldName,\n                  type: subObj.type,\n                };\n              }\n            }\n          }\n          fieldNameParts.pop();\n        }\n\n        for (const indexName in result) {\n          const index = result[indexName];\n          if (index && index.mappings) {\n            const mappings = index.mappings;\n\n            if (configuredEsVersion < 70) {\n              for (const typeName in mappings) {\n                const properties = mappings[typeName].properties;\n                getFieldsRecursively(properties);\n              }\n            } else {\n              const properties = mappings.properties;\n              getFieldsRecursively(properties);\n            }\n          }\n        }\n\n        // transform to array\n        return _.map(fields, (value) => {\n          return value;\n        });\n      })\n    );\n  }\n\n  getTerms(queryDef: any, range = getDefaultTimeRange()): Observable<MetricFindValue[]> {\n    const searchType = this.esVersion >= 5 ? 'query_then_fetch' : 'count';\n    const header = this.getQueryHeader(searchType, range.from, range.to);\n    let esQuery = JSON.stringify(this.queryBuilder.getTermsQuery(queryDef));\n\n    esQuery = esQuery.replace(/\\$timeFrom/g, range.from.valueOf().toString());\n    esQuery = esQuery.replace(/\\$timeTo/g, range.to.valueOf().toString());\n    esQuery = header + '\\n' + esQuery + '\\n';\n\n    const url = this.getMultiSearchUrl();\n\n    return this.post(url, esQuery).pipe(\n      map((res) => {\n        if (!res.responses[0].aggregations) {\n          return [];\n        }\n\n        const buckets = res.responses[0].aggregations['1'].buckets;\n        return _.map(buckets, (bucket) => {\n          return {\n            text: bucket.key_as_string || bucket.key,\n            value: bucket.key,\n          };\n        });\n      })\n    );\n  }\n\n  getMultiSearchUrl() {\n    if (this.esVersion >= 70 && this.maxConcurrentShardRequests) {\n      return `_msearch?max_concurrent_shard_requests=${this.maxConcurrentShardRequests}`;\n    }\n\n    return '_msearch';\n  }\n\n  metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\n    const range = options?.range;\n    const parsedQuery = JSON.parse(query);\n    if (query) {\n      if (parsedQuery.find === 'fields') {\n        parsedQuery.type = this.templateSrv.replace(parsedQuery.type, {}, 'lucene');\n        return this.getFields(parsedQuery.type, range).toPromise();\n      }\n\n      if (parsedQuery.find === 'terms') {\n        parsedQuery.field = this.templateSrv.replace(parsedQuery.field, {}, 'lucene');\n        parsedQuery.query = this.templateSrv.replace(parsedQuery.query || '*', {}, 'lucene');\n        return this.getTerms(parsedQuery, range).toPromise();\n      }\n    }\n\n    return Promise.resolve([]);\n  }\n\n  getTagKeys() {\n    return this.getFields().toPromise();\n  }\n\n  getTagValues(options: any) {\n    return this.getTerms({ field: options.key, query: '*' }).toPromise();\n  }\n\n  targetContainsTemplate(target: any) {\n    if (this.templateSrv.variableExists(target.query) || this.templateSrv.variableExists(target.alias)) {\n      return true;\n    }\n\n    for (const bucketAgg of target.bucketAggs) {\n      if (this.templateSrv.variableExists(bucketAgg.field) || this.objectContainsTemplate(bucketAgg.settings)) {\n        return true;\n      }\n    }\n\n    for (const metric of target.metrics) {\n      if (\n        this.templateSrv.variableExists(metric.field) ||\n        this.objectContainsTemplate(metric.settings) ||\n        this.objectContainsTemplate(metric.meta)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private isPrimitive(obj: any) {\n    if (obj === null || obj === undefined) {\n      return true;\n    }\n    if (['string', 'number', 'boolean'].some((type) => type === typeof true)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private objectContainsTemplate(obj: any) {\n    if (!obj) {\n      return false;\n    }\n\n    for (const key of Object.keys(obj)) {\n      if (this.isPrimitive(obj[key])) {\n        if (this.templateSrv.variableExists(obj[key])) {\n          return true;\n        }\n      } else if (Array.isArray(obj[key])) {\n        for (const item of obj[key]) {\n          if (this.objectContainsTemplate(item)) {\n            return true;\n          }\n        }\n      } else {\n        if (this.objectContainsTemplate(obj[key])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\n/**\n * Modifies dataframe and adds dataLinks from the config.\n * Exported for tests.\n */\nexport function enhanceDataFrame(dataFrame: DataFrame, dataLinks: DataLinkConfig[]) {\n  const dataSourceSrv = getDataSourceSrv();\n\n  if (!dataLinks.length) {\n    return;\n  }\n\n  for (const field of dataFrame.fields) {\n    const dataLinkConfig = dataLinks.find((dataLink) => field.name && field.name.match(dataLink.field));\n\n    if (!dataLinkConfig) {\n      continue;\n    }\n\n    let link: DataLink;\n\n    if (dataLinkConfig.datasourceUid) {\n      const dsSettings = dataSourceSrv.getInstanceSettings(dataLinkConfig.datasourceUid);\n\n      link = {\n        title: '',\n        url: '',\n        internal: {\n          query: { query: dataLinkConfig.url },\n          datasourceUid: dataLinkConfig.datasourceUid,\n          datasourceName: dsSettings?.name ?? 'Data source not found',\n        },\n      };\n    } else {\n      link = {\n        title: '',\n        url: dataLinkConfig.url,\n      };\n    }\n\n    field.config = field.config || {};\n    field.config.links = [...(field.config.links || []), link];\n  }\n}\n\nfunction transformHitsBasedOnDirection(response: any, direction: 'asc' | 'desc') {\n  if (direction === 'desc') {\n    return response;\n  }\n  const actualResponse = response.responses[0];\n  return {\n    ...response,\n    responses: [\n      {\n        ...actualResponse,\n        hits: {\n          ...actualResponse.hits,\n          hits: actualResponse.hits.hits.reverse(),\n        },\n      },\n    ],\n  };\n}\n","import React from 'react';\nimport { EventsWithValidation, regexValidation, LegacyForms } from '@grafana/ui';\nconst { Select, Input, FormField } = LegacyForms;\nimport { ElasticsearchOptions, Interval } from '../types';\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\n\nconst indexPatternTypes = [\n  { label: 'No pattern', value: 'none' },\n  { label: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\n  { label: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\n  { label: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\n  { label: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\n  { label: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\n];\n\nconst esVersions = [\n  { label: '2.x', value: 2 },\n  { label: '5.x', value: 5 },\n  { label: '5.6+', value: 56 },\n  { label: '6.0+', value: 60 },\n  { label: '7.0+', value: 70 },\n];\n\ntype Props = {\n  value: DataSourceSettings<ElasticsearchOptions>;\n  onChange: (value: DataSourceSettings<ElasticsearchOptions>) => void;\n};\nexport const ElasticDetails = (props: Props) => {\n  const { value, onChange } = props;\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Elasticsearch details</h3>\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <FormField\n              labelWidth={10}\n              inputWidth={15}\n              label=\"Index name\"\n              value={value.database || ''}\n              onChange={changeHandler('database', value, onChange)}\n              placeholder={'es-index-name'}\n              required\n            />\n          </div>\n\n          <div className=\"gf-form\">\n            <FormField\n              labelWidth={10}\n              label=\"Pattern\"\n              inputEl={\n                <Select\n                  options={indexPatternTypes}\n                  onChange={intervalHandler(value, onChange)}\n                  value={indexPatternTypes.find(\n                    (pattern) =>\n                      pattern.value === (value.jsonData.interval === undefined ? 'none' : value.jsonData.interval)\n                  )}\n                />\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"gf-form max-width-25\">\n          <FormField\n            labelWidth={10}\n            inputWidth={15}\n            label=\"Time field name\"\n            value={value.jsonData.timeField || ''}\n            onChange={jsonDataChangeHandler('timeField', value, onChange)}\n            required\n          />\n        </div>\n\n        <div className=\"gf-form\">\n          <FormField\n            labelWidth={10}\n            label=\"Version\"\n            inputEl={\n              <Select\n                options={esVersions}\n                onChange={(option) => {\n                  const maxConcurrentShardRequests = getMaxConcurrenShardRequestOrDefault(\n                    value.jsonData.maxConcurrentShardRequests,\n                    option.value!\n                  );\n                  onChange({\n                    ...value,\n                    jsonData: {\n                      ...value.jsonData,\n                      esVersion: option.value!,\n                      maxConcurrentShardRequests,\n                    },\n                  });\n                }}\n                value={esVersions.find((version) => version.value === value.jsonData.esVersion)}\n              />\n            }\n          />\n        </div>\n        {value.jsonData.esVersion >= 56 && (\n          <div className=\"gf-form max-width-30\">\n            <FormField\n              aria-label={'Max concurrent Shard Requests input'}\n              labelWidth={15}\n              label=\"Max concurrent Shard Requests\"\n              value={value.jsonData.maxConcurrentShardRequests || ''}\n              onChange={jsonDataChangeHandler('maxConcurrentShardRequests', value, onChange)}\n            />\n          </div>\n        )}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <FormField\n              labelWidth={10}\n              label=\"Min time interval\"\n              inputEl={\n                <Input\n                  className={'width-6'}\n                  value={value.jsonData.timeInterval || ''}\n                  onChange={jsonDataChangeHandler('timeInterval', value, onChange)}\n                  placeholder=\"10s\"\n                  validationEvents={{\n                    [EventsWithValidation.onBlur]: [\n                      regexValidation(\n                        /^\\d+(ms|[Mwdhmsy])$/,\n                        'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s'\n                      ),\n                    ],\n                  }}\n                />\n              }\n              tooltip={\n                <>\n                  A lower limit for the auto group by time interval. Recommended to be set to write frequency, for\n                  example <code>1m</code> if your data is written every minute.\n                </>\n              }\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst changeHandler = (\n  key: keyof DataSourceSettings<ElasticsearchOptions>,\n  value: Props['value'],\n  onChange: Props['onChange']\n) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => {\n  onChange({\n    ...value,\n    [key]: event.currentTarget.value,\n  });\n};\n\nconst jsonDataChangeHandler = (key: keyof ElasticsearchOptions, value: Props['value'], onChange: Props['onChange']) => (\n  event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n) => {\n  onChange({\n    ...value,\n    jsonData: {\n      ...value.jsonData,\n      [key]: event.currentTarget.value,\n    },\n  });\n};\n\nconst intervalHandler = (value: Props['value'], onChange: Props['onChange']) => (\n  option: SelectableValue<Interval | 'none'>\n) => {\n  const { database } = value;\n  // If option value is undefined it will send its label instead so we have to convert made up value to undefined here.\n  const newInterval = option.value === 'none' ? undefined : option.value;\n\n  if (!database || database.length === 0 || database.startsWith('[logstash-]')) {\n    let newDatabase = '';\n\n    if (newInterval !== undefined) {\n      const pattern = indexPatternTypes.find((pattern) => pattern.value === newInterval);\n\n      if (pattern) {\n        newDatabase = pattern.example ?? '';\n      }\n    }\n\n    onChange({\n      ...value,\n      database: newDatabase,\n      jsonData: {\n        ...value.jsonData,\n        interval: newInterval,\n      },\n    });\n  } else {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        interval: newInterval,\n      },\n    });\n  }\n};\n\nfunction getMaxConcurrenShardRequestOrDefault(maxConcurrentShardRequests: number | undefined, version: number): number {\n  if (maxConcurrentShardRequests === 5 && version < 70) {\n    return 256;\n  }\n\n  if (maxConcurrentShardRequests === 256 && version >= 70) {\n    return 5;\n  }\n\n  return maxConcurrentShardRequests || defaultMaxConcurrentShardRequests(version);\n}\n\nexport function defaultMaxConcurrentShardRequests(version: number) {\n  return version >= 70 ? 5 : 256;\n}\n","import React from 'react';\nimport { LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\nimport { ElasticsearchOptions } from '../types';\n\ntype Props = {\n  value: ElasticsearchOptions;\n  onChange: (value: ElasticsearchOptions) => void;\n};\nexport const LogsConfig = (props: Props) => {\n  const { value, onChange } = props;\n  const changeHandler = (key: keyof ElasticsearchOptions) => (\n    event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    onChange({\n      ...value,\n      [key]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Logs</h3>\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form max-width-30\">\n          <FormField\n            labelWidth={11}\n            label=\"Message field name\"\n            value={value.logMessageField}\n            onChange={changeHandler('logMessageField')}\n            placeholder=\"_source\"\n          />\n        </div>\n        <div className=\"gf-form max-width-30\">\n          <FormField\n            labelWidth={11}\n            label=\"Level field name\"\n            value={value.logLevelField}\n            onChange={changeHandler('logLevelField')}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { Dispatch, SetStateAction, useEffect, useState } from 'react';\nimport { css } from 'emotion';\nimport { VariableSuggestion } from '@grafana/data';\nimport { Button, LegacyForms, DataLinkInput, stylesFactory } from '@grafana/ui';\nconst { FormField, Switch } = LegacyForms;\nimport { DataLinkConfig } from '../types';\nimport { usePrevious } from 'react-use';\nimport { DataSourcePicker } from '../../../../core/components/Select/DataSourcePicker';\n\nconst getStyles = stylesFactory(() => ({\n  firstRow: css`\n    display: flex;\n  `,\n  nameField: css`\n    flex: 2;\n  `,\n  regexField: css`\n    flex: 3;\n  `,\n  row: css`\n    display: flex;\n    align-items: baseline;\n  `,\n}));\n\ntype Props = {\n  value: DataLinkConfig;\n  onChange: (value: DataLinkConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n};\nexport const DataLink = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className } = props;\n  const styles = getStyles();\n  const [showInternalLink, setShowInternalLink] = useInternalLink(value.datasourceUid);\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.firstRow + ' gf-form'}>\n        <FormField\n          className={styles.nameField}\n          labelWidth={6}\n          // A bit of a hack to prevent using default value for the width from FormField\n          inputWidth={null}\n          label=\"Field\"\n          type=\"text\"\n          value={value.field}\n          tooltip={'Can be exact field name or a regex pattern that will match on the field name.'}\n          onChange={handleChange('field')}\n        />\n        <Button\n          variant={'destructive'}\n          title=\"Remove field\"\n          icon=\"times\"\n          onClick={(event) => {\n            event.preventDefault();\n            onDelete();\n          }}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <FormField\n          label={showInternalLink ? 'Query' : 'URL'}\n          labelWidth={6}\n          inputEl={\n            <DataLinkInput\n              placeholder={showInternalLink ? '${__value.raw}' : 'http://example.com/${__value.raw}'}\n              value={value.url || ''}\n              onChange={(newValue) =>\n                onChange({\n                  ...value,\n                  url: newValue,\n                })\n              }\n              suggestions={suggestions}\n            />\n          }\n          className={css`\n            width: 100%;\n          `}\n        />\n      </div>\n\n      <div className={styles.row}>\n        <Switch\n          labelClass={'width-6'}\n          label=\"Internal link\"\n          checked={showInternalLink}\n          onChange={() => {\n            if (showInternalLink) {\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n              });\n            }\n            setShowInternalLink(!showInternalLink);\n          }}\n        />\n\n        {showInternalLink && (\n          <DataSourcePicker\n            tracing={true}\n            // Uid and value should be always set in the db and so in the items.\n            onChange={(ds) => {\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n              });\n            }}\n            current={value.datasourceUid}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction useInternalLink(datasourceUid?: string): [boolean, Dispatch<SetStateAction<boolean>>] {\n  const [showInternalLink, setShowInternalLink] = useState<boolean>(!!datasourceUid);\n  const previousUid = usePrevious(datasourceUid);\n\n  // Force internal link visibility change if uid changed outside of this component.\n  useEffect(() => {\n    if (!previousUid && datasourceUid && !showInternalLink) {\n      setShowInternalLink(true);\n    }\n    if (previousUid && !datasourceUid && showInternalLink) {\n      setShowInternalLink(false);\n    }\n  }, [previousUid, datasourceUid, showInternalLink]);\n\n  return [showInternalLink, setShowInternalLink];\n}\n","import React from 'react';\nimport { css } from 'emotion';\nimport { Button, stylesFactory, useTheme } from '@grafana/ui';\nimport { GrafanaTheme, VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { DataLinkConfig } from '../types';\nimport { DataLink } from './DataLink';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textWeak};\n  `,\n  dataLink: css`\n    margin-bottom: ${theme.spacing.sm};\n  `,\n}));\n\ntype Props = {\n  value?: DataLinkConfig[];\n  onChange: (value: DataLinkConfig[]) => void;\n};\nexport const DataLinks = (props: Props) => {\n  const { value, onChange } = props;\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Data links</h3>\n\n      <div className={styles.infoText}>\n        Add links to existing fields. Links will be shown in log row details next to the field value.\n      </div>\n\n      {value && value.length > 0 && (\n        <div className=\"gf-form-group\">\n          {value.map((field, index) => {\n            return (\n              <DataLink\n                className={styles.dataLink}\n                key={index}\n                value={field}\n                onChange={(newField) => {\n                  const newDataLinks = [...value];\n                  newDataLinks.splice(index, 1, newField);\n                  onChange(newDataLinks);\n                }}\n                onDelete={() => {\n                  const newDataLinks = [...value];\n                  newDataLinks.splice(index, 1);\n                  onChange(newDataLinks);\n                }}\n                suggestions={[\n                  {\n                    value: DataLinkBuiltInVars.valueRaw,\n                    label: 'Raw value',\n                    documentation: 'Raw value of the field',\n                    origin: VariableOrigin.Value,\n                  },\n                ]}\n              />\n            );\n          })}\n        </div>\n      )}\n\n      <Button\n        variant={'secondary'}\n        className={css`\n          margin-right: 10px;\n        `}\n        icon=\"plus\"\n        onClick={(event) => {\n          event.preventDefault();\n          const newDataLinks = [...(value || []), { field: '', url: '' }];\n          onChange(newDataLinks);\n        }}\n      >\n        Add\n      </Button>\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Alert, DataSourceHttpSettings } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ElasticsearchOptions } from '../types';\nimport { defaultMaxConcurrentShardRequests, ElasticDetails } from './ElasticDetails';\nimport { LogsConfig } from './LogsConfig';\nimport { DataLinks } from './DataLinks';\nimport { config } from 'app/core/config';\n\nexport type Props = DataSourcePluginOptionsEditorProps<ElasticsearchOptions>;\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  // Apply some defaults on initial render\n  useEffect(() => {\n    const esVersion = options.jsonData.esVersion || 5;\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        timeField: options.jsonData.timeField || '@timestamp',\n        esVersion,\n        maxConcurrentShardRequests:\n          options.jsonData.maxConcurrentShardRequests || defaultMaxConcurrentShardRequests(esVersion),\n        logMessageField: options.jsonData.logMessageField || '',\n        logLevelField: options.jsonData.logLevelField || '',\n      },\n    });\n  }, []);\n\n  return (\n    <>\n      {options.access === 'direct' && (\n        <Alert title=\"Deprecation Notice\" severity=\"warning\">\n          Browser access mode in the Elasticsearch datasource is deprecated and will be removed in a future release.\n        </Alert>\n      )}\n\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:9200'}\n        dataSourceConfig={options}\n        showAccessOptions={true}\n        onChange={onOptionsChange}\n        sigV4AuthToggleEnabled={config.sigV4AuthEnabled}\n      />\n\n      <ElasticDetails value={options} onChange={onOptionsChange} />\n\n      <LogsConfig\n        value={options.jsonData}\n        onChange={(newValue) =>\n          onOptionsChange({\n            ...options,\n            jsonData: newValue,\n          })\n        }\n      />\n\n      <DataLinks\n        value={options.jsonData.dataLinks}\n        onChange={(newValue) => {\n          onOptionsChange({\n            ...options,\n            jsonData: {\n              ...options.jsonData,\n              dataLinks: newValue,\n            },\n          });\n        }}\n      />\n    </>\n  );\n};\n","import { createContext, useCallback, useContext } from 'react';\n\nexport interface Action<T extends string = string> {\n  type: T;\n}\n\nexport type Reducer<S, A extends Action = Action> = (state: S, action: A) => S;\n\nexport const combineReducers = <S, A extends Action = Action>(reducers: { [P in keyof S]: Reducer<S[P], A> }) => (\n  state: S,\n  action: A\n): Partial<S> => {\n  const newState = {} as S;\n  for (const key in reducers) {\n    newState[key] = reducers[key](state[key], action);\n  }\n  return newState;\n};\n\nexport const useStatelessReducer = <State, A = Action>(\n  onChange: (value: State) => void,\n  state: State,\n  reducer: (state: State, action: A) => State\n) => {\n  const dispatch = useCallback(\n    (action: A) => {\n      onChange(reducer(state, action));\n    },\n    [onChange, state, reducer]\n  );\n\n  return dispatch;\n};\n\nexport const DispatchContext = createContext<((action: Action) => void) | undefined>(undefined);\n\nexport const useDispatch = <T extends Action = Action>(): ((action: T) => void) => {\n  const dispatch = useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error('Use DispatchContext first.');\n  }\n\n  return dispatch;\n};\n","import { Action } from '../../hooks/useStatelessReducer';\nimport { ElasticsearchQuery } from '../../types';\n\nexport const INIT = 'init';\nconst CHANGE_QUERY = 'change_query';\nconst CHANGE_ALIAS_PATTERN = 'change_alias_pattern';\n\nexport interface InitAction extends Action<typeof INIT> {}\n\ninterface ChangeQueryAction extends Action<typeof CHANGE_QUERY> {\n  payload: {\n    query: string;\n  };\n}\n\ninterface ChangeAliasPatternAction extends Action<typeof CHANGE_ALIAS_PATTERN> {\n  payload: {\n    aliasPattern: string;\n  };\n}\n\n/**\n * When the `initQuery` Action is dispatched, the query gets populated with default values where values are not present.\n * This means it won't override any existing value in place, but just ensure the query is in a \"runnable\" state.\n */\nexport const initQuery = (): InitAction => ({ type: INIT });\n\nexport const changeQuery = (query: string): ChangeQueryAction => ({\n  type: CHANGE_QUERY,\n  payload: {\n    query,\n  },\n});\n\nexport const changeAliasPattern = (aliasPattern: string): ChangeAliasPatternAction => ({\n  type: CHANGE_ALIAS_PATTERN,\n  payload: {\n    aliasPattern,\n  },\n});\n\nexport const queryReducer = (prevQuery: ElasticsearchQuery['query'], action: ChangeQueryAction | InitAction) => {\n  switch (action.type) {\n    case CHANGE_QUERY:\n      return action.payload.query;\n\n    case INIT:\n      return prevQuery || '';\n\n    default:\n      return prevQuery;\n  }\n};\n\nexport const aliasPatternReducer = (\n  prevAliasPattern: ElasticsearchQuery['alias'],\n  action: ChangeAliasPatternAction | InitAction\n) => {\n  switch (action.type) {\n    case CHANGE_ALIAS_PATTERN:\n      return action.payload.aliasPattern;\n\n    case INIT:\n      return prevAliasPattern || '';\n\n    default:\n      return prevAliasPattern;\n  }\n};\n","import { defaultMetricAgg } from '../../../../query_def';\nimport { ElasticsearchQuery } from '../../../../types';\nimport { removeEmpty } from '../../../../utils';\nimport { INIT, InitAction } from '../../state';\nimport {\n  isMetricAggregationWithMeta,\n  isMetricAggregationWithSettings,\n  isPipelineAggregation,\n  MetricAggregation,\n} from '../aggregations';\nimport { getChildren, metricAggregationConfig } from '../utils';\nimport {\n  ADD_METRIC,\n  CHANGE_METRIC_TYPE,\n  REMOVE_METRIC,\n  TOGGLE_METRIC_VISIBILITY,\n  MetricAggregationAction,\n  CHANGE_METRIC_FIELD,\n  CHANGE_METRIC_SETTING,\n  CHANGE_METRIC_META,\n  CHANGE_METRIC_ATTRIBUTE,\n} from './types';\n\nexport const reducer = (\n  state: ElasticsearchQuery['metrics'],\n  action: MetricAggregationAction | InitAction\n): ElasticsearchQuery['metrics'] => {\n  switch (action.type) {\n    case ADD_METRIC:\n      return [...state!, defaultMetricAgg(action.payload.id)];\n\n    case REMOVE_METRIC:\n      const metricToRemove = state!.find((m) => m.id === action.payload.id)!;\n      const metricsToRemove = [metricToRemove, ...getChildren(metricToRemove, state!)];\n      const resultingMetrics = state!.filter(\n        (metric) => !metricsToRemove.some((toRemove) => toRemove.id === metric.id)\n      );\n      if (resultingMetrics.length === 0) {\n        return [defaultMetricAgg('1')];\n      }\n      return resultingMetrics;\n\n    case CHANGE_METRIC_TYPE:\n      return state!\n        .filter((metric) =>\n          // When the new metric type is `isSingleMetric` we remove all other metrics from the query\n          // leaving only the current one.\n          !!metricAggregationConfig[action.payload.type].isSingleMetric ? metric.id === action.payload.id : true\n        )\n        .map((metric) => {\n          if (metric.id !== action.payload.id) {\n            return metric;\n          }\n\n          /*\n            TODO: The previous version of the query editor was keeping some of the old metric's configurations\n            in the new selected one (such as field or some settings).\n            It the future would be nice to have the same behavior but it's hard without a proper definition,\n            as Elasticsearch will error sometimes if some settings are not compatible.\n          */\n          return {\n            id: metric.id,\n            type: action.payload.type,\n            ...metricAggregationConfig[action.payload.type].defaults,\n          } as MetricAggregation;\n        });\n\n    case CHANGE_METRIC_FIELD:\n      return state!.map((metric) => {\n        if (metric.id !== action.payload.id) {\n          return metric;\n        }\n\n        const newMetric = {\n          ...metric,\n          field: action.payload.field,\n        };\n\n        if (isPipelineAggregation(metric)) {\n          return { ...newMetric, pipelineAgg: action.payload.field };\n        }\n\n        return newMetric;\n      });\n\n    case TOGGLE_METRIC_VISIBILITY:\n      return state!.map((metric) => {\n        if (metric.id !== action.payload.id) {\n          return metric;\n        }\n\n        return {\n          ...metric,\n          hide: !metric.hide,\n        };\n      });\n\n    case CHANGE_METRIC_SETTING:\n      return state!.map((metric) => {\n        if (metric.id !== action.payload.metric.id) {\n          return metric;\n        }\n\n        // TODO: Here, instead of this if statement, we should assert that metric is MetricAggregationWithSettings\n        if (isMetricAggregationWithSettings(metric)) {\n          const newSettings = removeEmpty({\n            ...metric.settings,\n            [action.payload.settingName]: action.payload.newValue,\n          });\n\n          return {\n            ...metric,\n            settings: {\n              ...newSettings,\n            },\n          };\n        }\n\n        // This should never happen.\n        return metric;\n      });\n\n    case CHANGE_METRIC_META:\n      return state!.map((metric) => {\n        if (metric.id !== action.payload.metric.id) {\n          return metric;\n        }\n\n        // TODO: Here, instead of this if statement, we should assert that metric is MetricAggregationWithMeta\n        if (isMetricAggregationWithMeta(metric)) {\n          return {\n            ...metric,\n            meta: {\n              ...metric.meta,\n              [action.payload.meta]: action.payload.newValue,\n            },\n          };\n        }\n\n        // This should never happen.\n        return metric;\n      });\n\n    case CHANGE_METRIC_ATTRIBUTE:\n      return state!.map((metric) => {\n        if (metric.id !== action.payload.metric.id) {\n          return metric;\n        }\n\n        return {\n          ...metric,\n          [action.payload.attribute]: action.payload.newValue,\n        };\n      });\n\n    case INIT:\n      if (state?.length || 0 > 0) {\n        return state;\n      }\n      return [defaultMetricAgg('1')];\n\n    default:\n      return state;\n  }\n};\n","import { Action } from '../../../../hooks/useStatelessReducer';\nimport { SettingKeyOf } from '../../../types';\nimport {\n  MetricAggregation,\n  MetricAggregationWithMeta,\n  MetricAggregationWithSettings,\n  MetricAggregationWithField,\n} from '../aggregations';\n\nexport const ADD_METRIC = '@metrics/add';\nexport const REMOVE_METRIC = '@metrics/remove';\nexport const CHANGE_METRIC_TYPE = '@metrics/change_type';\nexport const CHANGE_METRIC_FIELD = '@metrics/change_field';\nexport const CHANGE_METRIC_SETTING = '@metrics/change_setting';\nexport const CHANGE_METRIC_META = '@metrics/change_meta';\nexport const CHANGE_METRIC_ATTRIBUTE = '@metrics/change_attr';\nexport const TOGGLE_METRIC_VISIBILITY = '@metrics/toggle_visibility';\n\nexport interface AddMetricAction extends Action<typeof ADD_METRIC> {\n  payload: {\n    id: MetricAggregation['id'];\n  };\n}\n\nexport interface RemoveMetricAction extends Action<typeof REMOVE_METRIC> {\n  payload: {\n    id: MetricAggregation['id'];\n  };\n}\n\nexport interface ChangeMetricTypeAction extends Action<typeof CHANGE_METRIC_TYPE> {\n  payload: {\n    id: MetricAggregation['id'];\n    type: MetricAggregation['type'];\n  };\n}\n\nexport interface ChangeMetricFieldAction extends Action<typeof CHANGE_METRIC_FIELD> {\n  payload: {\n    id: MetricAggregation['id'];\n    field: MetricAggregationWithField['field'];\n  };\n}\nexport interface ToggleMetricVisibilityAction extends Action<typeof TOGGLE_METRIC_VISIBILITY> {\n  payload: {\n    id: MetricAggregation['id'];\n  };\n}\n\nexport interface ChangeMetricSettingAction<T extends MetricAggregationWithSettings>\n  extends Action<typeof CHANGE_METRIC_SETTING> {\n  payload: {\n    metric: T;\n    settingName: SettingKeyOf<T>;\n    newValue: unknown;\n  };\n}\n\nexport interface ChangeMetricMetaAction<T extends MetricAggregationWithMeta> extends Action<typeof CHANGE_METRIC_META> {\n  payload: {\n    metric: T;\n    meta: Extract<keyof Required<T>['meta'], string>;\n    newValue: string | number | boolean;\n  };\n}\n\nexport interface ChangeMetricAttributeAction<\n  T extends MetricAggregation,\n  K extends Extract<keyof T, string> = Extract<keyof T, string>\n> extends Action<typeof CHANGE_METRIC_ATTRIBUTE> {\n  payload: {\n    metric: T;\n    attribute: K;\n    newValue: T[K];\n  };\n}\n\ntype CommonActions =\n  | AddMetricAction\n  | RemoveMetricAction\n  | ChangeMetricTypeAction\n  | ChangeMetricFieldAction\n  | ToggleMetricVisibilityAction;\n\nexport type MetricAggregationAction<T extends MetricAggregation = MetricAggregation> =\n  | (T extends MetricAggregationWithSettings ? ChangeMetricSettingAction<T> : never)\n  | (T extends MetricAggregationWithMeta ? ChangeMetricMetaAction<T> : never)\n  | ChangeMetricAttributeAction<T>\n  | CommonActions;\n","import { defaultBucketAgg } from '../../../../query_def';\nimport { ElasticsearchQuery } from '../../../../types';\nimport { ChangeMetricTypeAction, CHANGE_METRIC_TYPE } from '../../MetricAggregationsEditor/state/types';\nimport { metricAggregationConfig } from '../../MetricAggregationsEditor/utils';\nimport { BucketAggregation, Terms } from '../aggregations';\nimport { INIT, InitAction } from '../../state';\nimport {\n  ADD_BUCKET_AGG,\n  REMOVE_BUCKET_AGG,\n  CHANGE_BUCKET_AGG_TYPE,\n  CHANGE_BUCKET_AGG_FIELD,\n  CHANGE_BUCKET_AGG_SETTING,\n  BucketAggregationAction,\n} from './types';\nimport { bucketAggregationConfig } from '../utils';\nimport { removeEmpty } from '../../../../utils';\n\nexport const reducer = (\n  state: ElasticsearchQuery['bucketAggs'],\n  action: BucketAggregationAction | ChangeMetricTypeAction | InitAction\n): ElasticsearchQuery['bucketAggs'] => {\n  switch (action.type) {\n    case ADD_BUCKET_AGG:\n      const newAgg: Terms = {\n        id: action.payload.id,\n        type: 'terms',\n        settings: bucketAggregationConfig['terms'].defaultSettings,\n      };\n\n      // If the last bucket aggregation is a `date_histogram` we add the new one before it.\n      const lastAgg = state![state!.length - 1];\n      if (lastAgg?.type === 'date_histogram') {\n        return [...state!.slice(0, state!.length - 1), newAgg, lastAgg];\n      }\n\n      return [...state!, newAgg];\n\n    case REMOVE_BUCKET_AGG:\n      return state!.filter((bucketAgg) => bucketAgg.id !== action.payload.id);\n\n    case CHANGE_BUCKET_AGG_TYPE:\n      return state!.map((bucketAgg) => {\n        if (bucketAgg.id !== action.payload.id) {\n          return bucketAgg;\n        }\n\n        /*\n          TODO: The previous version of the query editor was keeping some of the old bucket aggregation's configurations\n          in the new selected one (such as field or some settings).\n          It the future would be nice to have the same behavior but it's hard without a proper definition,\n          as Elasticsearch will error sometimes if some settings are not compatible.\n        */\n        return {\n          id: bucketAgg.id,\n          type: action.payload.newType,\n          settings: bucketAggregationConfig[action.payload.newType].defaultSettings,\n        } as BucketAggregation;\n      });\n\n    case CHANGE_BUCKET_AGG_FIELD:\n      return state!.map((bucketAgg) => {\n        if (bucketAgg.id !== action.payload.id) {\n          return bucketAgg;\n        }\n\n        return {\n          ...bucketAgg,\n          field: action.payload.newField,\n        };\n      });\n\n    case CHANGE_METRIC_TYPE:\n      // If we are switching to a metric which requires the absence of bucket aggregations\n      // we remove all of them.\n      if (metricAggregationConfig[action.payload.type].isSingleMetric) {\n        return [];\n      } else if (state!.length === 0) {\n        // Else, if there are no bucket aggregations we restore a default one.\n        // This happens when switching from a metric that requires the absence of bucket aggregations to\n        // one that requires it.\n        return [defaultBucketAgg()];\n      }\n      return state;\n\n    case CHANGE_BUCKET_AGG_SETTING:\n      return state!.map((bucketAgg) => {\n        if (bucketAgg.id !== action.payload.bucketAgg.id) {\n          return bucketAgg;\n        }\n\n        const newSettings = removeEmpty({\n          ...bucketAgg.settings,\n          [action.payload.settingName]: action.payload.newValue,\n        });\n\n        return {\n          ...bucketAgg,\n          settings: {\n            ...newSettings,\n          },\n        };\n      });\n\n    case INIT:\n      if (state?.length || 0 > 0) {\n        return state;\n      }\n      return [defaultBucketAgg('2')];\n\n    default:\n      return state;\n  }\n};\n","import { Action } from '../../../../hooks/useStatelessReducer';\nimport { SettingKeyOf } from '../../../types';\nimport { BucketAggregation, BucketAggregationWithField } from '../aggregations';\n\nexport const ADD_BUCKET_AGG = '@bucketAggs/add';\nexport const REMOVE_BUCKET_AGG = '@bucketAggs/remove';\nexport const CHANGE_BUCKET_AGG_TYPE = '@bucketAggs/change_type';\nexport const CHANGE_BUCKET_AGG_FIELD = '@bucketAggs/change_field';\nexport const CHANGE_BUCKET_AGG_SETTING = '@bucketAggs/change_setting';\n\nexport interface AddBucketAggregationAction extends Action<typeof ADD_BUCKET_AGG> {\n  payload: {\n    id: BucketAggregation['id'];\n  };\n}\n\nexport interface RemoveBucketAggregationAction extends Action<typeof REMOVE_BUCKET_AGG> {\n  payload: {\n    id: BucketAggregation['id'];\n  };\n}\n\nexport interface ChangeBucketAggregationTypeAction extends Action<typeof CHANGE_BUCKET_AGG_TYPE> {\n  payload: {\n    id: BucketAggregation['id'];\n    newType: BucketAggregation['type'];\n  };\n}\n\nexport interface ChangeBucketAggregationFieldAction extends Action<typeof CHANGE_BUCKET_AGG_FIELD> {\n  payload: {\n    id: BucketAggregation['id'];\n    newField: BucketAggregationWithField['field'];\n  };\n}\n\nexport interface ChangeBucketAggregationSettingAction<T extends BucketAggregation>\n  extends Action<typeof CHANGE_BUCKET_AGG_SETTING> {\n  payload: {\n    bucketAgg: T;\n    settingName: SettingKeyOf<T>;\n    newValue: unknown;\n  };\n}\n\nexport type BucketAggregationAction<T extends BucketAggregation = BucketAggregation> =\n  | AddBucketAggregationAction\n  | RemoveBucketAggregationAction\n  | ChangeBucketAggregationTypeAction\n  | ChangeBucketAggregationFieldAction\n  | ChangeBucketAggregationSettingAction<T>;\n","import React, { createContext, FunctionComponent, useCallback, useContext } from 'react';\nimport { ElasticDatasource } from '../../datasource';\nimport { combineReducers, useStatelessReducer, DispatchContext } from '../../hooks/useStatelessReducer';\nimport { ElasticsearchQuery } from '../../types';\n\nimport { reducer as metricsReducer } from './MetricAggregationsEditor/state/reducer';\nimport { reducer as bucketAggsReducer } from './BucketAggregationsEditor/state/reducer';\nimport { aliasPatternReducer, queryReducer, initQuery } from './state';\n\nconst DatasourceContext = createContext<ElasticDatasource | undefined>(undefined);\nconst QueryContext = createContext<ElasticsearchQuery | undefined>(undefined);\n\ninterface Props {\n  query: ElasticsearchQuery;\n  onChange: (query: ElasticsearchQuery) => void;\n  onRunQuery: () => void;\n  datasource: ElasticDatasource;\n}\n\nexport const ElasticsearchProvider: FunctionComponent<Props> = ({\n  children,\n  onChange,\n  onRunQuery,\n  query,\n  datasource,\n}) => {\n  const onStateChange = useCallback(\n    (query: ElasticsearchQuery) => {\n      onChange(query);\n      onRunQuery();\n    },\n    [onChange, onRunQuery]\n  );\n\n  const reducer = combineReducers({\n    query: queryReducer,\n    alias: aliasPatternReducer,\n    metrics: metricsReducer,\n    bucketAggs: bucketAggsReducer,\n  });\n\n  const dispatch = useStatelessReducer(\n    // timeField is part of the query model, but its value is always set to be the one from datasource settings.\n    (newState) => onStateChange({ ...query, ...newState, timeField: datasource.timeField }),\n    query,\n    reducer\n  );\n\n  // This initializes the query by dispatching an init action to each reducer.\n  // useStatelessReducer will then call `onChange` with the newly generated query\n  if (!query.metrics || !query.bucketAggs || query.query === undefined) {\n    dispatch(initQuery());\n\n    return null;\n  }\n\n  return (\n    <DatasourceContext.Provider value={datasource}>\n      <QueryContext.Provider value={query}>\n        <DispatchContext.Provider value={dispatch}>{children}</DispatchContext.Provider>\n      </QueryContext.Provider>\n    </DatasourceContext.Provider>\n  );\n};\n\nexport const useQuery = (): ElasticsearchQuery => {\n  const query = useContext(QueryContext);\n\n  if (!query) {\n    throw new Error('use ElasticsearchProvider first.');\n  }\n\n  return query;\n};\n\nexport const useDatasource = () => {\n  const datasource = useContext(DatasourceContext);\n  if (!datasource) {\n    throw new Error('use ElasticsearchProvider first.');\n  }\n\n  return datasource;\n};\n","import { GrafanaTheme } from '@grafana/data';\nimport { stylesFactory } from '@grafana/ui';\nimport { css } from 'emotion';\n\nexport const getStyles = stylesFactory((theme: GrafanaTheme, hidden: boolean) => ({\n  color:\n    hidden &&\n    css`\n      &,\n      &:hover,\n      label,\n      a {\n        color: ${hidden ? theme.colors.textFaint : theme.colors.text};\n      }\n    `,\n}));\n","import { SettingKeyOf } from '../../../types';\nimport { MetricAggregation, MetricAggregationWithMeta, MetricAggregationWithSettings } from '../aggregations';\nimport {\n  ADD_METRIC,\n  CHANGE_METRIC_FIELD,\n  CHANGE_METRIC_TYPE,\n  REMOVE_METRIC,\n  TOGGLE_METRIC_VISIBILITY,\n  CHANGE_METRIC_SETTING,\n  CHANGE_METRIC_META,\n  CHANGE_METRIC_ATTRIBUTE,\n  MetricAggregationAction,\n  ChangeMetricAttributeAction,\n  ChangeMetricSettingAction,\n  ChangeMetricMetaAction,\n} from './types';\n\nexport const addMetric = (id: MetricAggregation['id']): MetricAggregationAction => ({\n  type: ADD_METRIC,\n  payload: {\n    id,\n  },\n});\n\nexport const removeMetric = (id: MetricAggregation['id']): MetricAggregationAction => ({\n  type: REMOVE_METRIC,\n  payload: {\n    id,\n  },\n});\n\nexport const changeMetricType = (\n  id: MetricAggregation['id'],\n  type: MetricAggregation['type']\n): MetricAggregationAction => ({\n  type: CHANGE_METRIC_TYPE,\n  payload: {\n    id,\n    type,\n  },\n});\n\nexport const changeMetricField = (id: MetricAggregation['id'], field: string): MetricAggregationAction => ({\n  type: CHANGE_METRIC_FIELD,\n  payload: {\n    id,\n    field,\n  },\n});\n\nexport const toggleMetricVisibility = (id: MetricAggregation['id']): MetricAggregationAction => ({\n  type: TOGGLE_METRIC_VISIBILITY,\n  payload: {\n    id,\n  },\n});\n\nexport const changeMetricAttribute = <T extends MetricAggregation, K extends Extract<keyof T, string>>(\n  metric: T,\n  attribute: K,\n  newValue: T[K]\n): ChangeMetricAttributeAction<T> => ({\n  type: CHANGE_METRIC_ATTRIBUTE,\n  payload: {\n    metric,\n    attribute,\n    newValue,\n  },\n});\n\nexport const changeMetricSetting = <T extends MetricAggregationWithSettings, K extends SettingKeyOf<T>>(\n  metric: T,\n  settingName: K,\n  // Maybe this could have been NonNullable<T['settings']>[K], but it doesn't seem to work really well\n  newValue: NonNullable<T['settings']>[K]\n): ChangeMetricSettingAction<T> => ({\n  type: CHANGE_METRIC_SETTING,\n  payload: {\n    metric,\n    settingName,\n    newValue,\n  },\n});\n\nexport const changeMetricMeta = <T extends MetricAggregationWithMeta>(\n  metric: T,\n  meta: Extract<keyof Required<T>['meta'], string>,\n  newValue: string | number | boolean\n): ChangeMetricMetaAction<T> => ({\n  type: CHANGE_METRIC_META,\n  payload: {\n    metric,\n    meta,\n    newValue,\n  },\n});\n","import { Icon } from '@grafana/ui';\nimport { cx, css } from 'emotion';\nimport React, { FunctionComponent, ComponentProps, ButtonHTMLAttributes } from 'react';\n\nconst SROnly = css`\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`;\n\ninterface Props {\n  iconName: ComponentProps<typeof Icon>['name'];\n  onClick: () => void;\n  className?: string;\n  label: string;\n}\n\nexport const IconButton: FunctionComponent<Props & ButtonHTMLAttributes<HTMLButtonElement>> = ({\n  iconName,\n  onClick,\n  className,\n  label,\n  ...buttonProps\n}) => (\n  <button className={cx('gf-form-label gf-form-label--btn query-part', className)} onClick={onClick} {...buttonProps}>\n    <span className={SROnly}>{label}</span>\n    <Icon name={iconName} aria-hidden=\"true\" />\n  </button>\n);\n","import { css } from 'emotion';\nimport React, { FunctionComponent } from 'react';\nimport { IconButton } from './IconButton';\n\ninterface Props {\n  index: number;\n  elements: any[];\n  onAdd: () => void;\n  onRemove: () => void;\n}\n\n/**\n * A component used to show add & remove buttons for mutable lists of values. Wether to show or not the add or the remove buttons\n * depends on the `index` and `elements` props. This enforces a consistent experience whenever this pattern is used.\n */\nexport const AddRemove: FunctionComponent<Props> = ({ index, onAdd, onRemove, elements }) => {\n  return (\n    <div\n      className={css`\n        display: flex;\n      `}\n    >\n      {index === 0 && <IconButton iconName=\"plus\" onClick={onAdd} label=\"add\" />}\n\n      {elements.length >= 2 && <IconButton iconName=\"minus\" onClick={onRemove} label=\"remove\" />}\n    </div>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { css, cx } from 'emotion';\nimport { SelectableValue } from '@grafana/data';\nimport { Segment } from '@grafana/ui';\nimport { describeMetric } from '../utils';\nimport { MetricAggregation } from './QueryEditor/MetricAggregationsEditor/aggregations';\n\nconst noWrap = css`\n  white-space: nowrap;\n`;\n\nconst toOption = (metric: MetricAggregation) => ({\n  label: describeMetric(metric),\n  value: metric,\n});\n\nconst toOptions = (metrics: MetricAggregation[]): Array<SelectableValue<MetricAggregation>> => metrics.map(toOption);\n\ninterface Props {\n  options: MetricAggregation[];\n  onChange: (e: SelectableValue<MetricAggregation>) => void;\n  className?: string;\n  value?: string;\n}\n\nexport const MetricPicker: FunctionComponent<Props> = ({ options, onChange, className, value }) => (\n  <Segment\n    className={cx(className, noWrap)}\n    options={toOptions(options)}\n    onChange={onChange}\n    placeholder=\"Select Metric\"\n    value={!!value ? toOption(options.find((option) => option.id === value)!) : null}\n  />\n);\n","import { PipelineVariable } from '../../../aggregations';\nimport { defaultPipelineVariable } from '../utils';\nimport {\n  PipelineVariablesAction,\n  REMOVE_PIPELINE_VARIABLE,\n  ADD_PIPELINE_VARIABLE,\n  RENAME_PIPELINE_VARIABLE,\n  CHANGE_PIPELINE_VARIABLE_METRIC,\n} from './types';\n\nexport const reducer = (state: PipelineVariable[] = [], action: PipelineVariablesAction) => {\n  switch (action.type) {\n    case ADD_PIPELINE_VARIABLE:\n      return [...state, defaultPipelineVariable()];\n\n    case REMOVE_PIPELINE_VARIABLE:\n      return state.slice(0, action.payload.index).concat(state.slice(action.payload.index + 1));\n\n    case RENAME_PIPELINE_VARIABLE:\n      return state.map((pipelineVariable, index) => {\n        if (index !== action.payload.index) {\n          return pipelineVariable;\n        }\n\n        return {\n          ...pipelineVariable,\n          name: action.payload.newName,\n        };\n      });\n\n    case CHANGE_PIPELINE_VARIABLE_METRIC:\n      return state.map((pipelineVariable, index) => {\n        if (index !== action.payload.index) {\n          return pipelineVariable;\n        }\n\n        return {\n          ...pipelineVariable,\n          pipelineAgg: action.payload.newMetric,\n        };\n      });\n\n    default:\n      return state;\n  }\n};\n","import { Action } from '../../../../../../hooks/useStatelessReducer';\n\nexport const ADD_PIPELINE_VARIABLE = '@pipelineVariables/add';\nexport const REMOVE_PIPELINE_VARIABLE = '@pipelineVariables/remove';\nexport const RENAME_PIPELINE_VARIABLE = '@pipelineVariables/rename';\nexport const CHANGE_PIPELINE_VARIABLE_METRIC = '@pipelineVariables/change_metric';\n\nexport type AddPipelineVariableAction = Action<typeof ADD_PIPELINE_VARIABLE>;\n\nexport interface RemovePipelineVariableAction extends Action<typeof REMOVE_PIPELINE_VARIABLE> {\n  payload: {\n    index: number;\n  };\n}\n\nexport interface RenamePipelineVariableAction extends Action<typeof RENAME_PIPELINE_VARIABLE> {\n  payload: {\n    index: number;\n    newName: string;\n  };\n}\n\nexport interface ChangePipelineVariableMetricAction extends Action<typeof CHANGE_PIPELINE_VARIABLE_METRIC> {\n  payload: {\n    index: number;\n    newMetric: string;\n  };\n}\n\nexport type PipelineVariablesAction =\n  | AddPipelineVariableAction\n  | RemovePipelineVariableAction\n  | RenamePipelineVariableAction\n  | ChangePipelineVariableMetricAction;\n","import React, { ComponentProps, useState } from 'react';\nimport { InlineField, Input } from '@grafana/ui';\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { changeMetricSetting } from '../state/actions';\nimport { ChangeMetricSettingAction } from '../state/types';\nimport { SettingKeyOf } from '../../../types';\nimport { MetricAggregationWithSettings } from '../aggregations';\nimport { uniqueId } from 'lodash';\n\ninterface Props<T extends MetricAggregationWithSettings, K extends SettingKeyOf<T>> {\n  label: string;\n  settingName: K;\n  metric: T;\n  placeholder?: ComponentProps<typeof Input>['placeholder'];\n  tooltip?: ComponentProps<typeof InlineField>['tooltip'];\n}\n\nexport function SettingField<T extends MetricAggregationWithSettings, K extends SettingKeyOf<T>>({\n  label,\n  settingName,\n  metric,\n  placeholder,\n  tooltip,\n}: Props<T, K>) {\n  const dispatch = useDispatch<ChangeMetricSettingAction<T>>();\n  const [id] = useState(uniqueId(`es-field-id-`));\n  const settings = metric.settings;\n\n  return (\n    <InlineField label={label} labelWidth={16} tooltip={tooltip}>\n      <Input\n        id={id}\n        placeholder={placeholder}\n        onBlur={(e) => dispatch(changeMetricSetting(metric, settingName, e.target.value as any))}\n        defaultValue={settings?.[settingName as keyof typeof settings]}\n      />\n    </InlineField>\n  );\n}\n","import React, { Fragment, FunctionComponent, useEffect } from 'react';\nimport { Input, InlineLabel } from '@grafana/ui';\nimport { MetricAggregationAction } from '../../state/types';\nimport { changeMetricAttribute } from '../../state/actions';\nimport { css } from 'emotion';\nimport { AddRemove } from '../../../../AddRemove';\nimport { useStatelessReducer, useDispatch } from '../../../../../hooks/useStatelessReducer';\nimport { MetricPicker } from '../../../../MetricPicker';\nimport { reducer } from './state/reducer';\nimport {\n  addPipelineVariable,\n  removePipelineVariable,\n  renamePipelineVariable,\n  changePipelineVariableMetric,\n} from './state/actions';\nimport { SettingField } from '../SettingField';\nimport { BucketScript, MetricAggregation } from '../../aggregations';\n\ninterface Props {\n  value: BucketScript;\n  previousMetrics: MetricAggregation[];\n}\n\nexport const BucketScriptSettingsEditor: FunctionComponent<Props> = ({ value, previousMetrics }) => {\n  const upperStateDispatch = useDispatch<MetricAggregationAction<BucketScript>>();\n\n  const dispatch = useStatelessReducer(\n    (newState) => upperStateDispatch(changeMetricAttribute(value, 'pipelineVariables', newState)),\n    value.pipelineVariables,\n    reducer\n  );\n\n  // The model might not have pipeline variables (or an empty array of pipeline vars) in it because of the way it was built in previous versions of the datasource.\n  // If this is the case we add a default one.\n  useEffect(() => {\n    if (!value.pipelineVariables?.length) {\n      dispatch(addPipelineVariable());\n    }\n  }, []);\n\n  return (\n    <>\n      <div\n        className={css`\n          display: flex;\n        `}\n      >\n        <InlineLabel width={16}>Variables</InlineLabel>\n        <div\n          className={css`\n            display: grid;\n            grid-template-columns: 1fr auto;\n            row-gap: 4px;\n            margin-bottom: 4px;\n          `}\n        >\n          {value.pipelineVariables!.map((pipelineVar, index) => (\n            <Fragment key={pipelineVar.name}>\n              <div\n                className={css`\n                  display: grid;\n                  column-gap: 4px;\n                  grid-template-columns: auto auto;\n                `}\n              >\n                <Input\n                  defaultValue={pipelineVar.name}\n                  placeholder=\"Variable Name\"\n                  onBlur={(e) => dispatch(renamePipelineVariable(e.target.value, index))}\n                />\n                <MetricPicker\n                  onChange={(e) => dispatch(changePipelineVariableMetric(e.value!.id, index))}\n                  options={previousMetrics}\n                  value={pipelineVar.pipelineAgg}\n                />\n              </div>\n\n              <AddRemove\n                index={index}\n                elements={value.pipelineVariables || []}\n                onAdd={() => dispatch(addPipelineVariable())}\n                onRemove={() => dispatch(removePipelineVariable(index))}\n              />\n            </Fragment>\n          ))}\n        </div>\n      </div>\n\n      <SettingField\n        label=\"Script\"\n        metric={value}\n        settingName=\"script\"\n        tooltip=\"Elasticsearch v5.0 and above: Scripting language is Painless. Use params.<var> to reference a variable. Elasticsearch pre-v5.0: Scripting language is per default Groovy if not changed. For Groovy use <var> to reference a variable.\"\n        placeholder=\"params.var1 / params.var2\"\n      />\n    </>\n  );\n};\n","import {\n  ADD_PIPELINE_VARIABLE,\n  REMOVE_PIPELINE_VARIABLE,\n  PipelineVariablesAction,\n  RENAME_PIPELINE_VARIABLE,\n  CHANGE_PIPELINE_VARIABLE_METRIC,\n} from './types';\n\nexport const addPipelineVariable = (): PipelineVariablesAction => ({\n  type: ADD_PIPELINE_VARIABLE,\n});\n\nexport const removePipelineVariable = (index: number): PipelineVariablesAction => ({\n  type: REMOVE_PIPELINE_VARIABLE,\n  payload: {\n    index,\n  },\n});\n\nexport const renamePipelineVariable = (newName: string, index: number): PipelineVariablesAction => ({\n  type: RENAME_PIPELINE_VARIABLE,\n  payload: {\n    index,\n    newName,\n  },\n});\n\nexport const changePipelineVariableMetric = (newMetric: string, index: number): PipelineVariablesAction => ({\n  type: CHANGE_PIPELINE_VARIABLE_METRIC,\n  payload: {\n    index,\n    newMetric,\n  },\n});\n","import { css } from 'emotion';\n\nexport const segmentStyles = css`\n  min-width: 150px;\n`;\n","import { GrafanaTheme } from '@grafana/data';\nimport { Icon, InlineSegmentGroup, stylesFactory, useTheme } from '@grafana/ui';\nimport { css, cx } from 'emotion';\nimport React, { FunctionComponent, useState } from 'react';\nimport { segmentStyles } from './styles';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme, hidden: boolean) => {\n  return {\n    wrapper: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    settingsWrapper: css`\n      padding-top: ${theme.spacing.xs};\n    `,\n    icon: css`\n      margin-right: ${theme.spacing.xs};\n    `,\n    button: css`\n      justify-content: start;\n      ${hidden &&\n      css`\n        color: ${theme.colors.textFaint};\n      `}\n    `,\n  };\n});\ninterface Props {\n  label: string;\n  hidden?: boolean;\n}\n\nexport const SettingsEditorContainer: FunctionComponent<Props> = ({ label, children, hidden = false }) => {\n  const [open, setOpen] = useState(false);\n  const styles = getStyles(useTheme(), hidden);\n\n  return (\n    <InlineSegmentGroup>\n      <div className={cx(styles.wrapper)}>\n        <button\n          className={cx('gf-form-label query-part', styles.button, segmentStyles)}\n          onClick={() => setOpen(!open)}\n          aria-expanded={open}\n        >\n          <Icon name={open ? 'angle-down' : 'angle-right'} aria-hidden=\"true\" className={styles.icon} />\n          {label}\n        </button>\n\n        {open && <div className={styles.settingsWrapper}>{children}</div>}\n      </div>\n    </InlineSegmentGroup>\n  );\n};\n","import { Input, InlineField, Select, Switch } from '@grafana/ui';\nimport React, { FunctionComponent } from 'react';\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { movingAvgModelOptions } from '../../../../query_def';\nimport { isEWMAMovingAverage, isHoltMovingAverage, isHoltWintersMovingAverage, MovingAverage } from '../aggregations';\nimport { changeMetricSetting } from '../state/actions';\n\ninterface Props {\n  metric: MovingAverage;\n}\n\n// The way we handle changes for those settings is not ideal compared to the other components in the editor\nexport const MovingAverageSettingsEditor: FunctionComponent<Props> = ({ metric }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <InlineField label=\"Model\">\n        <Select\n          onChange={(value) => dispatch(changeMetricSetting(metric, 'model', value.value!))}\n          options={movingAvgModelOptions}\n          value={metric.settings?.model}\n        />\n      </InlineField>\n\n      <InlineField label=\"Window\">\n        <Input\n          onBlur={(e) => dispatch(changeMetricSetting(metric, 'window', parseInt(e.target.value!, 10)))}\n          defaultValue={metric.settings?.window}\n        />\n      </InlineField>\n\n      <InlineField label=\"Predict\">\n        <Input\n          onBlur={(e) => dispatch(changeMetricSetting(metric, 'predict', parseInt(e.target.value!, 10)))}\n          defaultValue={metric.settings?.predict}\n        />\n      </InlineField>\n\n      {isEWMAMovingAverage(metric) && (\n        <>\n          <InlineField label=\"Alpha\">\n            <Input\n              onBlur={(e) => dispatch(changeMetricSetting(metric, 'alpha', parseInt(e.target.value!, 10)))}\n              defaultValue={metric.settings?.alpha}\n            />\n          </InlineField>\n\n          <InlineField label=\"Minimize\">\n            <Switch\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                dispatch(changeMetricSetting(metric, 'minimize', e.target.checked))\n              }\n              checked={!!metric.settings?.minimize}\n            />\n          </InlineField>\n        </>\n      )}\n\n      {isHoltMovingAverage(metric) && (\n        <>\n          <InlineField label=\"Alpha\">\n            <Input\n              onBlur={(e) =>\n                dispatch(\n                  changeMetricSetting(metric, 'settings', {\n                    ...metric.settings?.settings,\n                    alpha: parseInt(e.target.value!, 10),\n                  })\n                )\n              }\n              defaultValue={metric.settings?.settings?.alpha}\n            />\n          </InlineField>\n          <InlineField label=\"Beta\">\n            <Input\n              onBlur={(e) =>\n                dispatch(\n                  changeMetricSetting(metric, 'settings', {\n                    ...metric.settings?.settings,\n                    beta: parseInt(e.target.value!, 10),\n                  })\n                )\n              }\n              defaultValue={metric.settings?.settings?.beta}\n            />\n          </InlineField>\n\n          <InlineField label=\"Minimize\">\n            <Switch\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                dispatch(changeMetricSetting(metric, 'minimize', e.target.checked))\n              }\n              checked={!!metric.settings?.minimize}\n            />\n          </InlineField>\n        </>\n      )}\n\n      {isHoltWintersMovingAverage(metric) && (\n        <>\n          <InlineField label=\"Alpha\">\n            <Input\n              onBlur={(e) =>\n                dispatch(\n                  changeMetricSetting(metric, 'settings', {\n                    ...metric.settings?.settings,\n                    alpha: parseInt(e.target.value!, 10),\n                  })\n                )\n              }\n              defaultValue={metric.settings?.settings?.alpha}\n            />\n          </InlineField>\n          <InlineField label=\"Beta\">\n            <Input\n              onBlur={(e) =>\n                dispatch(\n                  changeMetricSetting(metric, 'settings', {\n                    ...metric.settings?.settings,\n                    beta: parseInt(e.target.value!, 10),\n                  })\n                )\n              }\n              defaultValue={metric.settings?.settings?.beta}\n            />\n          </InlineField>\n          <InlineField label=\"Gamma\">\n            <Input\n              onBlur={(e) =>\n                dispatch(\n                  changeMetricSetting(metric, 'settings', {\n                    ...metric.settings?.settings,\n                    gamma: parseInt(e.target.value!, 10),\n                  })\n                )\n              }\n              defaultValue={metric.settings?.settings?.gamma}\n            />\n          </InlineField>\n          <InlineField label=\"Period\">\n            <Input\n              onBlur={(e) =>\n                dispatch(\n                  changeMetricSetting(metric, 'settings', {\n                    ...metric.settings?.settings,\n                    period: parseInt(e.target.value!, 10),\n                  })\n                )\n              }\n              defaultValue={metric.settings?.settings?.period}\n            />\n          </InlineField>\n\n          <InlineField label=\"Pad\">\n            <Switch\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                dispatch(\n                  changeMetricSetting(metric, 'settings', { ...metric.settings?.settings, pad: e.target.checked })\n                )\n              }\n              checked={!!metric.settings?.settings?.pad}\n            />\n          </InlineField>\n\n          <InlineField label=\"Minimize\">\n            <Switch\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                dispatch(changeMetricSetting(metric, 'minimize', e.target.checked))\n              }\n              checked={!!metric.settings?.minimize}\n            />\n          </InlineField>\n        </>\n      )}\n    </>\n  );\n};\n","import { InlineField, Input, InlineSwitch } from '@grafana/ui';\nimport React, { FunctionComponent, ComponentProps, useState } from 'react';\nimport { extendedStats } from '../../../../query_def';\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { changeMetricMeta, changeMetricSetting } from '../state/actions';\nimport {\n  MetricAggregation,\n  isMetricAggregationWithInlineScript,\n  isMetricAggregationWithMissingSupport,\n  ExtendedStat,\n} from '../aggregations';\nimport { BucketScriptSettingsEditor } from './BucketScriptSettingsEditor';\nimport { SettingField } from './SettingField';\nimport { SettingsEditorContainer } from '../../SettingsEditorContainer';\nimport { useDescription } from './useDescription';\nimport { MovingAverageSettingsEditor } from './MovingAverageSettingsEditor';\nimport { uniqueId } from 'lodash';\nimport { metricAggregationConfig } from '../utils';\nimport { useQuery } from '../../ElasticsearchQueryContext';\n\n// TODO: Move this somewhere and share it with BucketsAggregation Editor\nconst inlineFieldProps: Partial<ComponentProps<typeof InlineField>> = {\n  labelWidth: 16,\n};\n\ninterface Props {\n  metric: MetricAggregation;\n  previousMetrics: MetricAggregation[];\n}\n\nexport const SettingsEditor: FunctionComponent<Props> = ({ metric, previousMetrics }) => {\n  const dispatch = useDispatch();\n  const description = useDescription(metric);\n  const query = useQuery();\n\n  return (\n    <SettingsEditorContainer label={description} hidden={metric.hide}>\n      {metric.type === 'derivative' && <SettingField label=\"Unit\" metric={metric} settingName=\"unit\" />}\n\n      {metric.type === 'serial_diff' && (\n        <InlineField label=\"Lag\">\n          <Input\n            onBlur={(e) => dispatch(changeMetricSetting(metric, 'lag', parseInt(e.target.value, 10)))}\n            defaultValue={metric.settings?.lag}\n          />\n        </InlineField>\n      )}\n\n      {metric.type === 'cumulative_sum' && <SettingField label=\"Format\" metric={metric} settingName=\"format\" />}\n\n      {metric.type === 'moving_avg' && <MovingAverageSettingsEditor metric={metric} />}\n\n      {metric.type === 'moving_fn' && (\n        <>\n          <SettingField label=\"Window\" metric={metric} settingName=\"window\" />\n          <SettingField label=\"Script\" metric={metric} settingName=\"script\" />\n          <SettingField label=\"Shift\" metric={metric} settingName=\"shift\" />\n        </>\n      )}\n\n      {metric.type === 'bucket_script' && (\n        <BucketScriptSettingsEditor value={metric} previousMetrics={previousMetrics} />\n      )}\n\n      {(metric.type === 'raw_data' || metric.type === 'raw_document') && (\n        <InlineField label=\"Size\" {...inlineFieldProps}>\n          <Input\n            id={`ES-query-${query.refId}_metric-${metric.id}-size`}\n            onBlur={(e) => dispatch(changeMetricSetting(metric, 'size', e.target.value))}\n            defaultValue={metric.settings?.size ?? metricAggregationConfig['raw_data'].defaults.settings?.size}\n          />\n        </InlineField>\n      )}\n\n      {metric.type === 'cardinality' && (\n        <SettingField label=\"Precision Threshold\" metric={metric} settingName=\"precision_threshold\" />\n      )}\n\n      {metric.type === 'extended_stats' && (\n        <>\n          {extendedStats.map((stat) => (\n            <ExtendedStatSetting\n              key={stat.value}\n              stat={stat}\n              onChange={(checked) => dispatch(changeMetricMeta(metric, stat.value, checked))}\n              value={\n                metric.meta?.[stat.value] !== undefined\n                  ? !!metric.meta?.[stat.value]\n                  : !!metricAggregationConfig['extended_stats'].defaults.meta?.[stat.value]\n              }\n            />\n          ))}\n\n          <SettingField label=\"Sigma\" metric={metric} settingName=\"sigma\" placeholder=\"3\" />\n        </>\n      )}\n\n      {metric.type === 'percentiles' && (\n        <InlineField label=\"Percentiles\" {...inlineFieldProps}>\n          <Input\n            onBlur={(e) => dispatch(changeMetricSetting(metric, 'percents', e.target.value.split(',').filter(Boolean)))}\n            defaultValue={\n              metric.settings?.percents || metricAggregationConfig['percentiles'].defaults.settings?.percents\n            }\n            placeholder=\"1,5,25,50,75,95,99\"\n          />\n        </InlineField>\n      )}\n\n      {isMetricAggregationWithInlineScript(metric) && (\n        <SettingField label=\"Script\" metric={metric} settingName=\"script\" placeholder=\"_value * 1\" />\n      )}\n\n      {isMetricAggregationWithMissingSupport(metric) && (\n        <SettingField\n          label=\"Missing\"\n          metric={metric}\n          settingName=\"missing\"\n          tooltip=\"The missing parameter defines how documents that are missing a value should be treated. By default\n            they will be ignored but it is also possible to treat them as if they had a value\"\n        />\n      )}\n    </SettingsEditorContainer>\n  );\n};\n\ninterface ExtendedStatSettingProps {\n  stat: ExtendedStat;\n  onChange: (checked: boolean) => void;\n  value: boolean;\n}\nconst ExtendedStatSetting: FunctionComponent<ExtendedStatSettingProps> = ({ stat, onChange, value }) => {\n  // this is needed for the htmlFor prop in the label so that clicking the label will toggle the switch state.\n  const [id] = useState(uniqueId(`es-field-id-`));\n\n  return (\n    <InlineField label={stat.label} {...inlineFieldProps} key={stat.value}>\n      <InlineSwitch\n        id={id}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChange(e.target.checked)}\n        value={value}\n      />\n    </InlineField>\n  );\n};\n","import { extendedStats } from '../../../../query_def';\nimport { MetricAggregation } from '../aggregations';\n\nconst hasValue = (value: string) => (object: { value: string }) => object.value === value;\n\n// FIXME: All the defaults and validations down here should be defined somewhere else\n// as they are also the defaults that are gonna be applied to the query.\n// In the previous version, the same method was taking care of describing the settings and setting defaults.\nexport const useDescription = (metric: MetricAggregation): string => {\n  switch (metric.type) {\n    case 'cardinality': {\n      const precisionThreshold = metric.settings?.precision_threshold || '';\n      return `Precision threshold: ${precisionThreshold}`;\n    }\n\n    case 'percentiles':\n      if (metric.settings?.percents && metric.settings?.percents?.length >= 1) {\n        return `Values: ${metric.settings?.percents}`;\n      }\n\n      return 'Percents: Default';\n\n    case 'extended_stats': {\n      const selectedStats = Object.entries(metric.meta || {})\n        .map(([key, value]) => value && extendedStats.find(hasValue(key))?.label)\n        .filter(Boolean);\n\n      return `Stats: ${selectedStats.length > 0 ? selectedStats.join(', ') : 'None selected'}`;\n    }\n\n    case 'raw_document':\n    case 'raw_data': {\n      const size = metric.settings?.size || 500;\n      return `Size: ${size}`;\n    }\n\n    default:\n      return 'Options';\n  }\n};\n","import { MetricFindValue, SelectableValue } from '@grafana/data';\nimport { InlineSegmentGroup, Segment, SegmentAsync, useTheme } from '@grafana/ui';\nimport { cx } from 'emotion';\nimport React, { FunctionComponent } from 'react';\nimport { useDatasource, useQuery } from '../ElasticsearchQueryContext';\nimport { useDispatch } from '../../../hooks/useStatelessReducer';\nimport { getStyles } from './styles';\nimport { SettingsEditor } from './SettingsEditor';\nimport { MetricAggregationAction } from './state/types';\nimport { metricAggregationConfig } from './utils';\nimport { changeMetricField, changeMetricType } from './state/actions';\nimport { MetricPicker } from '../../MetricPicker';\nimport { segmentStyles } from '../styles';\nimport {\n  isMetricAggregationWithField,\n  isMetricAggregationWithSettings,\n  isPipelineAggregation,\n  isPipelineAggregationWithMultipleBucketPaths,\n  MetricAggregation,\n  MetricAggregationType,\n} from './aggregations';\n\nconst toOption = (metric: MetricAggregation) => ({\n  label: metricAggregationConfig[metric.type].label,\n  value: metric.type,\n});\n\nconst toSelectableValue = ({ value, text }: MetricFindValue): SelectableValue<string> => ({\n  label: text,\n  value: `${value || text}`,\n});\n\ninterface Props {\n  value: MetricAggregation;\n}\n\n// If a metric is a Pipeline Aggregation (https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline.html)\n// it doesn't make sense to show it in the type picker when there is no non-pipeline-aggregation previously selected\n// as they work on the outputs produced from other aggregations rather than from documents or fields.\n// This means we should filter them out from the type picker if there's no other \"basic\" aggregation before the current one.\nconst isBasicAggregation = (metric: MetricAggregation) => !metricAggregationConfig[metric.type].isPipelineAgg;\n\nconst getTypeOptions = (\n  previousMetrics: MetricAggregation[],\n  esVersion: number\n): Array<SelectableValue<MetricAggregationType>> => {\n  // we'll include Pipeline Aggregations only if at least one previous metric is a \"Basic\" one\n  const includePipelineAggregations = previousMetrics.some(isBasicAggregation);\n\n  return (\n    Object.entries(metricAggregationConfig)\n      // Only showing metrics type supported by the configured version of ES\n      .filter(([_, { minVersion = 0, maxVersion = esVersion }]) => {\n        // TODO: Double check this\n        return esVersion >= minVersion && esVersion <= maxVersion;\n      })\n      // Filtering out Pipeline Aggregations if there's no basic metric selected before\n      .filter(([_, config]) => includePipelineAggregations || !config.isPipelineAgg)\n      .map(([key, { label }]) => ({\n        label,\n        value: key as MetricAggregationType,\n      }))\n  );\n};\n\nexport const MetricEditor: FunctionComponent<Props> = ({ value }) => {\n  const styles = getStyles(useTheme(), !!value.hide);\n  const datasource = useDatasource();\n  const query = useQuery();\n  const dispatch = useDispatch<MetricAggregationAction>();\n\n  const previousMetrics = query.metrics!.slice(\n    0,\n    query.metrics!.findIndex((m) => m.id === value.id)\n  );\n\n  // TODO: This could be common with the one in BucketAggregationEditor\n  const getFields = async () => {\n    const get = () => {\n      if (value.type === 'cardinality') {\n        return datasource.getFields();\n      }\n      return datasource.getFields('number');\n    };\n\n    return (await get().toPromise()).map(toSelectableValue);\n  };\n\n  return (\n    <>\n      <InlineSegmentGroup>\n        <Segment\n          className={cx(styles.color, segmentStyles)}\n          options={getTypeOptions(previousMetrics, datasource.esVersion)}\n          onChange={(e) => dispatch(changeMetricType(value.id, e.value!))}\n          value={toOption(value)}\n        />\n\n        {isMetricAggregationWithField(value) && !isPipelineAggregation(value) && (\n          <SegmentAsync\n            className={cx(styles.color, segmentStyles)}\n            loadOptions={getFields}\n            onChange={(e) => dispatch(changeMetricField(value.id, e.value!))}\n            placeholder=\"Select Field\"\n            value={value.field}\n          />\n        )}\n\n        {isPipelineAggregation(value) && !isPipelineAggregationWithMultipleBucketPaths(value) && (\n          <MetricPicker\n            className={cx(styles.color, segmentStyles)}\n            onChange={(e) => dispatch(changeMetricField(value.id, e.value?.id!))}\n            options={previousMetrics}\n            value={value.field}\n          />\n        )}\n      </InlineSegmentGroup>\n\n      {isMetricAggregationWithSettings(value) && <SettingsEditor metric={value} previousMetrics={previousMetrics} />}\n    </>\n  );\n};\n","import { GrafanaTheme } from '@grafana/data';\nimport { IconButton, InlineFieldRow, InlineLabel, InlineSegmentGroup, stylesFactory, useTheme } from '@grafana/ui';\nimport { css } from 'emotion';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent } from 'react';\n\ninterface Props {\n  label: string;\n  onRemoveClick?: false | (() => void);\n  onHideClick?: false | (() => void);\n  hidden?: boolean;\n}\n\nexport const QueryEditorRow: FunctionComponent<Props> = ({\n  children,\n  label,\n  onRemoveClick,\n  onHideClick,\n  hidden = false,\n}) => {\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  return (\n    <InlineFieldRow>\n      <InlineSegmentGroup>\n        <InlineLabel width={17} as=\"div\">\n          <span>{label}</span>\n          <span className={styles.iconWrapper}>\n            {onHideClick && (\n              <IconButton\n                name={hidden ? 'eye-slash' : 'eye'}\n                onClick={onHideClick}\n                surface=\"header\"\n                size=\"sm\"\n                aria-pressed={hidden}\n                aria-label=\"hide metric\"\n                className={styles.icon}\n              />\n            )}\n            <IconButton\n              name=\"trash-alt\"\n              surface=\"header\"\n              size=\"sm\"\n              className={styles.icon}\n              onClick={onRemoveClick || noop}\n              disabled={!onRemoveClick}\n              aria-label=\"remove metric\"\n            />\n          </span>\n        </InlineLabel>\n      </InlineSegmentGroup>\n      {children}\n    </InlineFieldRow>\n  );\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    iconWrapper: css`\n      display: flex;\n    `,\n    icon: css`\n      color: ${theme.colors.textWeak};\n      margin-left: ${theme.spacing.xxs};\n    `,\n  };\n});\n","import React, { FunctionComponent } from 'react';\nimport { MetricEditor } from './MetricEditor';\nimport { useDispatch } from '../../../hooks/useStatelessReducer';\nimport { MetricAggregationAction } from './state/types';\nimport { metricAggregationConfig } from './utils';\nimport { addMetric, removeMetric, toggleMetricVisibility } from './state/actions';\nimport { MetricAggregation } from './aggregations';\nimport { useQuery } from '../ElasticsearchQueryContext';\nimport { QueryEditorRow } from '../QueryEditorRow';\nimport { IconButton } from '../../IconButton';\n\ninterface Props {\n  nextId: MetricAggregation['id'];\n}\n\nexport const MetricAggregationsEditor: FunctionComponent<Props> = ({ nextId }) => {\n  const dispatch = useDispatch<MetricAggregationAction>();\n  const { metrics } = useQuery();\n  const totalMetrics = metrics?.length || 0;\n\n  return (\n    <>\n      {metrics?.map((metric, index) => (\n        <QueryEditorRow\n          key={metric.id}\n          label={`Metric (${metric.id})`}\n          hidden={metric.hide}\n          onHideClick={() => dispatch(toggleMetricVisibility(metric.id))}\n          onRemoveClick={totalMetrics > 1 && (() => dispatch(removeMetric(metric.id)))}\n        >\n          <MetricEditor value={metric} />\n\n          {!metricAggregationConfig[metric.type].isSingleMetric && index === 0 && (\n            <IconButton iconName=\"plus\" onClick={() => dispatch(addMetric(nextId))} label=\"add\" />\n          )}\n        </QueryEditorRow>\n      ))}\n    </>\n  );\n};\n","import { SettingKeyOf } from '../../../types';\nimport { BucketAggregation, BucketAggregationWithField } from '../aggregations';\nimport {\n  ADD_BUCKET_AGG,\n  BucketAggregationAction,\n  REMOVE_BUCKET_AGG,\n  CHANGE_BUCKET_AGG_TYPE,\n  CHANGE_BUCKET_AGG_FIELD,\n  CHANGE_BUCKET_AGG_SETTING,\n  ChangeBucketAggregationSettingAction,\n} from './types';\n\nexport const addBucketAggregation = (id: string): BucketAggregationAction => ({\n  type: ADD_BUCKET_AGG,\n  payload: {\n    id,\n  },\n});\n\nexport const removeBucketAggregation = (id: BucketAggregation['id']): BucketAggregationAction => ({\n  type: REMOVE_BUCKET_AGG,\n  payload: {\n    id,\n  },\n});\n\nexport const changeBucketAggregationType = (\n  id: BucketAggregation['id'],\n  newType: BucketAggregation['type']\n): BucketAggregationAction => ({\n  type: CHANGE_BUCKET_AGG_TYPE,\n  payload: {\n    id,\n    newType,\n  },\n});\n\nexport const changeBucketAggregationField = (\n  id: BucketAggregationWithField['id'],\n  newField: BucketAggregationWithField['field']\n): BucketAggregationAction => ({\n  type: CHANGE_BUCKET_AGG_FIELD,\n  payload: {\n    id,\n    newField,\n  },\n});\n\nexport const changeBucketAggregationSetting = <T extends BucketAggregation, K extends SettingKeyOf<T>>(\n  bucketAgg: T,\n  settingName: K,\n  // This could be inferred from T, but it's causing some troubles\n  newValue: string | string[] | any\n): ChangeBucketAggregationSettingAction<T> => ({\n  type: CHANGE_BUCKET_AGG_SETTING,\n  payload: {\n    bucketAgg,\n    settingName,\n    newValue,\n  },\n});\n","import { Action } from '../../../../../../hooks/useStatelessReducer';\nimport { Filter } from '../../../aggregations';\n\nexport const ADD_FILTER = '@bucketAggregations/filter/add';\nexport const REMOVE_FILTER = '@bucketAggregations/filter/remove';\nexport const CHANGE_FILTER = '@bucketAggregations/filter/change';\n\nexport type AddFilterAction = Action<typeof ADD_FILTER>;\n\nexport interface RemoveFilterAction extends Action<typeof REMOVE_FILTER> {\n  payload: {\n    index: number;\n  };\n}\n\nexport interface ChangeFilterAction extends Action<typeof CHANGE_FILTER> {\n  payload: {\n    index: number;\n    filter: Filter;\n  };\n}\nexport type FilterAction = AddFilterAction | RemoveFilterAction | ChangeFilterAction;\n","import { Filter } from '../../../aggregations';\nimport { FilterAction, ADD_FILTER, REMOVE_FILTER, CHANGE_FILTER } from './types';\n\nexport const addFilter = (): FilterAction => ({\n  type: ADD_FILTER,\n});\n\nexport const removeFilter = (index: number): FilterAction => ({\n  type: REMOVE_FILTER,\n  payload: { index },\n});\n\nexport const changeFilter = (index: number, filter: Filter): FilterAction => ({\n  type: CHANGE_FILTER,\n  payload: { index, filter },\n});\n","import { Filter } from '../../../aggregations';\nimport { defaultFilter } from '../utils';\nimport { ADD_FILTER, CHANGE_FILTER, FilterAction, REMOVE_FILTER } from './types';\n\nexport const reducer = (state: Filter[] = [], action: FilterAction) => {\n  switch (action.type) {\n    case ADD_FILTER:\n      return [...state, defaultFilter()];\n    case REMOVE_FILTER:\n      return state.slice(0, action.payload.index).concat(state.slice(action.payload.index + 1));\n\n    case CHANGE_FILTER:\n      return state.map((filter, index) => {\n        if (index !== action.payload.index) {\n          return filter;\n        }\n\n        return action.payload.filter;\n      });\n  }\n};\n","import { InlineField, Input, QueryField } from '@grafana/ui';\nimport { css } from 'emotion';\nimport React, { FunctionComponent, useEffect } from 'react';\nimport { AddRemove } from '../../../../AddRemove';\nimport { useDispatch, useStatelessReducer } from '../../../../../hooks/useStatelessReducer';\nimport { Filters } from '../../aggregations';\nimport { changeBucketAggregationSetting } from '../../state/actions';\nimport { BucketAggregationAction } from '../../state/types';\nimport { addFilter, changeFilter, removeFilter } from './state/actions';\nimport { reducer as filtersReducer } from './state/reducer';\n\ninterface Props {\n  value: Filters;\n}\n\nexport const FiltersSettingsEditor: FunctionComponent<Props> = ({ value }) => {\n  const upperStateDispatch = useDispatch<BucketAggregationAction<Filters>>();\n\n  const dispatch = useStatelessReducer(\n    (newState) => upperStateDispatch(changeBucketAggregationSetting(value, 'filters', newState)),\n    value.settings?.filters,\n    filtersReducer\n  );\n\n  // The model might not have filters (or an empty array of filters) in it because of the way it was built in previous versions of the datasource.\n  // If this is the case we add a default one.\n  useEffect(() => {\n    if (!value.settings?.filters?.length) {\n      dispatch(addFilter());\n    }\n  }, []);\n\n  return (\n    <>\n      <div\n        className={css`\n          display: flex;\n          flex-direction: column;\n        `}\n      >\n        {value.settings?.filters!.map((filter, index) => (\n          <div\n            key={index}\n            className={css`\n              display: flex;\n            `}\n          >\n            <div\n              className={css`\n                width: 250px;\n              `}\n            >\n              <InlineField label=\"Query\" labelWidth={10}>\n                <QueryField\n                  placeholder=\"Lucene Query\"\n                  portalOrigin=\"elasticsearch\"\n                  onBlur={() => {}}\n                  onChange={(query) => dispatch(changeFilter(index, { ...filter, query }))}\n                  query={filter.query}\n                />\n              </InlineField>\n            </div>\n            <InlineField label=\"Label\" labelWidth={10}>\n              <Input\n                placeholder=\"Label\"\n                onBlur={(e) => dispatch(changeFilter(index, { ...filter, label: e.target.value }))}\n                defaultValue={filter.label}\n              />\n            </InlineField>\n            <AddRemove\n              index={index}\n              elements={value.settings?.filters || []}\n              onAdd={() => dispatch(addFilter())}\n              onRemove={() => dispatch(removeFilter(index))}\n            />\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n","import { describeMetric, convertOrderByToMetricId } from '../../../../utils';\nimport { useQuery } from '../../ElasticsearchQueryContext';\nimport { BucketAggregation } from '../aggregations';\nimport { bucketAggregationConfig, orderByOptions, orderOptions } from '../utils';\n\nconst hasValue = (value: string) => (object: { value: string }) => object.value === value;\n\n// FIXME: We should apply the same defaults we have in bucketAggregationsConfig here instead of \"custom\" values\n// as they might get out of sync.\n// The reason we need them is that even though after the refactoring each setting is created with its default value,\n// queries created with the old version might not have them.\nexport const useDescription = (bucketAgg: BucketAggregation): string => {\n  const { metrics } = useQuery();\n\n  switch (bucketAgg.type) {\n    case 'terms': {\n      const order = bucketAgg.settings?.order || 'desc';\n      const size = bucketAgg.settings?.size || '10';\n      const minDocCount = parseInt(bucketAgg.settings?.min_doc_count || '0', 10);\n      const orderBy = bucketAgg.settings?.orderBy || '_term';\n      let description = '';\n\n      if (size !== '0') {\n        const orderLabel = orderOptions.find(hasValue(order))?.label!;\n        description = `${orderLabel} ${size}, `;\n      }\n\n      if (minDocCount > 0) {\n        description += `Min Doc Count: ${minDocCount}, `;\n      }\n\n      description += 'Order by: ';\n      const orderByOption = orderByOptions.find(hasValue(orderBy));\n      if (orderByOption) {\n        description += orderByOption.label;\n      } else {\n        const metric = metrics?.find((m) => m.id === convertOrderByToMetricId(orderBy));\n        if (metric) {\n          description += describeMetric(metric);\n        } else {\n          description += 'metric not found';\n        }\n      }\n\n      if (size === '0') {\n        description += ` (${order})`;\n      }\n      return description;\n    }\n\n    case 'histogram': {\n      const interval = bucketAgg.settings?.interval || 1000;\n      const minDocCount = bucketAgg.settings?.min_doc_count || 1;\n\n      return `Interval: ${interval}${minDocCount > 0 ? `, Min Doc Count: ${minDocCount}` : ''}`;\n    }\n\n    case 'filters': {\n      const filters = bucketAgg.settings?.filters || bucketAggregationConfig['filters'].defaultSettings?.filters;\n      return `Filter Queries (${filters!.length})`;\n    }\n\n    case 'geohash_grid': {\n      const precision = Math.max(Math.min(parseInt(bucketAgg.settings?.precision || '5', 10), 12), 1);\n      return `Precision: ${precision}`;\n    }\n\n    case 'date_histogram': {\n      const interval = bucketAgg.settings?.interval || 'auto';\n      const minDocCount = bucketAgg.settings?.min_doc_count || 0;\n      const trimEdges = bucketAgg.settings?.trimEdges || 0;\n\n      let description = `Interval: ${interval}`;\n\n      if (minDocCount > 0) {\n        description += `, Min Doc Count: ${minDocCount}`;\n      }\n\n      if (trimEdges > 0) {\n        description += `, Trim edges: ${trimEdges}`;\n      }\n\n      return description;\n    }\n\n    default:\n      return 'Settings';\n  }\n};\n","import { InlineField, Input, Select } from '@grafana/ui';\nimport React, { ComponentProps, FunctionComponent } from 'react';\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { SettingsEditorContainer } from '../../SettingsEditorContainer';\nimport { changeBucketAggregationSetting } from '../state/actions';\nimport { BucketAggregation } from '../aggregations';\nimport {\n  bucketAggregationConfig,\n  createOrderByOptionsFromMetrics,\n  intervalOptions,\n  orderOptions,\n  sizeOptions,\n} from '../utils';\nimport { FiltersSettingsEditor } from './FiltersSettingsEditor';\nimport { useDescription } from './useDescription';\nimport { useQuery } from '../../ElasticsearchQueryContext';\n\nconst inlineFieldProps: Partial<ComponentProps<typeof InlineField>> = {\n  labelWidth: 16,\n};\n\ninterface Props {\n  bucketAgg: BucketAggregation;\n}\n\nexport const SettingsEditor: FunctionComponent<Props> = ({ bucketAgg }) => {\n  const dispatch = useDispatch();\n  const { metrics } = useQuery();\n  const settingsDescription = useDescription(bucketAgg);\n  const orderBy = createOrderByOptionsFromMetrics(metrics);\n\n  return (\n    <SettingsEditorContainer label={settingsDescription}>\n      {bucketAgg.type === 'terms' && (\n        <>\n          <InlineField label=\"Order\" {...inlineFieldProps}>\n            <Select\n              onChange={(e) => dispatch(changeBucketAggregationSetting(bucketAgg, 'order', e.value!))}\n              options={orderOptions}\n              value={bucketAgg.settings?.order || bucketAggregationConfig[bucketAgg.type].defaultSettings?.order}\n            />\n          </InlineField>\n\n          <InlineField label=\"Size\" {...inlineFieldProps}>\n            <Select\n              onChange={(e) => dispatch(changeBucketAggregationSetting(bucketAgg, 'size', e.value!))}\n              options={sizeOptions}\n              value={bucketAgg.settings?.size || bucketAggregationConfig[bucketAgg.type].defaultSettings?.size}\n              allowCustomValue\n            />\n          </InlineField>\n\n          <InlineField label=\"Min Doc Count\" {...inlineFieldProps}>\n            <Input\n              onBlur={(e) => dispatch(changeBucketAggregationSetting(bucketAgg, 'min_doc_count', e.target.value!))}\n              defaultValue={\n                bucketAgg.settings?.min_doc_count ||\n                bucketAggregationConfig[bucketAgg.type].defaultSettings?.min_doc_count\n              }\n            />\n          </InlineField>\n\n          <InlineField label=\"Order By\" {...inlineFieldProps}>\n            <Select\n              onChange={(e) => dispatch(changeBucketAggregationSetting(bucketAgg, 'orderBy', e.value!))}\n              options={orderBy}\n              value={bucketAgg.settings?.orderBy || bucketAggregationConfig[bucketAgg.type].defaultSettings?.orderBy}\n            />\n          </InlineField>\n\n          <InlineField label=\"Missing\" {...inlineFieldProps}>\n            <Input\n              onBlur={(e) => dispatch(changeBucketAggregationSetting(bucketAgg, 'missing', e.target.value!))}\n              defaultValue={\n                bucketAgg.settings?.missing || bucketAggregationConfig[bucketAgg.type].defaultSettings?.missing\n              }\n            />\n          </InlineField>\n        </>\n      )}\n\n      {bucketAgg.type === 'geohash_grid' && (\n        <InlineField label=\"Precision\" {...inlineFieldProps}>\n          <Input\n            onBlur={(e) => dispatch(changeBucketAggregationSetting(bucketAgg, 'precision', e.target.value!))}\n            defaultValue={\n              bucketAgg.settings?.precision || bucketAggregationConfig[bucketAgg.type].defaultSettings?.precision\n            }\n          />\n        </InlineField>\n      )}\n\n      {bucketAgg.type === 'date_histogram' && (\n        <>\n          <InlineField label=\"Interval\" {...inlineFieldProps}>\n            <Select\n              onChange={(e) => dispatch(changeBucketAggregationSetting(bucketAgg, 'interval', e.value!))}\n              options={intervalOptions}\n              value={bucketAgg.settings?.interval || bucketAggregationConfig[bucketAgg.type].defaultSettings?.interval}\n              allowCustomValue\n            />\n          </InlineField>\n\n          <InlineField label=\"Min Doc Count\" {...inlineFieldProps}>\n            <Input\n              onBlur={(e) => dispatch(changeBucketAggregationSetting(bucketAgg, 'min_doc_count', e.target.value!))}\n              defaultValue={\n                bucketAgg.settings?.min_doc_count ||\n                bucketAggregationConfig[bucketAgg.type].defaultSettings?.min_doc_count\n              }\n            />\n          </InlineField>\n\n          <InlineField label=\"Trim Edges\" {...inlineFieldProps} tooltip=\"Trim the edges on the timeseries datapoints\">\n            <Input\n              onBlur={(e) => dispatch(changeBucketAggregationSetting(bucketAgg, 'trimEdges', e.target.value!))}\n              defaultValue={\n                bucketAgg.settings?.trimEdges || bucketAggregationConfig[bucketAgg.type].defaultSettings?.trimEdges\n              }\n            />\n          </InlineField>\n\n          <InlineField\n            label=\"Offset\"\n            {...inlineFieldProps}\n            tooltip=\"Change the start value of each bucket by the specified positive (+) or negative offset (-) duration, such as 1h for an hour, or 1d for a day\"\n          >\n            <Input\n              onBlur={(e) => dispatch(changeBucketAggregationSetting(bucketAgg, 'offset', e.target.value!))}\n              defaultValue={\n                bucketAgg.settings?.offset || bucketAggregationConfig[bucketAgg.type].defaultSettings?.offset\n              }\n            />\n          </InlineField>\n        </>\n      )}\n\n      {bucketAgg.type === 'histogram' && (\n        <>\n          <InlineField label=\"Interval\" {...inlineFieldProps}>\n            <Input\n              onBlur={(e) => dispatch(changeBucketAggregationSetting(bucketAgg, 'interval', e.target.value!))}\n              defaultValue={\n                bucketAgg.settings?.interval || bucketAggregationConfig[bucketAgg.type].defaultSettings?.interval\n              }\n            />\n          </InlineField>\n\n          <InlineField label=\"Min Doc Count\" {...inlineFieldProps}>\n            <Input\n              onBlur={(e) => dispatch(changeBucketAggregationSetting(bucketAgg, 'min_doc_count', e.target.value!))}\n              defaultValue={\n                bucketAgg.settings?.min_doc_count ||\n                bucketAggregationConfig[bucketAgg.type].defaultSettings?.min_doc_count\n              }\n            />\n          </InlineField>\n        </>\n      )}\n\n      {bucketAgg.type === 'filters' && <FiltersSettingsEditor value={bucketAgg} />}\n    </SettingsEditorContainer>\n  );\n};\n","import { MetricFindValue, SelectableValue } from '@grafana/data';\nimport { InlineSegmentGroup, Segment, SegmentAsync } from '@grafana/ui';\nimport React, { FunctionComponent } from 'react';\nimport { useDispatch } from '../../../hooks/useStatelessReducer';\nimport { useDatasource } from '../ElasticsearchQueryContext';\nimport { segmentStyles } from '../styles';\nimport { BucketAggregation, BucketAggregationType, isBucketAggregationWithField } from './aggregations';\nimport { SettingsEditor } from './SettingsEditor';\nimport { changeBucketAggregationField, changeBucketAggregationType } from './state/actions';\nimport { BucketAggregationAction } from './state/types';\nimport { bucketAggregationConfig } from './utils';\n\nconst bucketAggOptions: Array<SelectableValue<BucketAggregationType>> = Object.entries(bucketAggregationConfig).map(\n  ([key, { label }]) => ({\n    label,\n    value: key as BucketAggregationType,\n  })\n);\n\nconst toSelectableValue = ({ value, text }: MetricFindValue): SelectableValue<string> => ({\n  label: text,\n  value: `${value || text}`,\n});\n\nconst toOption = (bucketAgg: BucketAggregation) => ({\n  label: bucketAggregationConfig[bucketAgg.type].label,\n  value: bucketAgg.type,\n});\n\ninterface QueryMetricEditorProps {\n  value: BucketAggregation;\n}\n\nexport const BucketAggregationEditor: FunctionComponent<QueryMetricEditorProps> = ({ value }) => {\n  const datasource = useDatasource();\n  const dispatch = useDispatch<BucketAggregationAction>();\n\n  // TODO: Move this in a separate hook (and simplify)\n  const getFields = async () => {\n    const get = () => {\n      switch (value.type) {\n        case 'date_histogram':\n          return datasource.getFields('date');\n        case 'geohash_grid':\n          return datasource.getFields('geo_point');\n        default:\n          return datasource.getFields();\n      }\n    };\n\n    return (await get().toPromise()).map(toSelectableValue);\n  };\n\n  return (\n    <>\n      <InlineSegmentGroup>\n        <Segment\n          className={segmentStyles}\n          options={bucketAggOptions}\n          onChange={(e) => dispatch(changeBucketAggregationType(value.id, e.value!))}\n          value={toOption(value)}\n        />\n\n        {isBucketAggregationWithField(value) && (\n          <SegmentAsync\n            className={segmentStyles}\n            loadOptions={getFields}\n            onChange={(e) => dispatch(changeBucketAggregationField(value.id, e.value))}\n            placeholder=\"Select Field\"\n            value={value.field}\n          />\n        )}\n      </InlineSegmentGroup>\n\n      <SettingsEditor bucketAgg={value} />\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { BucketAggregationEditor } from './BucketAggregationEditor';\nimport { useDispatch } from '../../../hooks/useStatelessReducer';\nimport { addBucketAggregation, removeBucketAggregation } from './state/actions';\nimport { BucketAggregationAction } from './state/types';\nimport { BucketAggregation } from './aggregations';\nimport { useQuery } from '../ElasticsearchQueryContext';\nimport { QueryEditorRow } from '../QueryEditorRow';\nimport { IconButton } from '../../IconButton';\n\ninterface Props {\n  nextId: BucketAggregation['id'];\n}\n\nexport const BucketAggregationsEditor: FunctionComponent<Props> = ({ nextId }) => {\n  const dispatch = useDispatch<BucketAggregationAction>();\n  const { bucketAggs } = useQuery();\n  const totalBucketAggs = bucketAggs?.length || 0;\n\n  return (\n    <>\n      {bucketAggs!.map((bucketAgg, index) => (\n        <QueryEditorRow\n          key={bucketAgg.id}\n          label={index === 0 ? 'Group By' : 'Then By'}\n          onRemoveClick={totalBucketAggs > 1 && (() => dispatch(removeBucketAggregation(bucketAgg.id)))}\n        >\n          <BucketAggregationEditor value={bucketAgg} />\n\n          {index === 0 && (\n            <IconButton iconName=\"plus\" onClick={() => dispatch(addBucketAggregation(nextId))} label=\"add\" />\n          )}\n        </QueryEditorRow>\n      ))}\n    </>\n  );\n};\n","import { useMemo } from 'react';\nimport { useQuery } from '../components/QueryEditor/ElasticsearchQueryContext';\nimport { BucketAggregation } from '../components/QueryEditor/BucketAggregationsEditor/aggregations';\nimport { MetricAggregation } from '../components/QueryEditor/MetricAggregationsEditor/aggregations';\n\nconst toId = <T extends { id: unknown }>(e: T): T['id'] => e.id;\n\nconst toInt = (idString: string) => parseInt(idString, 10);\n\nexport const useNextId = (): MetricAggregation['id'] | BucketAggregation['id'] => {\n  const { metrics, bucketAggs } = useQuery();\n\n  return useMemo(\n    () =>\n      (Math.max(...[...(metrics?.map(toId) || ['0']), ...(bucketAggs?.map(toId) || ['0'])].map(toInt)) + 1).toString(),\n    [metrics, bucketAggs]\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { QueryEditorProps } from '@grafana/data';\nimport { ElasticDatasource } from '../../datasource';\nimport { ElasticsearchOptions, ElasticsearchQuery } from '../../types';\nimport { ElasticsearchProvider } from './ElasticsearchQueryContext';\nimport { InlineField, InlineFieldRow, Input, QueryField } from '@grafana/ui';\nimport { changeAliasPattern, changeQuery } from './state';\nimport { MetricAggregationsEditor } from './MetricAggregationsEditor';\nimport { BucketAggregationsEditor } from './BucketAggregationsEditor';\nimport { useDispatch } from '../../hooks/useStatelessReducer';\nimport { useNextId } from '../../hooks/useNextId';\n\nexport type ElasticQueryEditorProps = QueryEditorProps<ElasticDatasource, ElasticsearchQuery, ElasticsearchOptions>;\n\nexport const QueryEditor: FunctionComponent<ElasticQueryEditorProps> = ({\n  query,\n  onChange,\n  onRunQuery,\n  datasource,\n}) => (\n  <ElasticsearchProvider datasource={datasource} onChange={onChange} onRunQuery={onRunQuery} query={query}>\n    <QueryEditorForm value={query} />\n  </ElasticsearchProvider>\n);\n\ninterface Props {\n  value: ElasticsearchQuery;\n}\n\nconst QueryEditorForm: FunctionComponent<Props> = ({ value }) => {\n  const dispatch = useDispatch();\n  const nextId = useNextId();\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Query\" labelWidth={17} grow>\n          <QueryField\n            query={value.query}\n            // By default QueryField calls onChange if onBlur is not defined, this will trigger a rerender\n            // And slate will claim the focus, making it impossible to leave the field.\n            onBlur={() => {}}\n            onChange={(query) => dispatch(changeQuery(query))}\n            placeholder=\"Lucene Query\"\n            portalOrigin=\"elasticsearch\"\n          />\n        </InlineField>\n        <InlineField label=\"Alias\" labelWidth={15}>\n          <Input\n            id={`ES-query-${value.refId}_alias`}\n            placeholder=\"Alias Pattern\"\n            onBlur={(e) => dispatch(changeAliasPattern(e.currentTarget.value))}\n            defaultValue={value.alias}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <MetricAggregationsEditor nextId={nextId} />\n      <BucketAggregationsEditor nextId={nextId} />\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { ElasticDatasource } from './datasource';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\n\nclass ElasticAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin(ElasticDatasource)\n  .setQueryEditor(QueryEditor)\n  .setConfigEditor(ConfigEditor)\n  .setAnnotationQueryCtrl(ElasticAnnotationsQueryCtrl);\n","import { Grammar } from 'prismjs';\nimport { CompletionItem } from '@grafana/ui';\n\nexport const RATE_RANGES: CompletionItem[] = [\n  { label: '$__interval', sortText: '$__interval' },\n  { label: '$__rate_interval', sortText: '$__rate_interval' },\n  { label: '1m', sortText: '00:01:00' },\n  { label: '5m', sortText: '00:05:00' },\n  { label: '10m', sortText: '00:10:00' },\n  { label: '30m', sortText: '00:30:00' },\n  { label: '1h', sortText: '01:00:00' },\n  { label: '1d', sortText: '24:00:00' },\n];\n\nexport const OPERATORS = ['by', 'group_left', 'group_right', 'ignoring', 'on', 'offset', 'without'];\n\nconst AGGREGATION_OPERATORS: CompletionItem[] = [\n  {\n    label: 'sum',\n    insertText: 'sum',\n    documentation: 'Calculate sum over dimensions',\n  },\n  {\n    label: 'min',\n    insertText: 'min',\n    documentation: 'Select minimum over dimensions',\n  },\n  {\n    label: 'max',\n    insertText: 'max',\n    documentation: 'Select maximum over dimensions',\n  },\n  {\n    label: 'avg',\n    insertText: 'avg',\n    documentation: 'Calculate the average over dimensions',\n  },\n  {\n    label: 'stddev',\n    insertText: 'stddev',\n    documentation: 'Calculate population standard deviation over dimensions',\n  },\n  {\n    label: 'stdvar',\n    insertText: 'stdvar',\n    documentation: 'Calculate population standard variance over dimensions',\n  },\n  {\n    label: 'count',\n    insertText: 'count',\n    documentation: 'Count number of elements in the vector',\n  },\n  {\n    label: 'count_values',\n    insertText: 'count_values',\n    documentation: 'Count number of elements with the same value',\n  },\n  {\n    label: 'bottomk',\n    insertText: 'bottomk',\n    documentation: 'Smallest k elements by sample value',\n  },\n  {\n    label: 'topk',\n    insertText: 'topk',\n    documentation: 'Largest k elements by sample value',\n  },\n  {\n    label: 'quantile',\n    insertText: 'quantile',\n    documentation: 'Calculate φ-quantile (0 ≤ φ ≤ 1) over dimensions',\n  },\n];\n\nexport const FUNCTIONS = [\n  ...AGGREGATION_OPERATORS,\n  {\n    insertText: 'abs',\n    label: 'abs',\n    detail: 'abs(v instant-vector)',\n    documentation: 'Returns the input vector with all sample values converted to their absolute value.',\n  },\n  {\n    insertText: 'absent',\n    label: 'absent',\n    detail: 'absent(v instant-vector)',\n    documentation:\n      'Returns an empty vector if the vector passed to it has any elements and a 1-element vector with the value 1 if the vector passed to it has no elements. This is useful for alerting on when no time series exist for a given metric name and label combination.',\n  },\n  {\n    insertText: 'ceil',\n    label: 'ceil',\n    detail: 'ceil(v instant-vector)',\n    documentation: 'Rounds the sample values of all elements in `v` up to the nearest integer.',\n  },\n  {\n    insertText: 'changes',\n    label: 'changes',\n    detail: 'changes(v range-vector)',\n    documentation:\n      'For each input time series, `changes(v range-vector)` returns the number of times its value has changed within the provided time range as an instant vector.',\n  },\n  {\n    insertText: 'clamp_max',\n    label: 'clamp_max',\n    detail: 'clamp_max(v instant-vector, max scalar)',\n    documentation: 'Clamps the sample values of all elements in `v` to have an upper limit of `max`.',\n  },\n  {\n    insertText: 'clamp_min',\n    label: 'clamp_min',\n    detail: 'clamp_min(v instant-vector, min scalar)',\n    documentation: 'Clamps the sample values of all elements in `v` to have a lower limit of `min`.',\n  },\n  {\n    insertText: 'count_scalar',\n    label: 'count_scalar',\n    detail: 'count_scalar(v instant-vector)',\n    documentation:\n      'Returns the number of elements in a time series vector as a scalar. This is in contrast to the `count()` aggregation operator, which always returns a vector (an empty one if the input vector is empty) and allows grouping by labels via a `by` clause.',\n  },\n  {\n    insertText: 'day_of_month',\n    label: 'day_of_month',\n    detail: 'day_of_month(v=vector(time()) instant-vector)',\n    documentation: 'Returns the day of the month for each of the given times in UTC. Returned values are from 1 to 31.',\n  },\n  {\n    insertText: 'day_of_week',\n    label: 'day_of_week',\n    detail: 'day_of_week(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the day of the week for each of the given times in UTC. Returned values are from 0 to 6, where 0 means Sunday etc.',\n  },\n  {\n    insertText: 'days_in_month',\n    label: 'days_in_month',\n    detail: 'days_in_month(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns number of days in the month for each of the given times in UTC. Returned values are from 28 to 31.',\n  },\n  {\n    insertText: 'delta',\n    label: 'delta',\n    detail: 'delta(v range-vector)',\n    documentation:\n      'Calculates the difference between the first and last value of each time series element in a range vector `v`, returning an instant vector with the given deltas and equivalent labels. The delta is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if the sample values are all integers.',\n  },\n  {\n    insertText: 'deriv',\n    label: 'deriv',\n    detail: 'deriv(v range-vector)',\n    documentation:\n      'Calculates the per-second derivative of the time series in a range vector `v`, using simple linear regression.',\n  },\n  {\n    insertText: 'drop_common_labels',\n    label: 'drop_common_labels',\n    detail: 'drop_common_labels(instant-vector)',\n    documentation: 'Drops all labels that have the same name and value across all series in the input vector.',\n  },\n  {\n    insertText: 'exp',\n    label: 'exp',\n    detail: 'exp(v instant-vector)',\n    documentation:\n      'Calculates the exponential function for all elements in `v`.\\nSpecial cases are:\\n* `Exp(+Inf) = +Inf` \\n* `Exp(NaN) = NaN`',\n  },\n  {\n    insertText: 'floor',\n    label: 'floor',\n    detail: 'floor(v instant-vector)',\n    documentation: 'Rounds the sample values of all elements in `v` down to the nearest integer.',\n  },\n  {\n    insertText: 'histogram_quantile',\n    label: 'histogram_quantile',\n    detail: 'histogram_quantile(φ float, b instant-vector)',\n    documentation:\n      'Calculates the φ-quantile (0 ≤ φ ≤ 1) from the buckets `b` of a histogram. The samples in `b` are the counts of observations in each bucket. Each sample must have a label `le` where the label value denotes the inclusive upper bound of the bucket. (Samples without such a label are silently ignored.) The histogram metric type automatically provides time series with the `_bucket` suffix and the appropriate labels.',\n  },\n  {\n    insertText: 'holt_winters',\n    label: 'holt_winters',\n    detail: 'holt_winters(v range-vector, sf scalar, tf scalar)',\n    documentation:\n      'Produces a smoothed value for time series based on the range in `v`. The lower the smoothing factor `sf`, the more importance is given to old data. The higher the trend factor `tf`, the more trends in the data is considered. Both `sf` and `tf` must be between 0 and 1.',\n  },\n  {\n    insertText: 'hour',\n    label: 'hour',\n    detail: 'hour(v=vector(time()) instant-vector)',\n    documentation: 'Returns the hour of the day for each of the given times in UTC. Returned values are from 0 to 23.',\n  },\n  {\n    insertText: 'idelta',\n    label: 'idelta',\n    detail: 'idelta(v range-vector)',\n    documentation:\n      'Calculates the difference between the last two samples in the range vector `v`, returning an instant vector with the given deltas and equivalent labels.',\n  },\n  {\n    insertText: 'increase',\n    label: 'increase',\n    detail: 'increase(v range-vector)',\n    documentation:\n      'Calculates the increase in the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. The increase is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if a counter increases only by integer increments.',\n  },\n  {\n    insertText: 'irate',\n    label: 'irate',\n    detail: 'irate(v range-vector)',\n    documentation:\n      'Calculates the per-second instant rate of increase of the time series in the range vector. This is based on the last two data points. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for.',\n  },\n  {\n    insertText: 'label_replace',\n    label: 'label_replace',\n    detail: 'label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)',\n    documentation:\n      \"For each timeseries in `v`, `label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)`  matches the regular expression `regex` against the label `src_label`.  If it matches, then the timeseries is returned with the label `dst_label` replaced by the expansion of `replacement`. `$1` is replaced with the first matching subgroup, `$2` with the second etc. If the regular expression doesn't match then the timeseries is returned unchanged.\",\n  },\n  {\n    insertText: 'ln',\n    label: 'ln',\n    detail: 'ln(v instant-vector)',\n    documentation:\n      'calculates the natural logarithm for all elements in `v`.\\nSpecial cases are:\\n * `ln(+Inf) = +Inf`\\n * `ln(0) = -Inf`\\n * `ln(x < 0) = NaN`\\n * `ln(NaN) = NaN`',\n  },\n  {\n    insertText: 'log2',\n    label: 'log2',\n    detail: 'log2(v instant-vector)',\n    documentation:\n      'Calculates the binary logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.',\n  },\n  {\n    insertText: 'log10',\n    label: 'log10',\n    detail: 'log10(v instant-vector)',\n    documentation:\n      'Calculates the decimal logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.',\n  },\n  {\n    insertText: 'minute',\n    label: 'minute',\n    detail: 'minute(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the minute of the hour for each of the given times in UTC. Returned values are from 0 to 59.',\n  },\n  {\n    insertText: 'month',\n    label: 'month',\n    detail: 'month(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the month of the year for each of the given times in UTC. Returned values are from 1 to 12, where 1 means January etc.',\n  },\n  {\n    insertText: 'predict_linear',\n    label: 'predict_linear',\n    detail: 'predict_linear(v range-vector, t scalar)',\n    documentation:\n      'Predicts the value of time series `t` seconds from now, based on the range vector `v`, using simple linear regression.',\n  },\n  {\n    insertText: 'rate',\n    label: 'rate',\n    detail: 'rate(v range-vector)',\n    documentation:\n      \"Calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. Also, the calculation extrapolates to the ends of the time range, allowing for missed scrapes or imperfect alignment of scrape cycles with the range's time period.\",\n  },\n  {\n    insertText: 'resets',\n    label: 'resets',\n    detail: 'resets(v range-vector)',\n    documentation:\n      'For each input time series, `resets(v range-vector)` returns the number of counter resets within the provided time range as an instant vector. Any decrease in the value between two consecutive samples is interpreted as a counter reset.',\n  },\n  {\n    insertText: 'round',\n    label: 'round',\n    detail: 'round(v instant-vector, to_nearest=1 scalar)',\n    documentation:\n      'Rounds the sample values of all elements in `v` to the nearest integer. Ties are resolved by rounding up. The optional `to_nearest` argument allows specifying the nearest multiple to which the sample values should be rounded. This multiple may also be a fraction.',\n  },\n  {\n    insertText: 'scalar',\n    label: 'scalar',\n    detail: 'scalar(v instant-vector)',\n    documentation:\n      'Given a single-element input vector, `scalar(v instant-vector)` returns the sample value of that single element as a scalar. If the input vector does not have exactly one element, `scalar` will return `NaN`.',\n  },\n  {\n    insertText: 'sort',\n    label: 'sort',\n    detail: 'sort(v instant-vector)',\n    documentation: 'Returns vector elements sorted by their sample values, in ascending order.',\n  },\n  {\n    insertText: 'sort_desc',\n    label: 'sort_desc',\n    detail: 'sort_desc(v instant-vector)',\n    documentation: 'Returns vector elements sorted by their sample values, in descending order.',\n  },\n  {\n    insertText: 'sqrt',\n    label: 'sqrt',\n    detail: 'sqrt(v instant-vector)',\n    documentation: 'Calculates the square root of all elements in `v`.',\n  },\n  {\n    insertText: 'time',\n    label: 'time',\n    detail: 'time()',\n    documentation:\n      'Returns the number of seconds since January 1, 1970 UTC. Note that this does not actually return the current time, but the time at which the expression is to be evaluated.',\n  },\n  {\n    insertText: 'vector',\n    label: 'vector',\n    detail: 'vector(s scalar)',\n    documentation: 'Returns the scalar `s` as a vector with no labels.',\n  },\n  {\n    insertText: 'year',\n    label: 'year',\n    detail: 'year(v=vector(time()) instant-vector)',\n    documentation: 'Returns the year for each of the given times in UTC.',\n  },\n  {\n    insertText: 'avg_over_time',\n    label: 'avg_over_time',\n    detail: 'avg_over_time(range-vector)',\n    documentation: 'The average value of all points in the specified interval.',\n  },\n  {\n    insertText: 'min_over_time',\n    label: 'min_over_time',\n    detail: 'min_over_time(range-vector)',\n    documentation: 'The minimum value of all points in the specified interval.',\n  },\n  {\n    insertText: 'max_over_time',\n    label: 'max_over_time',\n    detail: 'max_over_time(range-vector)',\n    documentation: 'The maximum value of all points in the specified interval.',\n  },\n  {\n    insertText: 'sum_over_time',\n    label: 'sum_over_time',\n    detail: 'sum_over_time(range-vector)',\n    documentation: 'The sum of all values in the specified interval.',\n  },\n  {\n    insertText: 'count_over_time',\n    label: 'count_over_time',\n    detail: 'count_over_time(range-vector)',\n    documentation: 'The count of all values in the specified interval.',\n  },\n  {\n    insertText: 'quantile_over_time',\n    label: 'quantile_over_time',\n    detail: 'quantile_over_time(scalar, range-vector)',\n    documentation: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval.',\n  },\n  {\n    insertText: 'stddev_over_time',\n    label: 'stddev_over_time',\n    detail: 'stddev_over_time(range-vector)',\n    documentation: 'The population standard deviation of the values in the specified interval.',\n  },\n  {\n    insertText: 'stdvar_over_time',\n    label: 'stdvar_over_time',\n    detail: 'stdvar_over_time(range-vector)',\n    documentation: 'The population standard variance of the values in the specified interval.',\n  },\n];\n\nconst tokenizer: Grammar = {\n  comment: {\n    pattern: /#.*/,\n  },\n  'context-aggregation': {\n    pattern: /((by|without)\\s*)\\([^)]*\\)/, // by ()\n    lookbehind: true,\n    inside: {\n      'label-key': {\n        pattern: /[^(),\\s][^,)]*[^),\\s]*/,\n        alias: 'attr-name',\n      },\n      punctuation: /[()]/,\n    },\n  },\n  'context-labels': {\n    pattern: /\\{[^}]*(?=}?)/,\n    greedy: true,\n    inside: {\n      comment: {\n        pattern: /#.*/,\n      },\n      'label-key': {\n        pattern: /[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/,\n        alias: 'attr-name',\n        greedy: true,\n      },\n      'label-value': {\n        pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'attr-value',\n      },\n      punctuation: /[{]/,\n    },\n  },\n  function: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  'context-range': [\n    {\n      pattern: /\\[[^\\]]*(?=])/, // [1m]\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n    {\n      pattern: /(offset\\s+)\\w+/, // offset 1m\n      lookbehind: true,\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n  ],\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  operator: new RegExp(`/[-+*/=%^~]|&&?|\\\\|?\\\\||!=?|<(?:=>?|<|>)?|>[>=]?|\\\\b(?:${OPERATORS.join('|')})\\\\b`, 'i'),\n  punctuation: /[{};()`,.]/,\n};\n\nexport default tokenizer;\n","import { useEffect, useRef } from 'react';\nvar usePrevious = function (state) {\n    var ref = useRef();\n    useEffect(function () {\n        ref.current = state;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n"],"sourceRoot":""}