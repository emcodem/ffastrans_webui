{"version":3,"sources":["webpack:///./public/app/core/components/TraceToLogsSettings.tsx","webpack:///./public/app/plugins/datasource/tempo/datasource.ts","webpack:///./public/app/plugins/datasource/tempo/QueryField.tsx","webpack:///./public/app/plugins/datasource/tempo/module.ts","webpack:///./public/app/plugins/datasource/tempo/ConfigEditor.tsx"],"names":["TraceToLogsSettings","options","onOptionsChange","styles","useStyles","getStyles","className","infoText","tooltip","pluginId","current","jsonData","tracesToLogs","datasourceUid","noDefault","onChange","ds","updateDatasourcePluginJsonDataOption","uid","tags","theme","css","spacing","md","colors","textSemiWeak","TempoDatasource","instanceSettings","timeSrv","getTimeSrv","url","params","this","_request","hideFromInspector","toPromise","res","data","id","targets","query","encodeURIComponent","pipe","map","response","MutableDataFrame","fields","name","type","FieldType","trace","values","meta","preferredVisualisationType","of","status","message","range","timeRange","start","getTime","from","end","to","apiUrl","baseUrl","serializeParams","req","length","getBackendSrv","datasourceRequest","DataSourceApi","date","roundUp","dateMath","parse","valueOf","TempoQueryField","props","FormField","label","labelWidth","inputEl","style","width","value","e","currentTarget","React","PureComponent","plugin","DataSourcePlugin","setConfigEditor","defaultUrl","dataSourceConfig","showAccessOptions","setExploreQueryField"],"mappings":"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","file":"tempoPlugin.63a9c1d648180e457252.js","sourcesContent":["import {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { InlineFormLabel, TagsInput, useStyles } from '@grafana/ui';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { DataSourcePicker } from './Select/DataSourcePicker';\n\nexport interface TraceToLogsOptions {\n  datasourceUid?: string;\n  tags?: string[];\n}\n\nexport interface TraceToLogsData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToLogsData> {}\n\nexport function TraceToLogsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Trace to logs</h3>\n\n      <div className={styles.infoText}>\n        Trace to logs let&apos;s you navigate from a trace span to the selected data source&apos;s log.\n      </div>\n\n      <div className=\"gf-form\">\n        <InlineFormLabel tooltip=\"The data source the trace is going to navigate to\">Data source</InlineFormLabel>\n        <DataSourcePicker\n          pluginId=\"loki\"\n          current={options.jsonData.tracesToLogs?.datasourceUid}\n          noDefault={true}\n          onChange={(ds) =>\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n              datasourceUid: ds.uid,\n              tags: options.jsonData.tracesToLogs?.tags,\n            })\n          }\n        />\n      </div>\n\n      <div className=\"gf-form\">\n        <InlineFormLabel tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\">\n          Tags\n        </InlineFormLabel>\n        <TagsInput\n          tags={options.jsonData.tracesToLogs?.tags}\n          onChange={(tags) =>\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n              datasourceUid: options.jsonData.tracesToLogs?.datasourceUid,\n              tags: tags,\n            })\n          }\n        />\n      </div>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n});\n","import {\n  dateMath,\n  DateTime,\n  MutableDataFrame,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataQuery,\n  FieldType,\n} from '@grafana/data';\nimport { getBackendSrv, BackendSrvRequest } from '@grafana/runtime';\nimport { Observable, from, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { serializeParams } from 'app/core/utils/fetch';\n\nexport type TempoQuery = {\n  query: string;\n} & DataQuery;\n\nexport class TempoDatasource extends DataSourceApi<TempoQuery> {\n  constructor(private instanceSettings: DataSourceInstanceSettings, private readonly timeSrv: TimeSrv = getTimeSrv()) {\n    super(instanceSettings);\n  }\n\n  async metadataRequest(url: string, params?: Record<string, any>): Promise<any> {\n    const res = await this._request(url, params, { hideFromInspector: true }).toPromise();\n    return res.data.data;\n  }\n\n  query(options: DataQueryRequest<TempoQuery>): Observable<DataQueryResponse> {\n    // At this moment we expect only one target. In case we somehow change the UI to be able to show multiple\n    // traces at one we need to change this.\n    const id = options.targets[0]?.query;\n    if (id) {\n      return this._request(`/api/traces/${encodeURIComponent(id)}`).pipe(\n        map((response) => {\n          return {\n            data: [\n              new MutableDataFrame({\n                fields: [\n                  {\n                    name: 'trace',\n                    type: FieldType.trace,\n                    values: response?.data?.data || [],\n                  },\n                ],\n                meta: {\n                  preferredVisualisationType: 'trace',\n                },\n              }),\n            ],\n          };\n        })\n      );\n    } else {\n      return of({\n        data: [\n          new MutableDataFrame({\n            fields: [\n              {\n                name: 'trace',\n                type: FieldType.trace,\n                values: [],\n              },\n            ],\n            meta: {\n              preferredVisualisationType: 'trace',\n            },\n          }),\n        ],\n      });\n    }\n  }\n\n  async testDatasource(): Promise<any> {\n    try {\n      await this._request(`/api/traces/random`).toPromise();\n    } catch (e) {\n      // If all went well this request will get back with 400 - Bad request\n      if (e?.status !== 400) {\n        throw e;\n      }\n    }\n    return { status: 'success', message: 'Data source is working' };\n  }\n\n  getTimeRange(): { start: number; end: number } {\n    const range = this.timeSrv.timeRange();\n    return {\n      start: getTime(range.from, false),\n      end: getTime(range.to, true),\n    };\n  }\n\n  getQueryDisplayText(query: TempoQuery) {\n    return query.query;\n  }\n\n  private _request(apiUrl: string, data?: any, options?: Partial<BackendSrvRequest>): Observable<Record<string, any>> {\n    // Hack for proxying metadata requests\n    const baseUrl = `/api/datasources/proxy/${this.instanceSettings.id}`;\n    const params = data ? serializeParams(data) : '';\n    const url = `${baseUrl}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return from(getBackendSrv().datasourceRequest(req));\n  }\n}\n\nfunction getTime(date: string | DateTime, roundUp: boolean) {\n  if (typeof date === 'string') {\n    date = dateMath.parse(date, roundUp)!;\n  }\n  return date.valueOf() * 1000;\n}\n","import React from 'react';\nimport { TempoDatasource, TempoQuery } from './datasource';\n\nimport { ExploreQueryFieldProps } from '@grafana/data';\nimport { LegacyForms } from '@grafana/ui';\n\ntype Props = ExploreQueryFieldProps<TempoDatasource, TempoQuery>;\nexport class TempoQueryField extends React.PureComponent<Props> {\n  render() {\n    const { query, onChange } = this.props;\n\n    return (\n      <LegacyForms.FormField\n        label=\"Trace ID\"\n        labelWidth={4}\n        inputEl={\n          <div className=\"slate-query-field__wrapper\">\n            <div className=\"slate-query-field\">\n              <input\n                style={{ width: '100%' }}\n                value={query.query || ''}\n                onChange={(e) =>\n                  onChange({\n                    ...query,\n                    query: e.currentTarget.value,\n                  })\n                }\n              />\n            </div>\n          </div>\n        }\n      />\n    );\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { TempoDatasource } from './datasource';\nimport { TempoQueryField } from './QueryField';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport const plugin = new DataSourcePlugin(TempoDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setExploreQueryField(TempoQueryField);\n","import { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { TraceToLogsSettings } from 'app/core/components/TraceToLogsSettings';\nimport React from 'react';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor: React.FC<Props> = ({ options, onOptionsChange }) => {\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:16686\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <TraceToLogsSettings options={options} onOptionsChange={onOptionsChange} />\n    </>\n  );\n};\n"],"sourceRoot":""}