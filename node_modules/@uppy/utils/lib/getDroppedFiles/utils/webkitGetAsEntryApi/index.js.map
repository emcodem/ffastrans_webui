{"version":3,"names":["getFilesAndDirectoriesFromDirectory","getAsFileSystemHandleFromEntry","entry","logDropError","kind","isFile","isDirectory","undefined","name","getFile","Promise","resolve","reject","file","values","directoryReader","createReader","entries","onSuccess","dirEntries","map","isSameEntry","createPromiseToAddFileOrParseDirectory","relativePath","lastResortFile","getNextRelativePath","handle","e","getFilesFromDataTransfer","dataTransfer","fileSystemHandles","all","Array","from","items","item","_fileSystemHandle","fileSystemHandle","getAsEntry","webkitGetAsEntry","getAsFile","err"],"sources":["index.ts"],"sourcesContent":["import getFilesAndDirectoriesFromDirectory from './getFilesAndDirectoriesFromDirectory.ts'\n\ninterface FileSystemFileHandle extends FileSystemHandle {\n  getFile(): Promise<File>\n}\ninterface FileSystemDirectoryHandle extends FileSystemHandle {\n  values(): AsyncGenerator<\n    FileSystemDirectoryHandle | FileSystemFileHandle,\n    void,\n    undefined\n  >\n}\n\n/**\n * Polyfill for the new (experimental) getAsFileSystemHandle API (using the popular webkitGetAsEntry behind the scenes)\n * so that we can switch to the getAsFileSystemHandle API once it (hopefully) becomes standard\n */\nfunction getAsFileSystemHandleFromEntry(\n  entry: FileSystemEntry | null | undefined,\n  logDropError: Parameters<typeof getFilesAndDirectoriesFromDirectory>[2],\n): FileSystemFileHandle | FileSystemDirectoryHandle | null | undefined {\n  if (entry == null) return entry\n  return {\n    kind:\n      // eslint-disable-next-line no-nested-ternary\n      entry.isFile ? 'file'\n      : entry.isDirectory ? 'directory'\n      : (undefined as never),\n    name: entry.name,\n    getFile(): ReturnType<FileSystemFileHandle['getFile']> {\n      return new Promise((resolve, reject) =>\n        (entry as FileSystemFileEntry).file(resolve, reject),\n      )\n    },\n    async *values(): ReturnType<FileSystemDirectoryHandle['values']> {\n      // If the file is a directory.\n      const directoryReader = (entry as FileSystemDirectoryEntry).createReader()\n      const entries = await new Promise<\n        Array<NonNullable<ReturnType<typeof getAsFileSystemHandleFromEntry>>>\n      >((resolve) => {\n        getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {\n          onSuccess: (dirEntries) =>\n            resolve(\n              dirEntries.map(\n                (file) => getAsFileSystemHandleFromEntry(file, logDropError)!,\n              ),\n            ),\n        })\n      })\n      yield* entries\n    },\n    isSameEntry: undefined as any as FileSystemDirectoryHandle['isSameEntry'],\n  }\n}\n\nasync function* createPromiseToAddFileOrParseDirectory(\n  entry: FileSystemFileHandle | FileSystemDirectoryHandle,\n  relativePath: string,\n  lastResortFile: File | null | undefined = undefined,\n): AsyncGenerator<File> {\n  const getNextRelativePath = (): string => `${relativePath}/${entry.name}`\n\n  // For each dropped item, - make sure it's a file/directory, and start deepening in!\n  if (entry.kind === 'file') {\n    const file = await (entry as FileSystemFileHandle).getFile()\n    if (file != null) {\n      ;(file as any).relativePath = relativePath ? getNextRelativePath() : null\n      yield file\n    } else if (lastResortFile != null) yield lastResortFile\n  } else if (entry.kind === 'directory') {\n    for await (const handle of (entry as FileSystemDirectoryHandle).values()) {\n      // Recurse on the directory, appending the dir name to the relative path\n      yield* createPromiseToAddFileOrParseDirectory(\n        handle,\n        relativePath ? getNextRelativePath() : entry.name,\n      )\n    }\n  } else if (lastResortFile != null) yield lastResortFile\n}\n\n/**\n * Load all files from data transfer, and recursively read any directories.\n * Note that IE is not supported for drag-drop, because IE doesn't support Data Transfers\n *\n * @param {DataTransfer} dataTransfer\n * @param {*} logDropError on error\n */\nexport default async function* getFilesFromDataTransfer(\n  dataTransfer: DataTransfer,\n  logDropError: Parameters<typeof getFilesAndDirectoriesFromDirectory>[2],\n): ReturnType<typeof createPromiseToAddFileOrParseDirectory> {\n  // Retrieving the dropped items must happen synchronously\n  // otherwise only the first item gets treated and the other ones are garbage collected.\n  // https://github.com/transloadit/uppy/pull/3998\n  const fileSystemHandles = await Promise.all(\n    Array.from(dataTransfer.items, async (item) => {\n      let fileSystemHandle:\n        | FileSystemFileHandle\n        | FileSystemDirectoryHandle\n        | null\n        | undefined\n\n      // TODO enable getAsFileSystemHandle API once we can get it working with subdirectories\n      // IMPORTANT: Need to check isSecureContext *before* calling getAsFileSystemHandle\n      // or else Chrome will crash when running in HTTP: https://github.com/transloadit/uppy/issues/4133\n      // if (window.isSecureContext && item.getAsFileSystemHandle != null)\n      // fileSystemHandle = await item.getAsFileSystemHandle()\n\n      // `webkitGetAsEntry` exists in all popular browsers (including non-WebKit browsers),\n      // however it may be renamed to getAsEntry() in the future, so you should code defensively, looking for both.\n      // from https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/webkitGetAsEntry\n      const getAsEntry = (): ReturnType<\n        DataTransferItem['webkitGetAsEntry']\n      > =>\n        typeof (item as any).getAsEntry === 'function' ?\n          (item as any).getAsEntry()\n        : item.webkitGetAsEntry()\n      // eslint-disable-next-line prefer-const\n      fileSystemHandle ??= getAsFileSystemHandleFromEntry(\n        getAsEntry(),\n        logDropError,\n      )\n\n      return {\n        fileSystemHandle,\n        lastResortFile: item.getAsFile(), // can be used as a fallback in case other methods fail\n      }\n    }),\n  )\n\n  for (const { lastResortFile, fileSystemHandle } of fileSystemHandles) {\n    // fileSystemHandle and lastResortFile can be null when we drop an url.\n    if (fileSystemHandle != null) {\n      try {\n        yield* createPromiseToAddFileOrParseDirectory(\n          fileSystemHandle,\n          '',\n          lastResortFile,\n        )\n      } catch (err) {\n        // Example: If dropping a symbolic link, Chromium will throw:\n        // \"DOMException: A requested file or directory could not be found at the time an operation was processed.\",\n        // So we will use lastResortFile instead. See https://github.com/transloadit/uppy/issues/3505.\n        if (lastResortFile != null) {\n          yield lastResortFile\n        } else {\n          logDropError(err)\n        }\n      }\n    } else if (lastResortFile != null) yield lastResortFile\n  }\n}\n"],"mappings":"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","ignoreList":[]}