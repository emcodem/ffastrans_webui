{"version":3,"names":["DATA_URL_PATTERN","dataURItoBlob","dataURI","opts","toFile","_ref","_opts$mimeType","dataURIData","exec","mimeType","data","binary","atob","decodeURIComponent","bytes","Uint8Array","length","i","charCodeAt","File","name","type","Blob"],"sources":["dataURItoBlob.ts"],"sourcesContent":["const DATA_URL_PATTERN = /^data:([^/]+\\/[^,;]+(?:[^,]*?))(;base64)?,([\\s\\S]*)$/\n\ntype dataURItoBlobOptions = { mimeType?: string; name?: string }\n\nfunction dataURItoBlob(dataURI: string, opts: dataURItoBlobOptions): Blob\nfunction dataURItoBlob(\n  dataURI: string,\n  opts: dataURItoBlobOptions,\n  toFile: true,\n): File\n\nfunction dataURItoBlob(\n  dataURI: string,\n  opts: dataURItoBlobOptions,\n  toFile?: boolean,\n): Blob | File {\n  // get the base64 data\n  const dataURIData = DATA_URL_PATTERN.exec(dataURI)\n\n  // user may provide mime type, if not get it from data URI\n  const mimeType = opts.mimeType ?? dataURIData?.[1] ?? 'plain/text'\n\n  let data!: BlobPart[] // We add `!` to tell TS we're OK with `data` being not defined when the dataURI is invalid.\n  if (dataURIData?.[2] != null) {\n    const binary = atob(decodeURIComponent(dataURIData[3]))\n    const bytes = new Uint8Array(binary.length)\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i)\n    }\n    data = [bytes]\n  } else if (dataURIData?.[3] != null) {\n    data = [decodeURIComponent(dataURIData[3])]\n  }\n\n  // Convert to a File?\n  if (toFile) {\n    return new File(data, opts.name || '', { type: mimeType })\n  }\n\n  return new Blob(data, { type: mimeType })\n}\n\nexport default dataURItoBlob\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,sDAAsD;AAW/E,SAASC,aAAaA,CACpBC,OAAe,EACfC,IAA0B,EAC1BC,MAAgB,EACH;EAAA,IAAAC,IAAA,EAAAC,cAAA;EACb;EACA,MAAMC,WAAW,GAAGP,gBAAgB,CAACQ,IAAI,CAACN,OAAO,CAAC;;EAElD;EACA,MAAMO,QAAQ,IAAAJ,IAAA,IAAAC,cAAA,GAAGH,IAAI,CAACM,QAAQ,YAAAH,cAAA,GAAIC,WAAW,oBAAXA,WAAW,CAAG,CAAC,CAAC,YAAAF,IAAA,GAAI,YAAY;EAElE,IAAIK,IAAiB,EAAC;EACtB,IAAI,CAAAH,WAAW,oBAAXA,WAAW,CAAG,CAAC,CAAC,KAAI,IAAI,EAAE;IAC5B,MAAMI,MAAM,GAAGC,IAAI,CAACC,kBAAkB,CAACN,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,MAAMO,KAAK,GAAG,IAAIC,UAAU,CAACJ,MAAM,CAACK,MAAM,CAAC;IAC3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAE;MACtCH,KAAK,CAACG,CAAC,CAAC,GAAGN,MAAM,CAACO,UAAU,CAACD,CAAC,CAAC;IACjC;IACAP,IAAI,GAAG,CAACI,KAAK,CAAC;EAChB,CAAC,MAAM,IAAI,CAAAP,WAAW,oBAAXA,WAAW,CAAG,CAAC,CAAC,KAAI,IAAI,EAAE;IACnCG,IAAI,GAAG,CAACG,kBAAkB,CAACN,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7C;;EAEA;EACA,IAAIH,MAAM,EAAE;IACV,OAAO,IAAIe,IAAI,CAACT,IAAI,EAAEP,IAAI,CAACiB,IAAI,IAAI,EAAE,EAAE;MAAEC,IAAI,EAAEZ;IAAS,CAAC,CAAC;EAC5D;EAEA,OAAO,IAAIa,IAAI,CAACZ,IAAI,EAAE;IAAEW,IAAI,EAAEZ;EAAS,CAAC,CAAC;AAC3C;AAEA,eAAeR,aAAa","ignoreList":[]}