{"version":3,"names":["h","useMemo","VirtualList","FileItem","chunks","list","size","chunked","currentChunk","forEach","item","length","push","FileList","_ref","id","i18n","uppy","files","resumableUploads","hideRetryButton","hidePauseResumeButton","hideCancelButton","showLinkToFileUploadResult","showRemoveButtonAfterComplete","metaFields","isSingleFile","toggleFileCard","handleRequestThumbnail","handleCancelThumbnail","recoveredState","individualCancellation","itemsPerRow","openFileEditor","canEditFile","toggleAddFilesPanel","containerWidth","containerHeight","rowHeight","rows","sortByGhostComesFirst","file1","file2","Number","isGhost","fileIds","Object","keys","sort","renderRow","row","class","role","key","map","fileID","file","data"],"sources":["FileList.tsx"],"sourcesContent":["import { h } from 'preact'\nimport { useMemo } from 'preact/hooks'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore untyped\nimport VirtualList from '@uppy/utils/lib/VirtualList'\nimport type { UppyFile, Uppy, State } from '@uppy/core'\nimport type { I18n } from '@uppy/utils/lib/Translator'\nimport type { Body, Meta } from '@uppy/utils/lib/UppyFile'\nimport FileItem from './FileItem/index.tsx'\nimport type { DashboardState } from '../Dashboard.ts'\n\ntype FileListProps<M extends Meta, B extends Body> = {\n  id: string\n  i18n: I18n\n  uppy: Uppy<M, B>\n  files: State<M, B>['files']\n  resumableUploads: boolean\n  hideRetryButton: boolean\n  hidePauseResumeButton: boolean\n  hideCancelButton: boolean\n  showLinkToFileUploadResult: boolean\n  showRemoveButtonAfterComplete: boolean\n  metaFields: DashboardState<M, B>['metaFields']\n  isSingleFile: boolean\n  toggleFileCard: (show: boolean, fileId: string) => void\n  handleRequestThumbnail: (file: UppyFile<M, B>) => void\n  handleCancelThumbnail: (file: UppyFile<M, B>) => void\n  recoveredState: State<M, B>['recoveredState']\n  individualCancellation: boolean\n  itemsPerRow: number\n  openFileEditor: (file: UppyFile<M, B>) => void\n  canEditFile: (file: UppyFile<M, B>) => boolean\n  toggleAddFilesPanel: (show: boolean) => void\n  containerWidth: number\n  containerHeight: number\n}\n\nfunction chunks<T>(list: T[], size: number): T[][] {\n  const chunked: T[][] = []\n  let currentChunk: T[] = []\n  list.forEach((item: T) => {\n    if (currentChunk.length < size) {\n      currentChunk.push(item)\n    } else {\n      chunked.push(currentChunk)\n      currentChunk = [item]\n    }\n  })\n  if (currentChunk.length) chunked.push(currentChunk)\n  return chunked\n}\n\nexport default function FileList<M extends Meta, B extends Body>({\n  id,\n  i18n,\n  uppy,\n  files,\n  resumableUploads,\n  hideRetryButton,\n  hidePauseResumeButton,\n  hideCancelButton,\n  showLinkToFileUploadResult,\n  showRemoveButtonAfterComplete,\n  metaFields,\n  isSingleFile,\n  toggleFileCard,\n  handleRequestThumbnail,\n  handleCancelThumbnail,\n  recoveredState,\n  individualCancellation,\n  itemsPerRow,\n  openFileEditor,\n  canEditFile,\n  toggleAddFilesPanel,\n  containerWidth,\n  containerHeight,\n}: FileListProps<M, B>) {\n  // It's not great that this is hardcoded!\n  // It's ESPECIALLY not great that this is checking against `itemsPerRow`!\n  const rowHeight =\n    itemsPerRow === 1 ?\n      // Mobile\n      71\n      // 190px height + 2 * 5px margin\n    : 200\n\n  // Sort files by file.isGhost, ghost files first, only if recoveredState is present\n  const rows = useMemo(() => {\n    const sortByGhostComesFirst = (file1: string, file2: string) =>\n      Number(files[file2].isGhost) - Number(files[file1].isGhost)\n\n    const fileIds = Object.keys(files)\n    if (recoveredState) fileIds.sort(sortByGhostComesFirst)\n    return chunks(fileIds, itemsPerRow)\n  }, [files, itemsPerRow, recoveredState])\n\n  const renderRow = (row: string[]) => (\n    <div\n      class=\"uppy-Dashboard-filesInner\"\n      // The `role=\"presentation` attribute ensures that the list items are properly\n      // associated with the `VirtualList` element.\n      role=\"presentation\"\n      // We use the first file ID as the key â€” this should not change across scroll rerenders.\n      key={row[0]}\n    >\n      {row.map((fileID: string) => (\n        <FileItem\n          key={fileID}\n          uppy={uppy}\n          // FIXME This is confusing, it's actually the Dashboard's plugin ID\n          id={id}\n          // TODO move this to context\n          i18n={i18n}\n          // features\n          resumableUploads={resumableUploads}\n          individualCancellation={individualCancellation}\n          // visual options\n          hideRetryButton={hideRetryButton}\n          hidePauseResumeButton={hidePauseResumeButton}\n          hideCancelButton={hideCancelButton}\n          showLinkToFileUploadResult={showLinkToFileUploadResult}\n          showRemoveButtonAfterComplete={showRemoveButtonAfterComplete}\n          metaFields={metaFields}\n          recoveredState={recoveredState}\n          isSingleFile={isSingleFile}\n          containerWidth={containerWidth}\n          containerHeight={containerHeight}\n          // callbacks\n          toggleFileCard={toggleFileCard}\n          handleRequestThumbnail={handleRequestThumbnail}\n          handleCancelThumbnail={handleCancelThumbnail}\n          role=\"listitem\"\n          openFileEditor={openFileEditor}\n          canEditFile={canEditFile}\n          toggleAddFilesPanel={toggleAddFilesPanel}\n          file={files[fileID]}\n        />\n      ))}\n    </div>\n  )\n\n  if (isSingleFile) {\n    return <div class=\"uppy-Dashboard-files\">{renderRow(rows[0])}</div>\n  }\n\n  return (\n    <VirtualList\n      class=\"uppy-Dashboard-files\"\n      role=\"list\"\n      data={rows}\n      renderRow={renderRow}\n      rowHeight={rowHeight}\n    />\n  )\n}\n"],"mappings":"AAAA,SAASA,CAAC,QAAQ,QAAQ;AAC1B,SAASC,OAAO,QAAQ,cAAc;AACtC;AACA;AACA,OAAOC,WAAW,MAAM,6BAA6B;AAIrD,OAAOC,QAAQ,MAAM,qBAAsB;AA6B3C,SAASC,MAAMA,CAAIC,IAAS,EAAEC,IAAY,EAAS;EACjD,MAAMC,OAAc,GAAG,EAAE;EACzB,IAAIC,YAAiB,GAAG,EAAE;EAC1BH,IAAI,CAACI,OAAO,CAAEC,IAAO,IAAK;IACxB,IAAIF,YAAY,CAACG,MAAM,GAAGL,IAAI,EAAE;MAC9BE,YAAY,CAACI,IAAI,CAACF,IAAI,CAAC;IACzB,CAAC,MAAM;MACLH,OAAO,CAACK,IAAI,CAACJ,YAAY,CAAC;MAC1BA,YAAY,GAAG,CAACE,IAAI,CAAC;IACvB;EACF,CAAC,CAAC;EACF,IAAIF,YAAY,CAACG,MAAM,EAAEJ,OAAO,CAACK,IAAI,CAACJ,YAAY,CAAC;EACnD,OAAOD,OAAO;AAChB;AAEA,eAAe,SAASM,QAAQA,CAAAC,IAAA,EAwBR;EAAA,IAxByC;IAC/DC,EAAE;IACFC,IAAI;IACJC,IAAI;IACJC,KAAK;IACLC,gBAAgB;IAChBC,eAAe;IACfC,qBAAqB;IACrBC,gBAAgB;IAChBC,0BAA0B;IAC1BC,6BAA6B;IAC7BC,UAAU;IACVC,YAAY;IACZC,cAAc;IACdC,sBAAsB;IACtBC,qBAAqB;IACrBC,cAAc;IACdC,sBAAsB;IACtBC,WAAW;IACXC,cAAc;IACdC,WAAW;IACXC,mBAAmB;IACnBC,cAAc;IACdC;EACmB,CAAC,GAAAvB,IAAA;EACpB;EACA;EACA,MAAMwB,SAAS,GACbN,WAAW,KAAK,CAAC;EACf;EACA;EACA;EAAA,EACA,GAAG;;EAEP;EACA,MAAMO,IAAI,GAAGtC,OAAO,CAAC,MAAM;IACzB,MAAMuC,qBAAqB,GAAGA,CAACC,KAAa,EAAEC,KAAa,KACzDC,MAAM,CAACzB,KAAK,CAACwB,KAAK,CAAC,CAACE,OAAO,CAAC,GAAGD,MAAM,CAACzB,KAAK,CAACuB,KAAK,CAAC,CAACG,OAAO,CAAC;IAE7D,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAAC7B,KAAK,CAAC;IAClC,IAAIY,cAAc,EAAEe,OAAO,CAACG,IAAI,CAACR,qBAAqB,CAAC;IACvD,OAAOpC,MAAM,CAACyC,OAAO,EAAEb,WAAW,CAAC;EACrC,CAAC,EAAE,CAACd,KAAK,EAAEc,WAAW,EAAEF,cAAc,CAAC,CAAC;EAExC,MAAMmB,SAAS,GAAIC,GAAa,IAC9BlD,CAAA;IACEmD,KAAK,EAAC;IACN;IACA;IAAA;IACAC,IAAI,EAAC;IACL;IAAA;IACAC,GAAG,EAAEH,GAAG,CAAC,CAAC;EAAE,GAEXA,GAAG,CAACI,GAAG,CAAEC,MAAc,IACtBvD,CAAA,CAACG,QAAQ;IACPkD,GAAG,EAAEE,MAAO;IACZtC,IAAI,EAAEA;IACN;IAAA;IACAF,EAAE,EAAEA;IACJ;IAAA;IACAC,IAAI,EAAEA;IACN;IAAA;IACAG,gBAAgB,EAAEA,gBAAiB;IACnCY,sBAAsB,EAAEA;IACxB;IAAA;IACAX,eAAe,EAAEA,eAAgB;IACjCC,qBAAqB,EAAEA,qBAAsB;IAC7CC,gBAAgB,EAAEA,gBAAiB;IACnCC,0BAA0B,EAAEA,0BAA2B;IACvDC,6BAA6B,EAAEA,6BAA8B;IAC7DC,UAAU,EAAEA,UAAW;IACvBK,cAAc,EAAEA,cAAe;IAC/BJ,YAAY,EAAEA,YAAa;IAC3BU,cAAc,EAAEA,cAAe;IAC/BC,eAAe,EAAEA;IACjB;IAAA;IACAV,cAAc,EAAEA,cAAe;IAC/BC,sBAAsB,EAAEA,sBAAuB;IAC/CC,qBAAqB,EAAEA,qBAAsB;IAC7CuB,IAAI,EAAC,UAAU;IACfnB,cAAc,EAAEA,cAAe;IAC/BC,WAAW,EAAEA,WAAY;IACzBC,mBAAmB,EAAEA,mBAAoB;IACzCqB,IAAI,EAAEtC,KAAK,CAACqC,MAAM;EAAE,CACrB,CACF,CACE,CACN;EAED,IAAI7B,YAAY,EAAE;IAChB,OAAO1B,CAAA;MAAKmD,KAAK,EAAC;IAAsB,GAAEF,SAAS,CAACV,IAAI,CAAC,CAAC,CAAC,CAAO,CAAC;EACrE;EAEA,OACEvC,CAAA,CAACE,WAAW;IACViD,KAAK,EAAC,sBAAsB;IAC5BC,IAAI,EAAC,MAAM;IACXK,IAAI,EAAElB,IAAK;IACXU,SAAS,EAAEA,SAAU;IACrBX,SAAS,EAAEA;EAAU,CACtB,CAAC;AAEN","ignoreList":[]}