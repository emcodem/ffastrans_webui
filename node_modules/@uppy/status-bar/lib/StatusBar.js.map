{"version":3,"names":["UIPlugin","emaFilter","getTextDirection","statusBarStates","StatusBarUI","packageJson","locale","speedFilterHalfLife","ETAFilterHalfLife","getUploadingState","error","isAllComplete","recoveredState","files","STATE_ERROR","STATE_COMPLETE","STATE_WAITING","state","fileIDs","Object","keys","i","length","progress","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING","defaultOptions","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","_lastUpdateTime","_classPrivateFieldLooseKey","_previousUploadedBytes","_previousSpeed","_previousETA","_computeSmoothETA","_onUploadStart","StatusBar","constructor","uppy","opts","defineProperty","value","_computeSmoothETA2","writable","startUpload","upload","catch","getState","_classPrivateFieldLooseBase","values","reduce","pv","_ref","bytesUploaded","emit","performance","now","id","title","type","defaultLocale","i18nInit","render","bind","install","capabilities","allowNewUpload","totalProgress","newFiles","startedFiles","completeFiles","isUploadStarted","isAllPaused","isUploadInProgress","isSomeGhost","getObjectOfFilesPerState","newFilesOrRecovered","resumableUploads","supportsUploadProgress","uploadProgress","totalSize","totalUploadedSize","forEach","file","bytesTotal","totalETA","uploaded","total","remaining","uploadState","complete","numUploads","i18n","onMount","element","el","direction","dir","target","mount","on","getFiles","uninstall","unmount","off","totalBytes","_classPrivateFieldLoo","_classPrivateFieldLoo2","dt","_classPrivateFieldLoo3","Math","round","uploadedBytesSinceLastTick","_classPrivateFieldLoo4","currentSpeed","filteredSpeed","instantETA","updatedPreviousETA","max","filteredETA","VERSION","version"],"sources":["StatusBar.tsx"],"sourcesContent":["import type { ComponentChild } from 'preact'\nimport type { Body, Meta, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport type { Uppy, State } from '@uppy/core/lib/Uppy.js'\nimport type { DefinePluginOpts } from '@uppy/core/lib/BasePlugin.js'\nimport { UIPlugin } from '@uppy/core'\nimport emaFilter from '@uppy/utils/lib/emaFilter'\nimport getTextDirection from '@uppy/utils/lib/getTextDirection'\nimport statusBarStates from './StatusBarStates.ts'\nimport StatusBarUI, { type StatusBarUIProps } from './StatusBarUI.tsx'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport packageJson from '../package.json'\nimport locale from './locale.ts'\nimport type { StatusBarOptions } from './StatusBarOptions.ts'\n\nconst speedFilterHalfLife = 2000\nconst ETAFilterHalfLife = 2000\n\nfunction getUploadingState(\n  error: unknown,\n  isAllComplete: boolean,\n  recoveredState: any,\n  files: Record<string, UppyFile<any, any>>,\n): StatusBarUIProps<any, any>['uploadState'] {\n  if (error) {\n    return statusBarStates.STATE_ERROR\n  }\n\n  if (isAllComplete) {\n    return statusBarStates.STATE_COMPLETE\n  }\n\n  if (recoveredState) {\n    return statusBarStates.STATE_WAITING\n  }\n\n  let state: StatusBarUIProps<any, any>['uploadState'] =\n    statusBarStates.STATE_WAITING\n  const fileIDs = Object.keys(files)\n  for (let i = 0; i < fileIDs.length; i++) {\n    const { progress } = files[fileIDs[i]]\n    // If ANY files are being uploaded right now, show the uploading state.\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return statusBarStates.STATE_UPLOADING\n    }\n    // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n    if (progress.preprocess) {\n      state = statusBarStates.STATE_PREPROCESSING\n    }\n    // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n    if (progress.postprocess && state !== statusBarStates.STATE_PREPROCESSING) {\n      state = statusBarStates.STATE_POSTPROCESSING\n    }\n  }\n  return state\n}\n\nconst defaultOptions = {\n  hideUploadButton: false,\n  hideRetryButton: false,\n  hidePauseResumeButton: false,\n  hideCancelButton: false,\n  showProgressDetails: false,\n  hideAfterFinish: true,\n  doneButtonHandler: null,\n} satisfies StatusBarOptions\n\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\nexport default class StatusBar<M extends Meta, B extends Body> extends UIPlugin<\n  DefinePluginOpts<StatusBarOptions, keyof typeof defaultOptions>,\n  M,\n  B\n> {\n  static VERSION = packageJson.version\n\n  #lastUpdateTime!: ReturnType<typeof performance.now>\n\n  #previousUploadedBytes!: number | null\n\n  #previousSpeed!: number | null\n\n  #previousETA!: number | null\n\n  constructor(uppy: Uppy<M, B>, opts?: StatusBarOptions) {\n    super(uppy, { ...defaultOptions, ...opts })\n    this.id = this.opts.id || 'StatusBar'\n    this.title = 'StatusBar'\n    this.type = 'progressindicator'\n\n    this.defaultLocale = locale\n\n    this.i18nInit()\n\n    this.render = this.render.bind(this)\n    this.install = this.install.bind(this)\n  }\n\n  #computeSmoothETA(totalBytes: {\n    uploaded: number\n    total: number\n    remaining: number\n  }): number {\n    if (totalBytes.total === 0 || totalBytes.remaining === 0) {\n      return 0\n    }\n\n    // When state is restored, lastUpdateTime is still nullish at this point.\n    this.#lastUpdateTime ??= performance.now()\n    const dt = performance.now() - this.#lastUpdateTime\n    if (dt === 0) {\n      return Math.round((this.#previousETA ?? 0) / 100) / 10\n    }\n\n    const uploadedBytesSinceLastTick =\n      totalBytes.uploaded - this.#previousUploadedBytes!\n    this.#previousUploadedBytes = totalBytes.uploaded\n\n    // uploadedBytesSinceLastTick can be negative in some cases (packet loss?)\n    // in which case, we wait for next tick to update ETA.\n    if (uploadedBytesSinceLastTick <= 0) {\n      return Math.round((this.#previousETA ?? 0) / 100) / 10\n    }\n    const currentSpeed = uploadedBytesSinceLastTick / dt\n    const filteredSpeed =\n      this.#previousSpeed == null ?\n        currentSpeed\n      : emaFilter(currentSpeed, this.#previousSpeed, speedFilterHalfLife, dt)\n    this.#previousSpeed = filteredSpeed\n    const instantETA = totalBytes.remaining / filteredSpeed\n\n    const updatedPreviousETA = Math.max(this.#previousETA! - dt, 0)\n    const filteredETA =\n      this.#previousETA == null ?\n        instantETA\n      : emaFilter(instantETA, updatedPreviousETA, ETAFilterHalfLife, dt)\n    this.#previousETA = filteredETA\n    this.#lastUpdateTime = performance.now()\n\n    return Math.round(filteredETA / 100) / 10\n  }\n\n  startUpload = (): ReturnType<Uppy<M, B>['upload']> => {\n    return this.uppy.upload().catch((() => {\n      // Error logged in Core\n    }) as () => undefined)\n  }\n\n  render(state: State<M, B>): ComponentChild {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState,\n    } = state\n\n    const {\n      newFiles,\n      startedFiles,\n      completeFiles,\n\n      isUploadStarted,\n      isAllComplete,\n      isAllPaused,\n      isUploadInProgress,\n      isSomeGhost,\n    } = this.uppy.getObjectOfFilesPerState()\n\n    // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n    const newFilesOrRecovered = recoveredState ? Object.values(files) : newFiles\n    const resumableUploads = !!capabilities.resumableUploads\n    const supportsUploadProgress = capabilities.uploadProgress !== false\n\n    let totalSize = 0\n    let totalUploadedSize = 0\n\n    startedFiles.forEach((file) => {\n      totalSize += file.progress.bytesTotal || 0\n      totalUploadedSize += file.progress.bytesUploaded || 0\n    })\n    const totalETA = this.#computeSmoothETA({\n      uploaded: totalUploadedSize,\n      total: totalSize,\n      remaining: totalSize - totalUploadedSize,\n    })\n\n    return StatusBarUI({\n      error,\n      uploadState: getUploadingState(\n        error,\n        isAllComplete,\n        recoveredState,\n        state.files || {},\n      ),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete: false,\n      isAllPaused,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFilesOrRecovered.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      uppy: this.uppy,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n    })\n  }\n\n  onMount(): void {\n    // Set the text direction if the page has not defined one.\n    const element = this.el!\n    const direction = getTextDirection(element)\n    if (!direction) {\n      element.dir = 'ltr'\n    }\n  }\n\n  #onUploadStart = (): void => {\n    const { recoveredState } = this.uppy.getState()\n\n    this.#previousSpeed = null\n    this.#previousETA = null\n    if (recoveredState) {\n      this.#previousUploadedBytes = Object.values(recoveredState.files).reduce(\n        (pv, { progress }) => pv + (progress.bytesUploaded as number),\n        0,\n      )\n\n      // We don't set `#lastUpdateTime` at this point because the upload won't\n      // actually resume until the user asks for it.\n\n      this.uppy.emit('restore-confirmed')\n      return\n    }\n    this.#lastUpdateTime = performance.now()\n    this.#previousUploadedBytes = 0\n  }\n\n  install(): void {\n    const { target } = this.opts\n    if (target) {\n      this.mount(target, this)\n    }\n    this.uppy.on('upload', this.#onUploadStart)\n\n    // To cover the use case where the status bar is installed while the upload\n    // has started, we set `lastUpdateTime` right away.\n    this.#lastUpdateTime = performance.now()\n    this.#previousUploadedBytes = this.uppy\n      .getFiles()\n      .reduce((pv, file) => pv + (file.progress.bytesUploaded as number), 0)\n  }\n\n  uninstall(): void {\n    this.unmount()\n    this.uppy.off('upload', this.#onUploadStart)\n  }\n}\n"],"mappings":"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","ignoreList":[]}