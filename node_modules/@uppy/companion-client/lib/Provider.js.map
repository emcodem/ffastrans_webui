{"version":3,"names":["RequestClient","authErrorStatusCode","isOriginAllowed","getName","id","split","map","s","charAt","toUpperCase","slice","join","getOrigin","location","origin","_refreshingTokenPromise","_classPrivateFieldLooseKey","_getAuthToken","_getPlugin","Provider","constructor","uppy","opts","Object","defineProperty","value","_getPlugin2","_getAuthToken2","writable","provider","name","pluginId","tokenKey","companionKeysParams","preAuthToken","supportsRefreshToken","headers","token","Promise","all","_classPrivateFieldLooseBase","authHeaders","btoa","JSON","stringify","params","onReceiveResponse","response","plugin","oldAuthenticated","getPluginState","authenticated","status","setPluginState","setAuthToken","storage","setItem","removeAuthToken","removeItem","ensurePreAuth","fetchPreAuthToken","Error","authQuery","data","authUrl","_ref","authFormData","query","URLSearchParams","state","set","hostname","loginSimpleAuth","_ref2","uppyVersions","signal","post","form","qs","uppyAuthToken","loginOAuth","_ref3","throwIfAborted","resolve","reject","link","authWindow","window","open","cleanup","handleToken","e","source","jsonData","err","log","companionAllowedHosts","parse","error","message","i18n","info","close","removeEventListener","addEventListener","login","_ref4","refreshTokenUrl","fileUrl","request","arguments","authTokenAfter","isAuthError","path","method","refreshTokenErr","undefined","res","list","directory","options","get","logout","getItem","getPlugin"],"sources":["Provider.ts"],"sourcesContent":["import type { Uppy } from '@uppy/core'\nimport type { Body, Meta } from '@uppy/utils/lib/UppyFile'\nimport type { PluginOpts } from '@uppy/core/lib/BasePlugin.js'\nimport type {\n  RequestOptions,\n  CompanionClientProvider,\n} from '@uppy/utils/lib/CompanionClientProvider'\nimport type { UnknownProviderPlugin } from '@uppy/core/lib/Uppy.js'\nimport RequestClient, { authErrorStatusCode } from './RequestClient.ts'\nimport type { CompanionPluginOptions } from './index.ts'\nimport { isOriginAllowed } from './getAllowedHosts.ts'\n\nexport interface Opts extends PluginOpts, CompanionPluginOptions {\n  pluginId: string\n  name?: string\n  supportsRefreshToken?: boolean\n  provider: string\n}\n\nconst getName = (id: string) => {\n  return id\n    .split('-')\n    .map((s) => s.charAt(0).toUpperCase() + s.slice(1))\n    .join(' ')\n}\n\nfunction getOrigin() {\n  // eslint-disable-next-line no-restricted-globals\n  return location.origin\n}\n\nexport default class Provider<M extends Meta, B extends Body>\n  extends RequestClient<M, B>\n  implements CompanionClientProvider\n{\n  #refreshingTokenPromise: Promise<void> | undefined\n\n  provider: string\n\n  id: string\n\n  name: string\n\n  pluginId: string\n\n  tokenKey: string\n\n  companionKeysParams?: Record<string, string>\n\n  preAuthToken: string | null\n\n  supportsRefreshToken: boolean\n\n  constructor(uppy: Uppy<M, B>, opts: Opts) {\n    super(uppy, opts)\n    this.provider = opts.provider\n    this.id = this.provider\n    this.name = this.opts.name || getName(this.id)\n    this.pluginId = this.opts.pluginId\n    this.tokenKey = `companion-${this.pluginId}-auth-token`\n    this.companionKeysParams = this.opts.companionKeysParams\n    this.preAuthToken = null\n    this.supportsRefreshToken = !!opts.supportsRefreshToken\n  }\n\n  async headers(): Promise<Record<string, string>> {\n    const [headers, token] = await Promise.all([\n      super.headers(),\n      this.#getAuthToken(),\n    ])\n    const authHeaders: Record<string, string> = {}\n    if (token) {\n      authHeaders['uppy-auth-token'] = token\n    }\n\n    if (this.companionKeysParams) {\n      authHeaders['uppy-credentials-params'] = btoa(\n        JSON.stringify({ params: this.companionKeysParams }),\n      )\n    }\n    return { ...headers, ...authHeaders }\n  }\n\n  onReceiveResponse(response: Response): Response {\n    super.onReceiveResponse(response)\n    const plugin = this.#getPlugin()\n    const oldAuthenticated = plugin.getPluginState().authenticated\n    const authenticated =\n      oldAuthenticated ?\n        response.status !== authErrorStatusCode\n      : response.status < 400\n    plugin.setPluginState({ authenticated })\n    return response\n  }\n\n  async setAuthToken(token: string): Promise<void> {\n    return this.#getPlugin().storage.setItem(this.tokenKey, token)\n  }\n\n  async #getAuthToken(): Promise<string | null> {\n    return this.#getPlugin().storage.getItem(this.tokenKey)\n  }\n\n  protected async removeAuthToken(): Promise<void> {\n    return this.#getPlugin().storage.removeItem(this.tokenKey)\n  }\n\n  #getPlugin() {\n    const plugin = this.uppy.getPlugin(this.pluginId) as UnknownProviderPlugin<\n      M,\n      B\n    >\n    if (plugin == null) throw new Error('Plugin was nullish')\n    return plugin\n  }\n\n  /**\n   * Ensure we have a preauth token if necessary. Attempts to fetch one if we don't,\n   * or rejects if loading one fails.\n   */\n  async ensurePreAuth(): Promise<void> {\n    if (this.companionKeysParams && !this.preAuthToken) {\n      await this.fetchPreAuthToken()\n\n      if (!this.preAuthToken) {\n        throw new Error(\n          'Could not load authentication data required for third-party login. Please try again later.',\n        )\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  authQuery(data: unknown): Record<string, string> {\n    return {}\n  }\n\n  authUrl({\n    authFormData,\n    query,\n  }: {\n    authFormData: unknown\n    query: Record<string, string>\n  }): string {\n    const params = new URLSearchParams({\n      ...query,\n      // This is only used for Companion instances configured to accept multiple origins.\n      state: btoa(JSON.stringify({ origin: getOrigin() })),\n      ...this.authQuery({ authFormData }),\n    })\n\n    if (this.preAuthToken) {\n      params.set('uppyPreAuthToken', this.preAuthToken)\n    }\n\n    return `${this.hostname}/${this.id}/connect?${params}`\n  }\n\n  protected async loginSimpleAuth({\n    uppyVersions,\n    authFormData,\n    signal,\n  }: {\n    uppyVersions: string\n    authFormData: unknown\n    signal: AbortSignal\n  }): Promise<void> {\n    type Res = { uppyAuthToken: string }\n    const response = await this.post<Res>(\n      `${this.id}/simple-auth`,\n      { form: authFormData },\n      { qs: { uppyVersions }, signal },\n    )\n    this.setAuthToken(response.uppyAuthToken)\n  }\n\n  protected async loginOAuth({\n    uppyVersions,\n    authFormData,\n    signal,\n  }: {\n    uppyVersions: string\n    authFormData: unknown\n    signal: AbortSignal\n  }): Promise<void> {\n    await this.ensurePreAuth()\n\n    signal.throwIfAborted()\n\n    return new Promise((resolve, reject) => {\n      const link = this.authUrl({ query: { uppyVersions }, authFormData })\n      const authWindow = window.open(link, '_blank')\n\n      let cleanup: () => void\n\n      const handleToken = (e: MessageEvent<any>) => {\n        if (e.source !== authWindow) {\n          let jsonData = ''\n          try {\n            // TODO improve our uppy logger so that it can take an arbitrary number of arguments,\n            // each either objects, errors or strings,\n            // then we donâ€™t have to manually do these things like json stringify when logging.\n            // the logger should never throw an error.\n            jsonData = JSON.stringify(e.data)\n          } catch (err) {\n            // in case JSON.stringify fails (ignored)\n          }\n          this.uppy.log(\n            `ignoring event from unknown source ${jsonData}`,\n            'warning',\n          )\n          return\n        }\n\n        const { companionAllowedHosts } = this.#getPlugin().opts\n        if (!isOriginAllowed(e.origin, companionAllowedHosts)) {\n          reject(\n            new Error(\n              `rejecting event from ${e.origin} vs allowed pattern ${companionAllowedHosts}`,\n            ),\n          )\n          return\n        }\n\n        // Check if it's a string before doing the JSON.parse to maintain support\n        // for older Companion versions that used object references\n        const data = typeof e.data === 'string' ? JSON.parse(e.data) : e.data\n\n        if (data.error) {\n          const { uppy } = this\n          const message = uppy.i18n('authAborted')\n          uppy.info({ message }, 'warning', 5000)\n          reject(new Error('auth aborted'))\n          return\n        }\n\n        if (!data.token) {\n          reject(new Error('did not receive token from auth window'))\n          return\n        }\n\n        cleanup()\n        resolve(this.setAuthToken(data.token))\n      }\n\n      cleanup = () => {\n        authWindow?.close()\n        window.removeEventListener('message', handleToken)\n        signal.removeEventListener('abort', cleanup)\n      }\n\n      signal.addEventListener('abort', cleanup)\n      window.addEventListener('message', handleToken)\n    })\n  }\n\n  async login({\n    uppyVersions,\n    authFormData,\n    signal,\n  }: {\n    uppyVersions: string\n    authFormData: unknown\n    signal: AbortSignal\n  }): Promise<void> {\n    return this.loginOAuth({ uppyVersions, authFormData, signal })\n  }\n\n  refreshTokenUrl(): string {\n    return `${this.hostname}/${this.id}/refresh-token`\n  }\n\n  fileUrl(id: string): string {\n    return `${this.hostname}/${this.id}/get/${id}`\n  }\n\n  protected async request<ResBody>(\n    ...args: Parameters<RequestClient<M, B>['request']>\n  ): Promise<ResBody> {\n    await this.#refreshingTokenPromise\n\n    try {\n      // to test simulate access token expired (leading to a token token refresh),\n      // see mockAccessTokenExpiredError in companion/drive.\n      // If you want to test refresh token *and* access token invalid, do this for example with Google Drive:\n      // While uploading, go to your google account settings,\n      // \"Third-party apps & services\", then click \"Companion\" and \"Remove access\".\n\n      return await super.request<ResBody>(...args)\n    } catch (err) {\n      if (!this.supportsRefreshToken) throw err\n      // only handle auth errors (401 from provider), and only handle them if we have a (refresh) token\n      const authTokenAfter = await this.#getAuthToken()\n      if (!err.isAuthError || !authTokenAfter) throw err\n\n      if (this.#refreshingTokenPromise == null) {\n        // Many provider requests may be starting at once, however refresh token should only be called once.\n        // Once a refresh token operation has started, we need all other request to wait for this operation (atomically)\n        this.#refreshingTokenPromise = (async () => {\n          try {\n            this.uppy.log(`[CompanionClient] Refreshing expired auth token`)\n            const response = await super.request<{ uppyAuthToken: string }>({\n              path: this.refreshTokenUrl(),\n              method: 'POST',\n            })\n            await this.setAuthToken(response.uppyAuthToken)\n          } catch (refreshTokenErr) {\n            if (refreshTokenErr.isAuthError) {\n              // if refresh-token has failed with auth error, delete token, so we don't keep trying to refresh in future\n              await this.removeAuthToken()\n            }\n            throw err\n          } finally {\n            this.#refreshingTokenPromise = undefined\n          }\n        })()\n      }\n\n      await this.#refreshingTokenPromise\n\n      // now retry the request with our new refresh token\n      return super.request(...args)\n    }\n  }\n\n  async fetchPreAuthToken(): Promise<void> {\n    if (!this.companionKeysParams) {\n      return\n    }\n\n    try {\n      const res = await this.post<{ token: string }>(`${this.id}/preauth/`, {\n        params: this.companionKeysParams,\n      })\n      this.preAuthToken = res.token\n    } catch (err) {\n      this.uppy.log(\n        `[CompanionClient] unable to fetch preAuthToken ${err}`,\n        'warning',\n      )\n    }\n  }\n\n  list<ResBody>(\n    directory: string | null,\n    options: RequestOptions,\n  ): Promise<ResBody> {\n    return this.get<ResBody>(`${this.id}/list/${directory || ''}`, options)\n  }\n\n  async logout<ResBody>(options?: RequestOptions): Promise<ResBody> {\n    const response = await this.get<ResBody>(`${this.id}/logout`, options)\n    await this.removeAuthToken()\n    return response\n  }\n}\n"],"mappings":"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","ignoreList":[]}