{"version":3,"names":["UserFacingApiError","pRetry","AbortError","fetchWithNetworkError","ErrorWithCause","emitSocketProgress","getSocketHost","AuthError","packageJson","stripSlash","url","replace","retryCount","socketActivityTimeoutMs","authErrorStatusCode","HttpError","Error","constructor","_ref","statusCode","message","name","handleJSONResponse","res","status","ok","json","errMsg","statusText","errData","requestId","cause","_companionHeaders","_classPrivateFieldLooseKey","_getUrl","_requestSocketToken","_awaitRemoteFileUpload","RequestClient","uppy","opts","Object","defineProperty","value","_awaitRemoteFileUpload2","_getUrl2","writable","_ref2","_file$remote","file","postBody","signal","remote","post","body","token","onReceiveResponse","bind","_classPrivateFieldLooseBase","companionHeaders","setCompanionHeaders","headers","Symbol","for","hostname","companion","getState","host","companionUrl","emptyBody","defaultHeaders","Accept","undefined","state","has","get","setState","request","_ref3","path","method","data","skipPostResponse","response","credentials","companionCookiesRule","JSON","stringify","err","isAuthError","options","delete","uploadRemoteFile","reqBody","_this","getQueue","_this$uppy$getFile","existingServerToken","getFile","id","serverToken","log","queue","queueRequestSocketToken","wrapPromiseFunction","arguments","outerErr","isRetryableHttpError","includes","priority","abortOn","setFileState","retries","onFailedAttempt","emit","test","_ref4","removeEventHandlers","capabilities","Promise","resolve","reject","socket","socketAbortController","activityTimeout","isPaused","socketSend","action","payload","readyState","OPEN","_socket","String","send","sendState","resumableUploads","createWebsocket","abort","AbortController","onFatalError","_socketAbortControlle","resetActivityTimeout","clearTimeout","setTimeout","reconnectWebsocket","_","rejectSocket","WebSocket","addEventListener","error","_socket2","close","e","parse","_payload$response","_payload$response$sta","_payload$response2","_socketAbortControlle2","text","responseText","uploadURL","assign","closeSocket","aborted","pause","newPausedState","onFileRemove","targetFile","_socketAbortControlle3","individualCancellation","onCancelAll","_socketAbortControlle4","onFilePausedChange","onPauseAll","onResumeAll","on","off","_socketAbortControlle5","VERSION","version"],"sources":["RequestClient.ts"],"sourcesContent":["import UserFacingApiError from '@uppy/utils/lib/UserFacingApiError'\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport pRetry, { AbortError } from 'p-retry'\n\nimport fetchWithNetworkError from '@uppy/utils/lib/fetchWithNetworkError'\nimport ErrorWithCause from '@uppy/utils/lib/ErrorWithCause'\nimport emitSocketProgress from '@uppy/utils/lib/emitSocketProgress'\nimport getSocketHost from '@uppy/utils/lib/getSocketHost'\n\nimport type Uppy from '@uppy/core'\nimport type { UppyFile, Meta, Body } from '@uppy/utils/lib/UppyFile'\nimport type { RequestOptions } from '@uppy/utils/lib/CompanionClientProvider'\nimport AuthError from './AuthError.ts'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport packageJson from '../package.json'\n\ntype CompanionHeaders = Record<string, string> | undefined\n\nexport type Opts = {\n  name?: string\n  provider: string\n  pluginId: string\n  companionUrl: string\n  companionCookiesRule?: 'same-origin' | 'include' | 'omit'\n  companionHeaders?: CompanionHeaders\n  companionKeysParams?: Record<string, string>\n}\n\n// Remove the trailing slash so we can always safely append /xyz.\nfunction stripSlash(url: string) {\n  return url.replace(/\\/$/, '')\n}\n\nconst retryCount = 10 // set to a low number, like 2 to test manual user retries\nconst socketActivityTimeoutMs = 5 * 60 * 1000 // set to a low number like 10000 to test this\n\nexport const authErrorStatusCode = 401\n\nclass HttpError extends Error {\n  statusCode: number\n\n  constructor({\n    statusCode,\n    message,\n  }: {\n    statusCode: number\n    message: string\n  }) {\n    super(message)\n    this.name = 'HttpError'\n    this.statusCode = statusCode\n  }\n}\n\nasync function handleJSONResponse<ResJson>(res: Response): Promise<ResJson> {\n  if (res.status === authErrorStatusCode) {\n    throw new AuthError()\n  }\n\n  if (res.ok) {\n    return res.json()\n  }\n\n  let errMsg = `Failed request with status: ${res.status}. ${res.statusText}`\n  let errData\n  try {\n    errData = await res.json()\n\n    if (errData.message) errMsg = `${errMsg} message: ${errData.message}`\n    if (errData.requestId) errMsg = `${errMsg} request-Id: ${errData.requestId}`\n  } catch (cause) {\n    // if the response contains invalid JSON, let's ignore the error data\n    throw new Error(errMsg, { cause })\n  }\n\n  if (res.status >= 400 && res.status <= 499 && errData.message) {\n    throw new UserFacingApiError(errData.message)\n  }\n\n  throw new HttpError({ statusCode: res.status, message: errMsg })\n}\n\nexport default class RequestClient<M extends Meta, B extends Body> {\n  static VERSION = packageJson.version\n\n  #companionHeaders: CompanionHeaders\n\n  uppy: Uppy<M, B>\n\n  opts: Opts\n\n  constructor(uppy: Uppy<M, B>, opts: Opts) {\n    this.uppy = uppy\n    this.opts = opts\n    this.onReceiveResponse = this.onReceiveResponse.bind(this)\n    this.#companionHeaders = opts.companionHeaders\n  }\n\n  setCompanionHeaders(headers: Record<string, string>): void {\n    this.#companionHeaders = headers\n  }\n\n  private [Symbol.for('uppy test: getCompanionHeaders')](): CompanionHeaders {\n    return this.#companionHeaders\n  }\n\n  get hostname(): string {\n    const { companion } = this.uppy.getState()\n    const host = this.opts.companionUrl\n    return stripSlash(companion && companion[host] ? companion[host] : host)\n  }\n\n  async headers(emptyBody = false): Promise<Record<string, string>> {\n    const defaultHeaders = {\n      Accept: 'application/json',\n      ...(emptyBody ? undefined : (\n        {\n          // Passing those headers on requests with no data forces browsers to first make a preflight request.\n          'Content-Type': 'application/json',\n        }\n      )),\n    }\n\n    return {\n      ...defaultHeaders,\n      ...this.#companionHeaders,\n    }\n  }\n\n  onReceiveResponse(res: Response): void {\n    const { headers } = res\n    const state = this.uppy.getState()\n    const companion = state.companion || {}\n    const host = this.opts.companionUrl\n\n    // Store the self-identified domain name for the Companion instance we just hit.\n    if (headers.has('i-am') && headers.get('i-am') !== companion[host]) {\n      this.uppy.setState({\n        companion: { ...companion, [host]: headers.get('i-am') as string },\n      })\n    }\n  }\n\n  #getUrl(url: string) {\n    if (/^(https?:|)\\/\\//.test(url)) {\n      return url\n    }\n    return `${this.hostname}/${url}`\n  }\n\n  protected async request<ResBody>({\n    path,\n    method = 'GET',\n    data,\n    skipPostResponse,\n    signal,\n  }: {\n    path: string\n    method?: string\n    data?: Record<string, unknown>\n    skipPostResponse?: boolean\n    signal?: AbortSignal\n  }): Promise<ResBody> {\n    try {\n      const headers = await this.headers(!data)\n      const response = await fetchWithNetworkError(this.#getUrl(path), {\n        method,\n        signal,\n        headers,\n        credentials: this.opts.companionCookiesRule || 'same-origin',\n        body: data ? JSON.stringify(data) : null,\n      })\n      if (!skipPostResponse) this.onReceiveResponse(response)\n\n      return await handleJSONResponse<ResBody>(response)\n    } catch (err) {\n      // pass these through\n      if (\n        err.isAuthError ||\n        err.name === 'UserFacingApiError' ||\n        err.name === 'AbortError'\n      )\n        throw err\n\n      throw new ErrorWithCause(`Could not ${method} ${this.#getUrl(path)}`, {\n        cause: err,\n      })\n    }\n  }\n\n  async get<PostBody>(\n    path: string,\n    options?: RequestOptions,\n  ): Promise<PostBody> {\n    return this.request({ ...options, path })\n  }\n\n  async post<PostBody>(\n    path: string,\n    data: Record<string, unknown>,\n    options?: RequestOptions,\n  ): Promise<PostBody> {\n    return this.request<PostBody>({ ...options, path, method: 'POST', data })\n  }\n\n  async delete<T>(\n    path: string,\n    data?: Record<string, unknown>,\n    options?: RequestOptions,\n  ): Promise<T> {\n    return this.request({ ...options, path, method: 'DELETE', data })\n  }\n\n  /**\n   * Remote uploading consists of two steps:\n   * 1. #requestSocketToken which starts the download/upload in companion and returns a unique token for the upload.\n   * Then companion will halt the upload until:\n   * 2. #awaitRemoteFileUpload is called, which will open/ensure a websocket connection towards companion, with the\n   * previously generated token provided. It returns a promise that will resolve/reject once the file has finished\n   * uploading or is otherwise done (failed, canceled)\n   */\n  async uploadRemoteFile(\n    file: UppyFile<M, B>,\n    reqBody: Record<string, unknown>,\n    options: { signal: AbortSignal; getQueue: () => any },\n  ): Promise<void> {\n    try {\n      const { signal, getQueue } = options || {}\n\n      return await pRetry(\n        async () => {\n          // if we already have a serverToken, assume that we are resuming the existing server upload id\n          const existingServerToken = this.uppy.getFile(file.id)?.serverToken\n          if (existingServerToken != null) {\n            this.uppy.log(\n              `Connecting to exiting websocket ${existingServerToken}`,\n            )\n            return this.#awaitRemoteFileUpload({\n              file,\n              queue: getQueue(),\n              signal,\n            })\n          }\n\n          const queueRequestSocketToken = getQueue().wrapPromiseFunction(\n            async (\n              ...args: [\n                {\n                  file: UppyFile<M, B>\n                  postBody: Record<string, unknown>\n                  signal: AbortSignal\n                },\n              ]\n            ) => {\n              try {\n                return await this.#requestSocketToken(...args)\n              } catch (outerErr) {\n                // throwing AbortError will cause p-retry to stop retrying\n                if (outerErr.isAuthError) throw new AbortError(outerErr)\n\n                if (outerErr.cause == null) throw outerErr\n                const err = outerErr.cause\n\n                const isRetryableHttpError = () =>\n                  [408, 409, 429, 418, 423].includes(err.statusCode) ||\n                  (err.statusCode >= 500 &&\n                    err.statusCode <= 599 &&\n                    ![501, 505].includes(err.statusCode))\n                if (err.name === 'HttpError' && !isRetryableHttpError())\n                  throw new AbortError(err)\n\n                // p-retry will retry most other errors,\n                // but it will not retry TypeError (except network error TypeErrors)\n                throw err\n              }\n            },\n            { priority: -1 },\n          )\n\n          const serverToken = await queueRequestSocketToken({\n            file,\n            postBody: reqBody,\n            signal,\n          }).abortOn(signal)\n\n          if (!this.uppy.getFile(file.id)) return undefined // has file since been removed?\n\n          this.uppy.setFileState(file.id, { serverToken })\n\n          return this.#awaitRemoteFileUpload({\n            file: this.uppy.getFile(file.id), // re-fetching file because it might have changed in the meantime\n            queue: getQueue(),\n            signal,\n          })\n        },\n        {\n          retries: retryCount,\n          signal,\n          onFailedAttempt: (err) =>\n            this.uppy.log(`Retrying upload due to: ${err.message}`, 'warning'),\n        },\n      )\n    } catch (err) {\n      // this is a bit confusing, but note that an error with the `name` prop set to 'AbortError' (from AbortController)\n      // is not the same as `p-retry` `AbortError`\n      if (err.name === 'AbortError') {\n        // The file upload was aborted, it’s not an error\n        return undefined\n      }\n\n      this.uppy.emit('upload-error', file, err)\n      throw err\n    }\n  }\n\n  #requestSocketToken = async ({\n    file,\n    postBody,\n    signal,\n  }: {\n    file: UppyFile<M, B>\n    postBody: Record<string, unknown>\n    signal: AbortSignal\n  }): Promise<string> => {\n    if (file.remote?.url == null) {\n      throw new Error('Cannot connect to an undefined URL')\n    }\n\n    const res = await this.post<{ token: string }>(\n      file.remote.url,\n      {\n        ...file.remote.body,\n        ...postBody,\n      },\n      { signal },\n    )\n\n    return res.token\n  }\n\n  /**\n   * This method will ensure a websocket for the specified file and returns a promise that resolves\n   * when the file has finished downloading, or rejects if it fails.\n   * It will retry if the websocket gets disconnected\n   */\n  async #awaitRemoteFileUpload({\n    file,\n    queue,\n    signal,\n  }: {\n    file: UppyFile<M, B>\n    queue: any\n    signal: AbortSignal\n  }): Promise<void> {\n    let removeEventHandlers: () => void\n\n    const { capabilities } = this.uppy.getState()\n\n    try {\n      return await new Promise((resolve, reject) => {\n        const token = file.serverToken\n        const host = getSocketHost(file.remote!.companionUrl)\n\n        let socket: WebSocket | undefined\n        let socketAbortController: AbortController\n        let activityTimeout: ReturnType<typeof setTimeout>\n\n        let { isPaused } = file\n\n        const socketSend = (action: string, payload?: unknown) => {\n          if (socket == null || socket.readyState !== socket.OPEN) {\n            this.uppy.log(\n              `Cannot send \"${action}\" to socket ${\n                file.id\n              } because the socket state was ${String(socket?.readyState)}`,\n              'warning',\n            )\n            return\n          }\n\n          socket.send(\n            JSON.stringify({\n              action,\n              payload: payload ?? {},\n            }),\n          )\n        }\n\n        function sendState() {\n          if (!capabilities.resumableUploads) return\n\n          if (isPaused) socketSend('pause')\n          else socketSend('resume')\n        }\n\n        const createWebsocket = async () => {\n          if (socketAbortController) socketAbortController.abort()\n          socketAbortController = new AbortController()\n\n          const onFatalError = (err: Error) => {\n            // Remove the serverToken so that a new one will be created for the retry.\n            this.uppy.setFileState(file.id, { serverToken: null })\n            socketAbortController?.abort?.()\n            reject(err)\n          }\n\n          // todo instead implement the ability for users to cancel / retry *currently uploading files* in the UI\n          function resetActivityTimeout() {\n            clearTimeout(activityTimeout)\n            if (isPaused) return\n            activityTimeout = setTimeout(\n              () =>\n                onFatalError(\n                  new Error(\n                    'Timeout waiting for message from Companion socket',\n                  ),\n                ),\n              socketActivityTimeoutMs,\n            )\n          }\n\n          try {\n            await queue\n              .wrapPromiseFunction(async () => {\n                const reconnectWebsocket = async () =>\n                  // eslint-disable-next-line promise/param-names\n                  new Promise((_, rejectSocket) => {\n                    socket = new WebSocket(`${host}/api/${token}`)\n\n                    resetActivityTimeout()\n\n                    socket.addEventListener('close', () => {\n                      socket = undefined\n                      rejectSocket(new Error('Socket closed unexpectedly'))\n                    })\n\n                    socket.addEventListener('error', (error) => {\n                      this.uppy.log(\n                        `Companion socket error ${JSON.stringify(\n                          error,\n                        )}, closing socket`,\n                        'warning',\n                      )\n                      socket?.close() // will 'close' event to be emitted\n                    })\n\n                    socket.addEventListener('open', () => {\n                      sendState()\n                    })\n\n                    socket.addEventListener('message', (e) => {\n                      resetActivityTimeout()\n\n                      try {\n                        const { action, payload } = JSON.parse(e.data)\n\n                        switch (action) {\n                          case 'progress': {\n                            emitSocketProgress(\n                              this,\n                              payload,\n                              this.uppy.getFile(file.id),\n                            )\n                            break\n                          }\n                          case 'success': {\n                            // payload.response is sent from companion for xhr-upload (aka uploadMultipart in companion) and\n                            // s3 multipart (aka uploadS3Multipart)\n                            // but not for tus/transloadit (aka uploadTus)\n                            // responseText is a string which may or may not be in JSON format\n                            // this means that an upload destination of xhr or s3 multipart MUST respond with valid JSON\n                            // to companion, or the JSON.parse will crash\n                            const text = payload.response?.responseText\n\n                            this.uppy.emit(\n                              'upload-success',\n                              this.uppy.getFile(file.id),\n                              {\n                                uploadURL: payload.url,\n                                status: payload.response?.status ?? 200,\n                                body:\n                                  text ? (JSON.parse(text) as B) : undefined,\n                              },\n                            )\n                            socketAbortController?.abort?.()\n                            resolve()\n                            break\n                          }\n                          case 'error': {\n                            const { message } = payload.error\n                            throw Object.assign(new Error(message), {\n                              cause: payload.error,\n                            })\n                          }\n                          default:\n                            this.uppy.log(\n                              `Companion socket unknown action ${action}`,\n                              'warning',\n                            )\n                        }\n                      } catch (err) {\n                        onFatalError(err)\n                      }\n                    })\n\n                    const closeSocket = () => {\n                      this.uppy.log(`Closing socket ${file.id}`)\n                      clearTimeout(activityTimeout)\n                      if (socket) socket.close()\n                      socket = undefined\n                    }\n\n                    socketAbortController.signal.addEventListener(\n                      'abort',\n                      () => {\n                        closeSocket()\n                      },\n                    )\n                  })\n\n                await pRetry(reconnectWebsocket, {\n                  retries: retryCount,\n                  signal: socketAbortController.signal,\n                  onFailedAttempt: () => {\n                    if (socketAbortController.signal.aborted) return // don't log in this case\n                    this.uppy.log(`Retrying websocket ${file.id}`)\n                  },\n                })\n              })()\n              .abortOn(socketAbortController.signal)\n          } catch (err) {\n            if (socketAbortController.signal.aborted) return\n            onFatalError(err)\n          }\n        }\n\n        const pause = (newPausedState: boolean) => {\n          if (!capabilities.resumableUploads) return\n\n          isPaused = newPausedState\n          if (socket) sendState()\n        }\n\n        const onFileRemove = (targetFile: UppyFile<M, B>) => {\n          if (!capabilities.individualCancellation) return\n          if (targetFile.id !== file.id) return\n          socketSend('cancel')\n          socketAbortController?.abort?.()\n          this.uppy.log(`upload ${file.id} was removed`)\n          resolve()\n        }\n\n        const onCancelAll = () => {\n          socketSend('cancel')\n          socketAbortController?.abort?.()\n          this.uppy.log(`upload ${file.id} was canceled`)\n          resolve()\n        }\n\n        const onFilePausedChange = (\n          targetFile: UppyFile<M, B> | undefined,\n          newPausedState: boolean,\n        ) => {\n          if (targetFile?.id !== file.id) return\n          pause(newPausedState)\n        }\n\n        const onPauseAll = () => pause(true)\n        const onResumeAll = () => pause(false)\n\n        this.uppy.on('file-removed', onFileRemove)\n        this.uppy.on('cancel-all', onCancelAll)\n        this.uppy.on('upload-pause', onFilePausedChange)\n        this.uppy.on('pause-all', onPauseAll)\n        this.uppy.on('resume-all', onResumeAll)\n\n        removeEventHandlers = () => {\n          this.uppy.off('file-removed', onFileRemove)\n          this.uppy.off('cancel-all', onCancelAll)\n          this.uppy.off('upload-pause', onFilePausedChange)\n          this.uppy.off('pause-all', onPauseAll)\n          this.uppy.off('resume-all', onResumeAll)\n        }\n\n        signal.addEventListener('abort', () => {\n          socketAbortController?.abort()\n        })\n\n        createWebsocket()\n      })\n    } finally {\n      // @ts-expect-error used before defined\n      removeEventHandlers?.()\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}