{"version":3,"names":["afterScrollFolder","oldPartialTree","currentFolderId","items","nextPagePath","validateSingleFile","currentFolder","find","i","id","newFolders","filter","isFolder","newFiles","scrolledFolder","partialTreeWithUpdatedScrolledFolder","map","folder","isParentFolderChecked","type","status","folders","requestPath","cached","parentId","data","files","file","restrictionError","newPartialTree"],"sources":["afterScrollFolder.ts"],"sourcesContent":["import type {\n  PartialTree,\n  PartialTreeFile,\n  PartialTreeFolder,\n  PartialTreeFolderNode,\n  PartialTreeId,\n} from '@uppy/core/lib/Uppy.js'\nimport type { CompanionFile } from '@uppy/utils/lib/CompanionFile'\n\nconst afterScrollFolder = (\n  oldPartialTree: PartialTree,\n  currentFolderId: PartialTreeId,\n  items: CompanionFile[],\n  nextPagePath: string | null,\n  validateSingleFile: (file: CompanionFile) => string | null,\n): PartialTree => {\n  const currentFolder = oldPartialTree.find(\n    (i) => i.id === currentFolderId,\n  ) as PartialTreeFolder\n\n  const newFolders = items.filter((i) => i.isFolder === true)\n  const newFiles = items.filter((i) => i.isFolder === false)\n\n  // just doing `scrolledFolder.nextPagePath = ...` in a non-mutating way\n  const scrolledFolder: PartialTreeFolder = { ...currentFolder, nextPagePath }\n  const partialTreeWithUpdatedScrolledFolder = oldPartialTree.map((folder) =>\n    folder.id === scrolledFolder.id ? scrolledFolder : folder,\n  )\n  const isParentFolderChecked =\n    scrolledFolder.type === 'folder' && scrolledFolder.status === 'checked'\n  const folders: PartialTreeFolderNode[] = newFolders.map((folder) => ({\n    type: 'folder',\n    id: folder.requestPath,\n\n    cached: false,\n    nextPagePath: null,\n\n    status: isParentFolderChecked ? 'checked' : 'unchecked',\n    parentId: scrolledFolder.id,\n    data: folder,\n  }))\n  const files: PartialTreeFile[] = newFiles.map((file) => {\n    const restrictionError = validateSingleFile(file)\n    return {\n      type: 'file',\n      id: file.requestPath,\n\n      restrictionError,\n\n      status:\n        isParentFolderChecked && !restrictionError ? 'checked' : 'unchecked',\n      parentId: scrolledFolder.id,\n      data: file,\n    }\n  })\n\n  const newPartialTree: PartialTree = [\n    ...partialTreeWithUpdatedScrolledFolder,\n    ...folders,\n    ...files,\n  ]\n  return newPartialTree\n}\n\nexport default afterScrollFolder\n"],"mappings":"AASA,MAAMA,iBAAiB,GAAGA,CACxBC,cAA2B,EAC3BC,eAA8B,EAC9BC,KAAsB,EACtBC,YAA2B,EAC3BC,kBAA0D,KAC1C;EAChB,MAAMC,aAAa,GAAGL,cAAc,CAACM,IAAI,CACtCC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKP,eAClB,CAAsB;EAEtB,MAAMQ,UAAU,GAAGP,KAAK,CAACQ,MAAM,CAAEH,CAAC,IAAKA,CAAC,CAACI,QAAQ,KAAK,IAAI,CAAC;EAC3D,MAAMC,QAAQ,GAAGV,KAAK,CAACQ,MAAM,CAAEH,CAAC,IAAKA,CAAC,CAACI,QAAQ,KAAK,KAAK,CAAC;;EAE1D;EACA,MAAME,cAAiC,GAAG;IAAE,GAAGR,aAAa;IAAEF;EAAa,CAAC;EAC5E,MAAMW,oCAAoC,GAAGd,cAAc,CAACe,GAAG,CAAEC,MAAM,IACrEA,MAAM,CAACR,EAAE,KAAKK,cAAc,CAACL,EAAE,GAAGK,cAAc,GAAGG,MACrD,CAAC;EACD,MAAMC,qBAAqB,GACzBJ,cAAc,CAACK,IAAI,KAAK,QAAQ,IAAIL,cAAc,CAACM,MAAM,KAAK,SAAS;EACzE,MAAMC,OAAgC,GAAGX,UAAU,CAACM,GAAG,CAAEC,MAAM,KAAM;IACnEE,IAAI,EAAE,QAAQ;IACdV,EAAE,EAAEQ,MAAM,CAACK,WAAW;IAEtBC,MAAM,EAAE,KAAK;IACbnB,YAAY,EAAE,IAAI;IAElBgB,MAAM,EAAEF,qBAAqB,GAAG,SAAS,GAAG,WAAW;IACvDM,QAAQ,EAAEV,cAAc,CAACL,EAAE;IAC3BgB,IAAI,EAAER;EACR,CAAC,CAAC,CAAC;EACH,MAAMS,KAAwB,GAAGb,QAAQ,CAACG,GAAG,CAAEW,IAAI,IAAK;IACtD,MAAMC,gBAAgB,GAAGvB,kBAAkB,CAACsB,IAAI,CAAC;IACjD,OAAO;MACLR,IAAI,EAAE,MAAM;MACZV,EAAE,EAAEkB,IAAI,CAACL,WAAW;MAEpBM,gBAAgB;MAEhBR,MAAM,EACJF,qBAAqB,IAAI,CAACU,gBAAgB,GAAG,SAAS,GAAG,WAAW;MACtEJ,QAAQ,EAAEV,cAAc,CAACL,EAAE;MAC3BgB,IAAI,EAAEE;IACR,CAAC;EACH,CAAC,CAAC;EAEF,MAAME,cAA2B,GAAG,CAClC,GAAGd,oCAAoC,EACvC,GAAGM,OAAO,EACV,GAAGK,KAAK,CACT;EACD,OAAOG,cAAc;AACvB,CAAC;AAED,eAAe7B,iBAAiB","ignoreList":[]}