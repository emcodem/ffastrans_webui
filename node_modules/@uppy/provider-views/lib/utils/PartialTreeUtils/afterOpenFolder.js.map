{"version":3,"names":["afterOpenFolder","oldPartialTree","discoveredItems","clickedFolder","currentPagePath","validateSingleFile","discoveredFolders","filter","i","isFolder","discoveredFiles","isParentFolderChecked","type","status","folders","map","folder","id","requestPath","cached","nextPagePath","parentId","data","files","file","restrictionError","updatedClickedFolder","partialTreeWithUpdatedClickedFolder","newPartialTree"],"sources":["afterOpenFolder.ts"],"sourcesContent":["import type {\n  PartialTree,\n  PartialTreeFile,\n  PartialTreeFolder,\n  PartialTreeFolderNode,\n} from '@uppy/core/lib/Uppy.js'\nimport type { CompanionFile } from '@uppy/utils/lib/CompanionFile'\n\nconst afterOpenFolder = (\n  oldPartialTree: PartialTree,\n  discoveredItems: CompanionFile[],\n  clickedFolder: PartialTreeFolder,\n  currentPagePath: string | null,\n  validateSingleFile: (file: CompanionFile) => string | null,\n): PartialTree => {\n  const discoveredFolders = discoveredItems.filter((i) => i.isFolder === true)\n  const discoveredFiles = discoveredItems.filter((i) => i.isFolder === false)\n\n  const isParentFolderChecked =\n    clickedFolder.type === 'folder' && clickedFolder.status === 'checked'\n  const folders: PartialTreeFolderNode[] = discoveredFolders.map((folder) => ({\n    type: 'folder',\n    id: folder.requestPath,\n    cached: false,\n    nextPagePath: null,\n    status: isParentFolderChecked ? 'checked' : 'unchecked',\n    parentId: clickedFolder.id,\n    data: folder,\n  }))\n  const files: PartialTreeFile[] = discoveredFiles.map((file) => {\n    const restrictionError = validateSingleFile(file)\n    return {\n      type: 'file',\n      id: file.requestPath,\n\n      restrictionError,\n\n      status:\n        isParentFolderChecked && !restrictionError ? 'checked' : 'unchecked',\n      parentId: clickedFolder.id,\n      data: file,\n    }\n  })\n\n  // just doing `clickedFolder.cached = true` in a non-mutating way\n  const updatedClickedFolder: PartialTreeFolder = {\n    ...clickedFolder,\n    cached: true,\n    nextPagePath: currentPagePath,\n  }\n  const partialTreeWithUpdatedClickedFolder = oldPartialTree.map((folder) =>\n    folder.id === updatedClickedFolder.id ? updatedClickedFolder : folder,\n  )\n\n  const newPartialTree = [\n    ...partialTreeWithUpdatedClickedFolder,\n    ...folders,\n    ...files,\n  ]\n  return newPartialTree\n}\n\nexport default afterOpenFolder\n"],"mappings":"AAQA,MAAMA,eAAe,GAAGA,CACtBC,cAA2B,EAC3BC,eAAgC,EAChCC,aAAgC,EAChCC,eAA8B,EAC9BC,kBAA0D,KAC1C;EAChB,MAAMC,iBAAiB,GAAGJ,eAAe,CAACK,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,QAAQ,KAAK,IAAI,CAAC;EAC5E,MAAMC,eAAe,GAAGR,eAAe,CAACK,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,QAAQ,KAAK,KAAK,CAAC;EAE3E,MAAME,qBAAqB,GACzBR,aAAa,CAACS,IAAI,KAAK,QAAQ,IAAIT,aAAa,CAACU,MAAM,KAAK,SAAS;EACvE,MAAMC,OAAgC,GAAGR,iBAAiB,CAACS,GAAG,CAAEC,MAAM,KAAM;IAC1EJ,IAAI,EAAE,QAAQ;IACdK,EAAE,EAAED,MAAM,CAACE,WAAW;IACtBC,MAAM,EAAE,KAAK;IACbC,YAAY,EAAE,IAAI;IAClBP,MAAM,EAAEF,qBAAqB,GAAG,SAAS,GAAG,WAAW;IACvDU,QAAQ,EAAElB,aAAa,CAACc,EAAE;IAC1BK,IAAI,EAAEN;EACR,CAAC,CAAC,CAAC;EACH,MAAMO,KAAwB,GAAGb,eAAe,CAACK,GAAG,CAAES,IAAI,IAAK;IAC7D,MAAMC,gBAAgB,GAAGpB,kBAAkB,CAACmB,IAAI,CAAC;IACjD,OAAO;MACLZ,IAAI,EAAE,MAAM;MACZK,EAAE,EAAEO,IAAI,CAACN,WAAW;MAEpBO,gBAAgB;MAEhBZ,MAAM,EACJF,qBAAqB,IAAI,CAACc,gBAAgB,GAAG,SAAS,GAAG,WAAW;MACtEJ,QAAQ,EAAElB,aAAa,CAACc,EAAE;MAC1BK,IAAI,EAAEE;IACR,CAAC;EACH,CAAC,CAAC;;EAEF;EACA,MAAME,oBAAuC,GAAG;IAC9C,GAAGvB,aAAa;IAChBgB,MAAM,EAAE,IAAI;IACZC,YAAY,EAAEhB;EAChB,CAAC;EACD,MAAMuB,mCAAmC,GAAG1B,cAAc,CAACc,GAAG,CAAEC,MAAM,IACpEA,MAAM,CAACC,EAAE,KAAKS,oBAAoB,CAACT,EAAE,GAAGS,oBAAoB,GAAGV,MACjE,CAAC;EAED,MAAMY,cAAc,GAAG,CACrB,GAAGD,mCAAmC,EACtC,GAAGb,OAAO,EACV,GAAGS,KAAK,CACT;EACD,OAAOK,cAAc;AACvB,CAAC;AAED,eAAe5B,eAAe","ignoreList":[]}