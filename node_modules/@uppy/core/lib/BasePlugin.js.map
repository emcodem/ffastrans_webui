{"version":3,"names":["Translator","BasePlugin","constructor","uppy","opts","getPluginState","plugins","getState","id","setPluginState","update","setState","setOptions","newOpts","undefined","i18nInit","translator","defaultLocale","locale","i18n","translate","bind","i18nArray","translateArray","addTarget","plugin","Error","install","uninstall","state","afterUpdate"],"sources":["BasePlugin.ts"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n\n/**\n * Core plugin logic that all plugins share.\n *\n * BasePlugin does not contain DOM rendering so it can be used for plugins\n * without a user interface.\n *\n * See `Plugin` for the extended version with Preact rendering for interfaces.\n */\n\nimport Translator from '@uppy/utils/lib/Translator'\nimport type {\n  I18n,\n  Locale,\n  OptionalPluralizeLocale,\n} from '@uppy/utils/lib/Translator'\nimport type { Body, Meta } from '@uppy/utils/lib/UppyFile'\nimport type { State, UnknownPlugin, Uppy } from './Uppy.ts'\n\nexport type PluginOpts = {\n  locale?: Locale\n  id?: string\n}\n\nexport type OnlyOptionals<T> = Pick<\n  T,\n  {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    [K in keyof T]-?: {} extends Pick<T, K> ? K : never\n  }[keyof T]\n>\n\n/**\n * DefinePluginOpts marks all of the passed AlwaysDefinedKeys as “required” or “always defined”.\n */\nexport type DefinePluginOpts<\n  Opts,\n  AlwaysDefinedKeys extends keyof OnlyOptionals<Opts>,\n> = Opts & Required<Pick<Opts, AlwaysDefinedKeys>>\n\nexport default class BasePlugin<\n  Opts extends PluginOpts,\n  M extends Meta,\n  B extends Body,\n  PluginState extends Record<string, unknown> = Record<string, unknown>,\n> {\n  uppy: Uppy<M, B>\n\n  opts: Opts\n\n  id!: string\n\n  defaultLocale: OptionalPluralizeLocale\n\n  i18n!: I18n\n\n  i18nArray!: Translator['translateArray']\n\n  type!: string\n\n  VERSION!: string\n\n  constructor(uppy: Uppy<M, B>, opts?: Opts) {\n    this.uppy = uppy\n    this.opts = opts ?? ({} as Opts)\n  }\n\n  getPluginState(): PluginState {\n    const { plugins } = this.uppy.getState()\n    return (plugins?.[this.id] || {}) as PluginState\n  }\n\n  setPluginState(update?: Partial<PluginState>): void {\n    const { plugins } = this.uppy.getState()\n\n    this.uppy.setState({\n      plugins: {\n        ...plugins,\n        [this.id]: {\n          ...plugins[this.id],\n          ...update,\n        },\n      },\n    })\n  }\n\n  setOptions(newOpts: Partial<Opts>): void {\n    this.opts = { ...this.opts, ...newOpts }\n    this.setPluginState(undefined) // so that UI re-renders with new options\n    this.i18nInit()\n  }\n\n  i18nInit(): void {\n    const translator = new Translator([\n      this.defaultLocale,\n      this.uppy.locale,\n      this.opts.locale,\n    ])\n    this.i18n = translator.translate.bind(translator)\n    this.i18nArray = translator.translateArray.bind(translator)\n    this.setPluginState(undefined) // so that UI re-renders and we see the updated locale\n  }\n\n  /**\n   * Extendable methods\n   * ==================\n   * These methods are here to serve as an overview of the extendable methods as well as\n   * making them not conditional in use, such as `if (this.afterUpdate)`.\n   */\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addTarget(plugin: UnknownPlugin<M, B>): HTMLElement | null {\n    throw new Error(\n      \"Extend the addTarget method to add your plugin to another plugin's target\",\n    )\n  }\n\n  install(): void {}\n\n  uninstall(): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  update(state: Partial<State<M, B>>): void {}\n\n  // Called after every state update, after everything's mounted. Debounced.\n  afterUpdate(): void {}\n}\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,4BAA4B;;AAsBnD;AACA;AACA;;AAMA,eAAe,MAAMC,UAAU,CAK7B;EAiBAC,WAAWA,CAACC,IAAgB,EAAEC,IAAW,EAAE;IACzC,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI,WAAJA,IAAI,GAAK,CAAC,CAAU;EAClC;EAEAC,cAAcA,CAAA,EAAgB;IAC5B,MAAM;MAAEC;IAAQ,CAAC,GAAG,IAAI,CAACH,IAAI,CAACI,QAAQ,CAAC,CAAC;IACxC,OAAQ,CAAAD,OAAO,oBAAPA,OAAO,CAAG,IAAI,CAACE,EAAE,CAAC,KAAI,CAAC,CAAC;EAClC;EAEAC,cAAcA,CAACC,MAA6B,EAAQ;IAClD,MAAM;MAAEJ;IAAQ,CAAC,GAAG,IAAI,CAACH,IAAI,CAACI,QAAQ,CAAC,CAAC;IAExC,IAAI,CAACJ,IAAI,CAACQ,QAAQ,CAAC;MACjBL,OAAO,EAAE;QACP,GAAGA,OAAO;QACV,CAAC,IAAI,CAACE,EAAE,GAAG;UACT,GAAGF,OAAO,CAAC,IAAI,CAACE,EAAE,CAAC;UACnB,GAAGE;QACL;MACF;IACF,CAAC,CAAC;EACJ;EAEAE,UAAUA,CAACC,OAAsB,EAAQ;IACvC,IAAI,CAACT,IAAI,GAAG;MAAE,GAAG,IAAI,CAACA,IAAI;MAAE,GAAGS;IAAQ,CAAC;IACxC,IAAI,CAACJ,cAAc,CAACK,SAAS,CAAC,EAAC;IAC/B,IAAI,CAACC,QAAQ,CAAC,CAAC;EACjB;EAEAA,QAAQA,CAAA,EAAS;IACf,MAAMC,UAAU,GAAG,IAAIhB,UAAU,CAAC,CAChC,IAAI,CAACiB,aAAa,EAClB,IAAI,CAACd,IAAI,CAACe,MAAM,EAChB,IAAI,CAACd,IAAI,CAACc,MAAM,CACjB,CAAC;IACF,IAAI,CAACC,IAAI,GAAGH,UAAU,CAACI,SAAS,CAACC,IAAI,CAACL,UAAU,CAAC;IACjD,IAAI,CAACM,SAAS,GAAGN,UAAU,CAACO,cAAc,CAACF,IAAI,CAACL,UAAU,CAAC;IAC3D,IAAI,CAACP,cAAc,CAACK,SAAS,CAAC,EAAC;EACjC;;EAEA;AACF;AACA;AACA;AACA;AACA;;EAEE;EACAU,SAASA,CAACC,MAA2B,EAAsB;IACzD,MAAM,IAAIC,KAAK,CACb,2EACF,CAAC;EACH;EAEAC,OAAOA,CAAA,EAAS,CAAC;EAEjBC,SAASA,CAAA,EAAS,CAAC;;EAEnB;EACAlB,MAAMA,CAACmB,KAA2B,EAAQ,CAAC;;EAE3C;EACAC,WAAWA,CAAA,EAAS,CAAC;AACvB","ignoreList":[]}