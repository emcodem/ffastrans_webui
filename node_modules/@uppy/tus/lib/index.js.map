{"version":3,"names":["BasePlugin","tus","EventManager","NetworkError","isNetworkError","RateLimitedQueue","hasProperty","filterNonFailedFiles","filterFilesToEmitUploadStarted","getAllowedMetaFields","getFingerprint","packageJson","tusDefaultOptions","endpoint","uploadUrl","metadata","uploadSize","onProgress","onChunkComplete","onSuccess","onError","overridePatchMethod","headers","addRequestId","chunkSize","Infinity","retryDelays","parallelUploads","removeFingerprintOnSuccess","uploadLengthDeferred","uploadDataDuringCreation","defaultOptions","limit","withCredentials","allowedMetaFields","_retryDelayIterator","_classPrivateFieldLooseKey","_uploadLocalFile","_getCompanionClientArgs","_uploadFiles","_handleUpload","Tus","constructor","uppy","opts","_this$opts$rateLimite","_this$opts$retryDelay","Object","defineProperty","value","_uploadFiles2","_getCompanionClientArgs2","_uploadLocalFile2","writable","fileIDs","length","log","filesToUpload","getFilesByIds","_classPrivateFieldLooseBase","type","id","undefined","Error","requests","rateLimitedQueue","values","uploaders","create","uploaderEvents","resetUploaderReferences","fileID","uploader","abort","remove","onReceiveUploadUrl","file","uploadURL","currentFile","getFile","setFileState","install","setState","capabilities","getState","resumableUploads","addUploader","uninstall","removeUploader","Promise","resolve","reject","queuedRequest","qRequest","upload","onShouldRetry","onBeforeRequest","commonOpts","uploadOptions","fingerprint","req","xhr","getUnderlyingObject","userProvidedPromise","shouldBeRequeued","done","p","res","run","isPaused","all","err","_queuedRequest","originalRequest","bytesUploaded","bytesTotal","_latestFile$progress$","url","latestFile","emit","uploadStarted","progress","payload","_upload$url","uploadResp","status","body","lastResponse","name","defaultOnShouldRetry","_err$originalResponse","originalResponse","getStatus","_classPrivateFieldLoo","next","rateLimit","navigator","onLine","pause","window","addEventListener","resume","once","fn","error","retryAttempt","copyProp","obj","srcProp","destProp","meta","forEach","item","String","Upload","data","eventManager","start","findPreviousUploads","then","previousUploads","previousUpload","creationTime","resumeFromPreviousUpload","onFileRemove","targetFileID","onPause","onPauseAll","onCancelAll","onResumeAll","catch","_file$remote","assign","remote","protocol","size","files","filesFiltered","filesToEmit","allSettled","map","isRemote","getQueue","controller","AbortController","removedHandler","removedFile","on","uploadPromise","getRequestClientForFile","uploadRemoteFile","signal","wrapSyncFunction","off","priority","VERSION","version"],"sources":["index.ts"],"sourcesContent":["import BasePlugin, {\n  type DefinePluginOpts,\n  type PluginOpts,\n} from '@uppy/core/lib/BasePlugin.js'\nimport * as tus from 'tus-js-client'\nimport EventManager from '@uppy/core/lib/EventManager.js'\nimport NetworkError from '@uppy/utils/lib/NetworkError'\nimport isNetworkError from '@uppy/utils/lib/isNetworkError'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore untyped\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport hasProperty from '@uppy/utils/lib/hasProperty'\nimport {\n  filterNonFailedFiles,\n  filterFilesToEmitUploadStarted,\n} from '@uppy/utils/lib/fileFilters'\nimport type { Meta, Body, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport type { Uppy } from '@uppy/core'\nimport type { RequestClient } from '@uppy/companion-client'\nimport getAllowedMetaFields from '@uppy/utils/lib/getAllowedMetaFields'\nimport getFingerprint from './getFingerprint.ts'\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport packageJson from '../package.json'\n\ntype RestTusUploadOptions = Omit<\n  tus.UploadOptions,\n  'onShouldRetry' | 'onBeforeRequest' | 'headers'\n>\n\nexport type TusDetailedError = tus.DetailedError\n\nexport type TusBody = { xhr: XMLHttpRequest }\n\nexport interface TusOpts<M extends Meta, B extends Body>\n  extends PluginOpts,\n    RestTusUploadOptions {\n  endpoint?: string\n  headers?:\n    | Record<string, string>\n    | ((file: UppyFile<M, B>) => Record<string, string>)\n  limit?: number\n  chunkSize?: number\n  onBeforeRequest?: (req: tus.HttpRequest, file: UppyFile<M, B>) => void\n  onShouldRetry?: (\n    err: tus.DetailedError,\n    retryAttempt: number,\n    options: TusOpts<M, B>,\n    next: (e: tus.DetailedError) => boolean,\n  ) => boolean\n  retryDelays?: number[]\n  withCredentials?: boolean\n  allowedMetaFields?: boolean | string[]\n  rateLimitedQueue?: RateLimitedQueue\n}\nexport type { TusOpts as TusOptions }\n\n/**\n * Extracted from https://github.com/tus/tus-js-client/blob/master/lib/upload.js#L13\n * excepted we removed 'fingerprint' key to avoid adding more dependencies\n */\nconst tusDefaultOptions = {\n  endpoint: '',\n\n  uploadUrl: null,\n  metadata: {},\n  uploadSize: null,\n\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n\n  overridePatchMethod: false,\n  headers: {},\n  addRequestId: false,\n\n  chunkSize: Infinity,\n  retryDelays: [100, 1000, 3000, 5000],\n  parallelUploads: 1,\n  removeFingerprintOnSuccess: false,\n  uploadLengthDeferred: false,\n  uploadDataDuringCreation: false,\n} satisfies tus.UploadOptions\n\nconst defaultOptions = {\n  limit: 20,\n  retryDelays: tusDefaultOptions.retryDelays,\n  withCredentials: false,\n  allowedMetaFields: true,\n} satisfies Partial<TusOpts<any, any>>\n\ntype Opts<M extends Meta, B extends Body> = DefinePluginOpts<\n  TusOpts<M, B>,\n  keyof typeof defaultOptions\n>\n\ndeclare module '@uppy/utils/lib/UppyFile' {\n  // eslint-disable-next-line no-shadow, @typescript-eslint/no-unused-vars\n  export interface UppyFile<M extends Meta, B extends Body> {\n    tus?: TusOpts<M, B>\n  }\n}\n\n/**\n * Tus resumable file uploader\n */\nexport default class Tus<M extends Meta, B extends Body> extends BasePlugin<\n  Opts<M, B>,\n  M,\n  B\n> {\n  static VERSION = packageJson.version\n\n  #retryDelayIterator\n\n  requests: RateLimitedQueue\n\n  uploaders: Record<string, tus.Upload | null>\n\n  uploaderEvents: Record<string, EventManager<M, B> | null>\n\n  constructor(uppy: Uppy<M, B>, opts: TusOpts<M, B>) {\n    super(uppy, { ...defaultOptions, ...opts })\n    this.type = 'uploader'\n    this.id = this.opts.id || 'Tus'\n\n    if (opts?.allowedMetaFields === undefined && 'metaFields' in this.opts) {\n      throw new Error(\n        'The `metaFields` option has been renamed to `allowedMetaFields`.',\n      )\n    }\n\n    if ('autoRetry' in opts) {\n      throw new Error(\n        'The `autoRetry` option was deprecated and has been removed.',\n      )\n    }\n\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n    this.requests =\n      this.opts.rateLimitedQueue ?? new RateLimitedQueue(this.opts.limit)\n    this.#retryDelayIterator = this.opts.retryDelays?.values()\n\n    this.uploaders = Object.create(null)\n    this.uploaderEvents = Object.create(null)\n  }\n\n  /**\n   * Clean up all references for a file's upload: the tus.Upload instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   */\n  resetUploaderReferences(fileID: string, opts?: { abort: boolean }): void {\n    const uploader = this.uploaders[fileID]\n    if (uploader) {\n      uploader.abort()\n\n      if (opts?.abort) {\n        uploader.abort(true)\n      }\n\n      this.uploaders[fileID] = null\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID]!.remove()\n      this.uploaderEvents[fileID] = null\n    }\n  }\n\n  /**\n   * Create a new Tus upload.\n   *\n   * A lot can happen during an upload, so this is quite hard to follow!\n   * - First, the upload is started. If the file was already paused by the time the upload starts, nothing should happen.\n   *   If the `limit` option is used, the upload must be queued onto the `this.requests` queue.\n   *   When an upload starts, we store the tus.Upload instance, and an EventManager instance that manages the event listeners\n   *   for pausing, cancellation, removal, etc.\n   * - While the upload is in progress, it may be paused or cancelled.\n   *   Pausing aborts the underlying tus.Upload, and removes the upload from the `this.requests` queue. All other state is\n   *   maintained.\n   *   Cancelling removes the upload from the `this.requests` queue, and completely aborts the upload-- the `tus.Upload`\n   *   instance is aborted and discarded, the EventManager instance is destroyed (removing all listeners).\n   *   Resuming the upload uses the `this.requests` queue as well, to prevent selectively pausing and resuming uploads from\n   *   bypassing the limit.\n   * - After completing an upload, the tus.Upload and EventManager instances are cleaned up, and the upload is marked as done\n   *   in the `this.requests` queue.\n   * - When an upload completed with an error, the same happens as on successful completion, but the `upload()` promise is\n   *   rejected.\n   *\n   * When working on this function, keep in mind:\n   *  - When an upload is completed or cancelled for any reason, the tus.Upload and EventManager instances need to be cleaned\n   *    up using this.resetUploaderReferences().\n   *  - When an upload is cancelled or paused, for any reason, it needs to be removed from the `this.requests` queue using\n   *    `queuedRequest.abort()`.\n   *  - When an upload is completed for any reason, including errors, it needs to be marked as such using\n   *    `queuedRequest.done()`.\n   *  - When an upload is started or resumed, it needs to go through the `this.requests` queue. The `queuedRequest` variable\n   *    must be updated so the other uses of it are valid.\n   *  - Before replacing the `queuedRequest` variable, the previous `queuedRequest` must be aborted, else it will keep taking\n   *    up a spot in the queue.\n   *\n   */\n  #uploadLocalFile(file: UppyFile<M, B>): Promise<tus.Upload | string> {\n    this.resetUploaderReferences(file.id)\n\n    // Create a new tus upload\n    return new Promise<tus.Upload | string>((resolve, reject) => {\n      let queuedRequest: ReturnType<RateLimitedQueue['run']>\n      let qRequest: () => () => void\n      let upload: tus.Upload\n\n      const opts = {\n        ...this.opts,\n        ...(file.tus || {}),\n      }\n\n      if (typeof opts.headers === 'function') {\n        opts.headers = opts.headers(file)\n      }\n\n      const { onShouldRetry, onBeforeRequest, ...commonOpts } = opts\n\n      const uploadOptions: tus.UploadOptions = {\n        ...tusDefaultOptions,\n        ...commonOpts,\n      }\n\n      // We override tus fingerprint to uppy’s `file.id`, since the `file.id`\n      // now also includes `relativePath` for files added from folders.\n      // This means you can add 2 identical files, if one is in folder a,\n      // the other in folder b.\n      uploadOptions.fingerprint = getFingerprint(file)\n\n      uploadOptions.onBeforeRequest = async (req) => {\n        const xhr = req.getUnderlyingObject()\n        xhr.withCredentials = !!opts.withCredentials\n\n        let userProvidedPromise\n        if (typeof onBeforeRequest === 'function') {\n          userProvidedPromise = onBeforeRequest(req, file)\n        }\n\n        if (hasProperty(queuedRequest, 'shouldBeRequeued')) {\n          if (!queuedRequest.shouldBeRequeued) return Promise.reject()\n          // TODO: switch to `Promise.withResolvers` on the next major if available.\n          let done: () => void\n          // eslint-disable-next-line promise/param-names\n          const p = new Promise<void>((res) => {\n            done = res\n          })\n          queuedRequest = this.requests.run(() => {\n            if (file.isPaused) {\n              queuedRequest.abort()\n            }\n            done()\n            return () => {}\n          })\n          // If the request has been requeued because it was rate limited by the\n          // remote server, we want to wait for `RateLimitedQueue` to dispatch\n          // the re-try request.\n          // Therefore we create a promise that the queue will resolve when\n          // enough time has elapsed to expect not to be rate-limited again.\n          // This means we can hold the Tus retry here with a `Promise.all`,\n          // together with the returned value of the user provided\n          // `onBeforeRequest` option callback (in case it returns a promise).\n          await Promise.all([p, userProvidedPromise])\n          return undefined\n        }\n        return userProvidedPromise\n      }\n\n      uploadOptions.onError = (err) => {\n        this.uppy.log(err)\n\n        const xhr =\n          (err as tus.DetailedError).originalRequest != null ?\n            (err as tus.DetailedError).originalRequest.getUnderlyingObject()\n          : null\n        if (isNetworkError(xhr)) {\n          // eslint-disable-next-line no-param-reassign\n          err = new NetworkError(err, xhr)\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest?.abort()\n\n        if (typeof opts.onError === 'function') {\n          opts.onError(err)\n        }\n        reject(err)\n      }\n\n      uploadOptions.onProgress = (bytesUploaded, bytesTotal) => {\n        this.onReceiveUploadUrl(file, upload.url)\n        if (typeof opts.onProgress === 'function') {\n          opts.onProgress(bytesUploaded, bytesTotal)\n        }\n        const latestFile = this.uppy.getFile(file.id)\n        this.uppy.emit('upload-progress', latestFile, {\n          uploadStarted: latestFile.progress.uploadStarted ?? 0,\n          bytesUploaded,\n          bytesTotal,\n        })\n      }\n\n      uploadOptions.onSuccess = (payload) => {\n        const uploadResp: UppyFile<M, B>['response'] = {\n          uploadURL: upload.url ?? undefined,\n          status: 200,\n          body: {\n            // We have to put `as XMLHttpRequest` because tus-js-client\n            // returns `any`, as the type differs in Node.js and the browser.\n            // In the browser it's always `XMLHttpRequest`.\n            xhr: payload.lastResponse.getUnderlyingObject() as XMLHttpRequest,\n            // Body extends Record<string, unknown> and thus `xhr` is not known\n            // but we export the `TusBody` type, which people pass as a generic into the Uppy class,\n            // so on the implementer side it works as expected.\n          } as unknown as B,\n        }\n\n        this.uppy.emit('upload-success', this.uppy.getFile(file.id), uploadResp)\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n\n        if (upload.url) {\n          // @ts-expect-error not typed in tus-js-client\n          const { name } = upload.file\n          this.uppy.log(`Download ${name} from ${upload.url}`)\n        }\n        if (typeof opts.onSuccess === 'function') {\n          opts.onSuccess(payload)\n        }\n\n        resolve(upload)\n      }\n\n      const defaultOnShouldRetry = (err: tus.DetailedError) => {\n        const status = err?.originalResponse?.getStatus()\n\n        if (status === 429) {\n          // HTTP 429 Too Many Requests => to avoid the whole download to fail, pause all requests.\n          if (!this.requests.isPaused) {\n            const next = this.#retryDelayIterator?.next()\n            if (next == null || next.done) {\n              return false\n            }\n            this.requests.rateLimit(next.value)\n          }\n        } else if (\n          status != null &&\n          status >= 400 &&\n          status < 500 &&\n          status !== 409 &&\n          status !== 423\n        ) {\n          // HTTP 4xx, the server won't send anything, it's doesn't make sense to retry\n          // HTTP 409 Conflict (happens if the Upload-Offset header does not match the one on the server)\n          // HTTP 423 Locked (happens when a paused download is resumed too quickly)\n          return false\n        } else if (\n          typeof navigator !== 'undefined' &&\n          navigator.onLine === false\n        ) {\n          // The navigator is offline, let's wait for it to come back online.\n          if (!this.requests.isPaused) {\n            this.requests.pause()\n            window.addEventListener(\n              'online',\n              () => {\n                this.requests.resume()\n              },\n              { once: true },\n            )\n          }\n        }\n        queuedRequest.abort()\n        queuedRequest = {\n          shouldBeRequeued: true,\n          abort() {\n            this.shouldBeRequeued = false\n          },\n          done() {\n            throw new Error(\n              'Cannot mark a queued request as done: this indicates a bug',\n            )\n          },\n          fn() {\n            throw new Error('Cannot run a queued request: this indicates a bug')\n          },\n        }\n        return true\n      }\n\n      if (onShouldRetry != null) {\n        uploadOptions.onShouldRetry = (\n          error: tus.DetailedError,\n          retryAttempt: number,\n        ) => onShouldRetry(error, retryAttempt, opts, defaultOnShouldRetry)\n      } else {\n        uploadOptions.onShouldRetry = defaultOnShouldRetry\n      }\n\n      const copyProp = (\n        obj: Record<string, unknown>,\n        srcProp: string,\n        destProp: string,\n      ) => {\n        if (hasProperty(obj, srcProp) && !hasProperty(obj, destProp)) {\n          // eslint-disable-next-line no-param-reassign\n          obj[destProp] = obj[srcProp]\n        }\n      }\n\n      // We can't use `allowedMetaFields` to index generic M\n      // and we also don't care about the type specifically here,\n      // we just want to pass the meta fields along.\n      const meta: Record<string, string> = {}\n      const allowedMetaFields = getAllowedMetaFields(\n        opts.allowedMetaFields,\n        file.meta,\n      )\n      allowedMetaFields.forEach((item) => {\n        // tus type definition for metadata only accepts `Record<string, string>`\n        // but in reality (at runtime) it accepts `Record<string, unknown>`\n        // tus internally converts everything into a string, but let's do it here instead to be explicit.\n        // because Uppy can have anything inside meta values, (for example relativePath: null is often sent by uppy)\n        meta[item] = String(file.meta[item])\n      })\n\n      // tusd uses metadata fields 'filetype' and 'filename'\n      copyProp(meta, 'type', 'filetype')\n      copyProp(meta, 'name', 'filename')\n\n      uploadOptions.metadata = meta\n\n      upload = new tus.Upload(file.data, uploadOptions)\n      this.uploaders[file.id] = upload\n      const eventManager = new EventManager(this.uppy)\n      this.uploaderEvents[file.id] = eventManager\n\n      // eslint-disable-next-line prefer-const\n      qRequest = () => {\n        if (!file.isPaused) {\n          upload.start()\n        }\n        // Don't do anything here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        // Also, we need to remove the request from the queue _without_ destroying everything\n        // related to this upload to handle pauses.\n        return () => {}\n      }\n\n      upload.findPreviousUploads().then((previousUploads) => {\n        const previousUpload = previousUploads[0]\n        if (previousUpload) {\n          this.uppy.log(\n            `[Tus] Resuming upload of ${file.id} started at ${previousUpload.creationTime}`,\n          )\n          upload.resumeFromPreviousUpload(previousUpload)\n        }\n      })\n\n      queuedRequest = this.requests.run(qRequest)\n\n      eventManager.onFileRemove(file.id, (targetFileID) => {\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        resolve(`upload ${targetFileID} was removed`)\n      })\n\n      eventManager.onPause(file.id, (isPaused) => {\n        queuedRequest.abort()\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          upload.abort()\n        } else {\n          // Resuming an upload should be queued, else you could pause and then\n          // resume a queued upload to make it skip the queue.\n          queuedRequest = this.requests.run(qRequest)\n        }\n      })\n\n      eventManager.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        upload.abort()\n      })\n\n      eventManager.onCancelAll(file.id, () => {\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      eventManager.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          upload.abort()\n        }\n        queuedRequest = this.requests.run(qRequest)\n      })\n    }).catch((err) => {\n      this.uppy.emit('upload-error', file, err)\n      throw err\n    })\n  }\n\n  /**\n   * Store the uploadUrl on the file options, so that when Golden Retriever\n   * restores state, we will continue uploading to the correct URL.\n   */\n  onReceiveUploadUrl(file: UppyFile<M, B>, uploadURL: string | null): void {\n    const currentFile = this.uppy.getFile(file.id)\n    if (!currentFile) return\n    // Only do the update if we didn't have an upload URL yet.\n    if (!currentFile.tus || currentFile.tus.uploadUrl !== uploadURL) {\n      this.uppy.log('[Tus] Storing upload url')\n      this.uppy.setFileState(currentFile.id, {\n        tus: { ...currentFile.tus, uploadUrl: uploadURL },\n      })\n    }\n  }\n\n  #getCompanionClientArgs(file: UppyFile<M, B>) {\n    const opts = { ...this.opts }\n\n    if (file.tus) {\n      // Install file-specific upload overrides.\n      Object.assign(opts, file.tus)\n    }\n\n    if (typeof opts.headers === 'function') {\n      opts.headers = opts.headers(file)\n    }\n\n    return {\n      ...file.remote?.body,\n      endpoint: opts.endpoint,\n      uploadUrl: opts.uploadUrl,\n      protocol: 'tus',\n      size: file.data.size,\n      headers: opts.headers,\n      metadata: file.meta,\n    }\n  }\n\n  async #uploadFiles(files: UppyFile<M, B>[]) {\n    const filesFiltered = filterNonFailedFiles(files)\n    const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered)\n    this.uppy.emit('upload-start', filesToEmit)\n\n    await Promise.allSettled(\n      filesFiltered.map((file) => {\n        if (file.isRemote) {\n          const getQueue = () => this.requests\n          const controller = new AbortController()\n\n          const removedHandler = (removedFile: UppyFile<M, B>) => {\n            if (removedFile.id === file.id) controller.abort()\n          }\n          this.uppy.on('file-removed', removedHandler)\n\n          const uploadPromise = this.uppy\n            .getRequestClientForFile<RequestClient<M, B>>(file)\n            .uploadRemoteFile(file, this.#getCompanionClientArgs(file), {\n              signal: controller.signal,\n              getQueue,\n            })\n\n          this.requests.wrapSyncFunction(\n            () => {\n              this.uppy.off('file-removed', removedHandler)\n            },\n            { priority: -1 },\n          )()\n\n          return uploadPromise\n        }\n\n        return this.#uploadLocalFile(file)\n      }),\n    )\n  }\n\n  #handleUpload = async (fileIDs: string[]) => {\n    if (fileIDs.length === 0) {\n      this.uppy.log('[Tus] No files to upload')\n      return\n    }\n\n    if (this.opts.limit === 0) {\n      this.uppy.log(\n        '[Tus] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/tus/#limit-0',\n        'warning',\n      )\n    }\n\n    this.uppy.log('[Tus] Uploading...')\n    const filesToUpload = this.uppy.getFilesByIds(fileIDs)\n\n    await this.#uploadFiles(filesToUpload)\n  }\n\n  install(): void {\n    this.uppy.setState({\n      capabilities: {\n        ...this.uppy.getState().capabilities,\n        resumableUploads: true,\n      },\n    })\n    this.uppy.addUploader(this.#handleUpload)\n  }\n\n  uninstall(): void {\n    this.uppy.setState({\n      capabilities: {\n        ...this.uppy.getState().capabilities,\n        resumableUploads: false,\n      },\n    })\n    this.uppy.removeUploader(this.#handleUpload)\n  }\n}\n"],"mappings":"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","ignoreList":[]}