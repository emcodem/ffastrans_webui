{"version":3,"file":"vendors-node_modules_aws-sdk_client-sts_dist-es_index_js.bundle.js","mappings":"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","sources":["webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/STS.js","webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithSAMLCommand.js","webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js","webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/commands/DecodeAuthorizationMessageCommand.js","webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/commands/GetAccessKeyInfoCommand.js","webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/commands/GetCallerIdentityCommand.js","webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/commands/GetFederationTokenCommand.js","webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/commands/GetSessionTokenCommand.js","webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/commands/index.js","webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/defaultRoleAssumers.js","webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js","webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/index.js","webpack://ffastrans_webui/./node_modules/@aws-sdk/client-sts/dist-es/models/index.js"],"sourcesContent":["import { createAggregatedClient } from \"@smithy/smithy-client\";\nimport { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithSAMLCommand, } from \"./commands/AssumeRoleWithSAMLCommand\";\nimport { AssumeRoleWithWebIdentityCommand, } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nimport { DecodeAuthorizationMessageCommand, } from \"./commands/DecodeAuthorizationMessageCommand\";\nimport { GetAccessKeyInfoCommand, } from \"./commands/GetAccessKeyInfoCommand\";\nimport { GetCallerIdentityCommand, } from \"./commands/GetCallerIdentityCommand\";\nimport { GetFederationTokenCommand, } from \"./commands/GetFederationTokenCommand\";\nimport { GetSessionTokenCommand, } from \"./commands/GetSessionTokenCommand\";\nimport { STSClient } from \"./STSClient\";\nconst commands = {\n    AssumeRoleCommand,\n    AssumeRoleWithSAMLCommand,\n    AssumeRoleWithWebIdentityCommand,\n    DecodeAuthorizationMessageCommand,\n    GetAccessKeyInfoCommand,\n    GetCallerIdentityCommand,\n    GetFederationTokenCommand,\n    GetSessionTokenCommand,\n};\nexport class STS extends STSClient {\n}\ncreateAggregatedClient(commands, STS);\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { AssumeRoleWithSAMLRequestFilterSensitiveLog, AssumeRoleWithSAMLResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { de_AssumeRoleWithSAMLCommand, se_AssumeRoleWithSAMLCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class AssumeRoleWithSAMLCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"AWSSecurityTokenServiceV20110615\", \"AssumeRoleWithSAML\", {})\n    .n(\"STSClient\", \"AssumeRoleWithSAMLCommand\")\n    .f(AssumeRoleWithSAMLRequestFilterSensitiveLog, AssumeRoleWithSAMLResponseFilterSensitiveLog)\n    .ser(se_AssumeRoleWithSAMLCommand)\n    .de(de_AssumeRoleWithSAMLCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { de_AssumeRoleWithWebIdentityCommand, se_AssumeRoleWithWebIdentityCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class AssumeRoleWithWebIdentityCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"AWSSecurityTokenServiceV20110615\", \"AssumeRoleWithWebIdentity\", {})\n    .n(\"STSClient\", \"AssumeRoleWithWebIdentityCommand\")\n    .f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog)\n    .ser(se_AssumeRoleWithWebIdentityCommand)\n    .de(de_AssumeRoleWithWebIdentityCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_DecodeAuthorizationMessageCommand, se_DecodeAuthorizationMessageCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class DecodeAuthorizationMessageCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"AWSSecurityTokenServiceV20110615\", \"DecodeAuthorizationMessage\", {})\n    .n(\"STSClient\", \"DecodeAuthorizationMessageCommand\")\n    .f(void 0, void 0)\n    .ser(se_DecodeAuthorizationMessageCommand)\n    .de(de_DecodeAuthorizationMessageCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_GetAccessKeyInfoCommand, se_GetAccessKeyInfoCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class GetAccessKeyInfoCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"AWSSecurityTokenServiceV20110615\", \"GetAccessKeyInfo\", {})\n    .n(\"STSClient\", \"GetAccessKeyInfoCommand\")\n    .f(void 0, void 0)\n    .ser(se_GetAccessKeyInfoCommand)\n    .de(de_GetAccessKeyInfoCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_GetCallerIdentityCommand, se_GetCallerIdentityCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class GetCallerIdentityCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"AWSSecurityTokenServiceV20110615\", \"GetCallerIdentity\", {})\n    .n(\"STSClient\", \"GetCallerIdentityCommand\")\n    .f(void 0, void 0)\n    .ser(se_GetCallerIdentityCommand)\n    .de(de_GetCallerIdentityCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { GetFederationTokenResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { de_GetFederationTokenCommand, se_GetFederationTokenCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class GetFederationTokenCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"AWSSecurityTokenServiceV20110615\", \"GetFederationToken\", {})\n    .n(\"STSClient\", \"GetFederationTokenCommand\")\n    .f(void 0, GetFederationTokenResponseFilterSensitiveLog)\n    .ser(se_GetFederationTokenCommand)\n    .de(de_GetFederationTokenCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { GetSessionTokenResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { de_GetSessionTokenCommand, se_GetSessionTokenCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class GetSessionTokenCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"AWSSecurityTokenServiceV20110615\", \"GetSessionToken\", {})\n    .n(\"STSClient\", \"GetSessionTokenCommand\")\n    .f(void 0, GetSessionTokenResponseFilterSensitiveLog)\n    .ser(se_GetSessionTokenCommand)\n    .de(de_GetSessionTokenCommand)\n    .build() {\n}\n","export * from \"./AssumeRoleCommand\";\nexport * from \"./AssumeRoleWithSAMLCommand\";\nexport * from \"./AssumeRoleWithWebIdentityCommand\";\nexport * from \"./DecodeAuthorizationMessageCommand\";\nexport * from \"./GetAccessKeyInfoCommand\";\nexport * from \"./GetCallerIdentityCommand\";\nexport * from \"./GetFederationTokenCommand\";\nexport * from \"./GetSessionTokenCommand\";\n","import { getDefaultRoleAssumer as StsGetDefaultRoleAssumer, getDefaultRoleAssumerWithWebIdentity as StsGetDefaultRoleAssumerWithWebIdentity, } from \"./defaultStsRoleAssumers\";\nimport { STSClient } from \"./STSClient\";\nconst getCustomizableStsClientCtor = (baseCtor, customizations) => {\n    if (!customizations)\n        return baseCtor;\n    else\n        return class CustomizableSTSClient extends baseCtor {\n            constructor(config) {\n                super(config);\n                for (const customization of customizations) {\n                    this.middlewareStack.use(customization);\n                }\n            }\n        };\n};\nexport const getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input),\n    ...input,\n});\n","import { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithWebIdentityCommand, } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst getAccountIdFromAssumedRoleUser = (assumedRoleUser) => {\n    if (typeof assumedRoleUser?.Arn === \"string\") {\n        const arnComponents = assumedRoleUser.Arn.split(\":\");\n        if (arnComponents.length > 4 && arnComponents[4] !== \"\") {\n            return arnComponents[4];\n        }\n    }\n    return undefined;\n};\nconst resolveRegion = async (_region, _parentRegion, credentialProviderLogger) => {\n    const region = typeof _region === \"function\" ? await _region() : _region;\n    const parentRegion = typeof _parentRegion === \"function\" ? await _parentRegion() : _parentRegion;\n    credentialProviderLogger?.debug?.(\"@aws-sdk/client-sts::resolveRegion\", \"accepting first of:\", `${region} (provider)`, `${parentRegion} (parent client)`, `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`);\n    return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;\n};\nexport const getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    let closureSourceCreds;\n    return async (sourceCreds, params) => {\n        closureSourceCreds = sourceCreds;\n        if (!stsClient) {\n            const { logger = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger, } = stsOptions;\n            const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);\n            const isCompatibleRequestHandler = !isH2(requestHandler);\n            stsClient = new stsClientCtor({\n                credentialDefaultProvider: () => async () => closureSourceCreds,\n                region: resolvedRegion,\n                requestHandler: isCompatibleRequestHandler ? requestHandler : undefined,\n                logger: logger,\n            });\n        }\n        const { Credentials, AssumedRoleUser } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser);\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            ...(Credentials.CredentialScope && { credentialScope: Credentials.CredentialScope }),\n            ...(accountId && { accountId }),\n        };\n    };\n};\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    return async (params) => {\n        if (!stsClient) {\n            const { logger = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger, } = stsOptions;\n            const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);\n            const isCompatibleRequestHandler = !isH2(requestHandler);\n            stsClient = new stsClientCtor({\n                region: resolvedRegion,\n                requestHandler: isCompatibleRequestHandler ? requestHandler : undefined,\n                logger: logger,\n            });\n        }\n        const { Credentials, AssumedRoleUser } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n        }\n        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser);\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            ...(Credentials.CredentialScope && { credentialScope: Credentials.CredentialScope }),\n            ...(accountId && { accountId }),\n        };\n    };\n};\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n    ...input,\n});\nconst isH2 = (requestHandler) => {\n    return requestHandler?.metadata?.handlerProtocol === \"h2\";\n};\n","export * from \"./STSClient\";\nexport * from \"./STS\";\nexport * from \"./commands\";\nexport * from \"./models\";\nexport * from \"./defaultRoleAssumers\";\nexport { STSServiceException } from \"./models/STSServiceException\";\n","export * from \"./models_0\";\n"],"names":[],"sourceRoot":""}